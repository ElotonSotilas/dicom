// AUTO-GENERATED FILE - DO NOT EDIT

pub mod dicom_groups {

    #[derive(Debug)]
    pub struct Modality;
    impl std::fmt::Display for Modality {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for Modality {
        fn name(&self) -> String {
            "Modality".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0050, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0050
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl Modality {
        pub type CalibrationImage = modality::CalibrationImage;
        pub type DeviceSequence = modality::DeviceSequence;
        pub type ContainerComponentTypeCodeSequence = modality::ContainerComponentTypeCodeSequence;
        pub type ContainerComponentThickness = modality::ContainerComponentThickness;
        pub type DeviceLength = modality::DeviceLength;
        pub type ContainerComponentWidth = modality::ContainerComponentWidth;
        pub type DeviceDiameter = modality::DeviceDiameter;
        pub type DeviceDiameterUnits = modality::DeviceDiameterUnits;
        pub type DeviceVolume = modality::DeviceVolume;
        pub type InterMarkerDistance = modality::InterMarkerDistance;
        pub type ContainerComponentMaterial = modality::ContainerComponentMaterial;
        pub type ContainerComponentID = modality::ContainerComponentID;
        pub type ContainerComponentLength = modality::ContainerComponentLength;
        pub type ContainerComponentDiameter = modality::ContainerComponentDiameter;
        pub type ContainerComponentDescription = modality::ContainerComponentDescription;
        pub type DeviceDescription = modality::DeviceDescription;
        pub type LongDeviceDescription = modality::LongDeviceDescription;
    }

    pub mod modality {
        #[derive(Debug)]
        pub struct CalibrationImage;
        impl std::fmt::Display for CalibrationImage {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CalibrationImage {
            fn name(&self) -> String {
                "Calibration Image".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceSequence;
        impl std::fmt::Display for DeviceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceSequence {
            fn name(&self) -> String {
                "Device Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentTypeCodeSequence;
        impl std::fmt::Display for ContainerComponentTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentTypeCodeSequence {
            fn name(&self) -> String {
                "Container Component Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentThickness;
        impl std::fmt::Display for ContainerComponentThickness {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentThickness {
            fn name(&self) -> String {
                "Container Component Thickness".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0013)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0013)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceLength;
        impl std::fmt::Display for DeviceLength {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceLength {
            fn name(&self) -> String {
                "Device Length".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0014)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0014)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentWidth;
        impl std::fmt::Display for ContainerComponentWidth {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentWidth {
            fn name(&self) -> String {
                "Container Component Width".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0015)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0015)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceDiameter;
        impl std::fmt::Display for DeviceDiameter {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceDiameter {
            fn name(&self) -> String {
                "Device Diameter".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0016)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0016)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceDiameterUnits;
        impl std::fmt::Display for DeviceDiameterUnits {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceDiameterUnits {
            fn name(&self) -> String {
                "Device Diameter Units".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0017)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0017)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceVolume;
        impl std::fmt::Display for DeviceVolume {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceVolume {
            fn name(&self) -> String {
                "Device Volume".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0018)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0018)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InterMarkerDistance;
        impl std::fmt::Display for InterMarkerDistance {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InterMarkerDistance {
            fn name(&self) -> String {
                "Inter-Marker Distance".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0019)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0019)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentMaterial;
        impl std::fmt::Display for ContainerComponentMaterial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentMaterial {
            fn name(&self) -> String {
                "Container Component Material".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x001A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x001A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentID;
        impl std::fmt::Display for ContainerComponentID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentID {
            fn name(&self) -> String {
                "Container Component ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x001B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x001B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentLength;
        impl std::fmt::Display for ContainerComponentLength {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentLength {
            fn name(&self) -> String {
                "Container Component Length".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x001C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x001C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentDiameter;
        impl std::fmt::Display for ContainerComponentDiameter {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentDiameter {
            fn name(&self) -> String {
                "Container Component Diameter".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x001D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x001D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentDescription;
        impl std::fmt::Display for ContainerComponentDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentDescription {
            fn name(&self) -> String {
                "Container Component Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x001E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x001E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeviceDescription;
        impl std::fmt::Display for DeviceDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeviceDescription {
            fn name(&self) -> String {
                "Device Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LongDeviceDescription;
        impl std::fmt::Display for LongDeviceDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LongDeviceDescription {
            fn name(&self) -> String {
                "Long Device Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0050, 0x0021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0050
            }
            fn element(&self) -> Option<u16> {
                Some(0x0021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct File;
    impl std::fmt::Display for File {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for File {
        fn name(&self) -> String {
            "File".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0008, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0008
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl File {
        pub type LengthToEnd = file::LengthToEnd;
        pub type SpecificCharacterSet = file::SpecificCharacterSet;
        pub type LanguageCodeSequence = file::LanguageCodeSequence;
        pub type ImageType = file::ImageType;
        pub type RecognitionCode = file::RecognitionCode;
        pub type InstanceCreationDate = file::InstanceCreationDate;
        pub type InstanceCreationTime = file::InstanceCreationTime;
        pub type InstanceCreatorUID = file::InstanceCreatorUID;
        pub type InstanceCoercionDateTime = file::InstanceCoercionDateTime;
        pub type SOPClassUID = file::SOPClassUID;
        pub type AcquisitionUID = file::AcquisitionUID;
        pub type SOPInstanceUID = file::SOPInstanceUID;
        pub type PyramidUID = file::PyramidUID;
        pub type RelatedGeneralSOPClassUID = file::RelatedGeneralSOPClassUID;
        pub type OriginalSpecializedSOPClassUID = file::OriginalSpecializedSOPClassUID;
        pub type SyntheticData = file::SyntheticData;
        pub type StudyDate = file::StudyDate;
        pub type SeriesDate = file::SeriesDate;
        pub type AcquisitionDate = file::AcquisitionDate;
        pub type ContentDate = file::ContentDate;
        pub type OverlayDate = file::OverlayDate;
        pub type CurveDate = file::CurveDate;
        pub type AcquisitionDateTime = file::AcquisitionDateTime;
        pub type StudyTime = file::StudyTime;
        pub type SeriesTime = file::SeriesTime;
        pub type AcquisitionTime = file::AcquisitionTime;
        pub type ContentTime = file::ContentTime;
        pub type OverlayTime = file::OverlayTime;
        pub type CurveTime = file::CurveTime;
        pub type DataSetType = file::DataSetType;
        pub type DataSetSubtype = file::DataSetSubtype;
        pub type NuclearMedicineSeriesType = file::NuclearMedicineSeriesType;
        pub type AccessionNumber = file::AccessionNumber;
        pub type IssuerOfAccessionNumberSequence = file::IssuerOfAccessionNumberSequence;
        pub type QueryRetrieveLevel = file::QueryRetrieveLevel;
        pub type QueryRetrieveView = file::QueryRetrieveView;
        pub type RetrieveAETitle = file::RetrieveAETitle;
        pub type StationAETitle = file::StationAETitle;
        pub type InstanceAvailability = file::InstanceAvailability;
        pub type FailedSOPInstanceUIDList = file::FailedSOPInstanceUIDList;
        pub type Modality = file::Modality;
        pub type ModalitiesInStudy = file::ModalitiesInStudy;
        pub type SOPClassesInStudy = file::SOPClassesInStudy;
        pub type AnatomicRegionsInStudyCodeSequence = file::AnatomicRegionsInStudyCodeSequence;
        pub type ConversionType = file::ConversionType;
        pub type PresentationIntentType = file::PresentationIntentType;
        pub type Manufacturer = file::Manufacturer;
        pub type InstitutionName = file::InstitutionName;
        pub type InstitutionAddress = file::InstitutionAddress;
        pub type InstitutionCodeSequence = file::InstitutionCodeSequence;
        pub type ReferringPhysicianName = file::ReferringPhysicianName;
        pub type ReferringPhysicianAddress = file::ReferringPhysicianAddress;
        pub type ReferringPhysicianTelephoneNumbers = file::ReferringPhysicianTelephoneNumbers;
        pub type ReferringPhysicianIdentificationSequence =
            file::ReferringPhysicianIdentificationSequence;
        pub type ConsultingPhysicianName = file::ConsultingPhysicianName;
        pub type ConsultingPhysicianIdentificationSequence =
            file::ConsultingPhysicianIdentificationSequence;
        pub type CodeValue = file::CodeValue;
        pub type ExtendedCodeValue = file::ExtendedCodeValue;
        pub type CodingSchemeDesignator = file::CodingSchemeDesignator;
        pub type CodingSchemeVersion = file::CodingSchemeVersion;
        pub type CodeMeaning = file::CodeMeaning;
        pub type MappingResource = file::MappingResource;
        pub type ContextGroupVersion = file::ContextGroupVersion;
        pub type ContextGroupLocalVersion = file::ContextGroupLocalVersion;
        pub type ExtendedCodeMeaning = file::ExtendedCodeMeaning;
        pub type CodingSchemeResourcesSequence = file::CodingSchemeResourcesSequence;
        pub type CodingSchemeURLType = file::CodingSchemeURLType;
        pub type ContextGroupExtensionFlag = file::ContextGroupExtensionFlag;
        pub type CodingSchemeUID = file::CodingSchemeUID;
        pub type ContextGroupExtensionCreatorUID = file::ContextGroupExtensionCreatorUID;
        pub type CodingSchemeURL = file::CodingSchemeURL;
        pub type ContextIdentifier = file::ContextIdentifier;
        pub type CodingSchemeIdentificationSequence = file::CodingSchemeIdentificationSequence;
        pub type CodingSchemeRegistry = file::CodingSchemeRegistry;
        pub type CodingSchemeExternalID = file::CodingSchemeExternalID;
        pub type CodingSchemeName = file::CodingSchemeName;
        pub type CodingSchemeResponsibleOrganization = file::CodingSchemeResponsibleOrganization;
        pub type ContextUID = file::ContextUID;
        pub type MappingResourceUID = file::MappingResourceUID;
        pub type LongCodeValue = file::LongCodeValue;
        pub type URNCodeValue = file::URNCodeValue;
        pub type EquivalentCodeSequence = file::EquivalentCodeSequence;
        pub type MappingResourceName = file::MappingResourceName;
        pub type ContextGroupIdentificationSequence = file::ContextGroupIdentificationSequence;
        pub type MappingResourceIdentificationSequence =
            file::MappingResourceIdentificationSequence;
        pub type TimezoneOffsetFromUTC = file::TimezoneOffsetFromUTC;
        pub type ResponsibleGroupCodeSequence = file::ResponsibleGroupCodeSequence;
        pub type EquipmentModality = file::EquipmentModality;
        pub type ManufacturerRelatedModelGroup = file::ManufacturerRelatedModelGroup;
        pub type PrivateDataElementCharacteristicsSequence =
            file::PrivateDataElementCharacteristicsSequence;
        pub type PrivateGroupReference = file::PrivateGroupReference;
        pub type PrivateCreatorReference = file::PrivateCreatorReference;
        pub type BlockIdentifyingInformationStatus = file::BlockIdentifyingInformationStatus;
        pub type NonidentifyingPrivateElements = file::NonidentifyingPrivateElements;
        pub type IdentifyingPrivateElements = file::IdentifyingPrivateElements;
        pub type DeidentificationActionSequence = file::DeidentificationActionSequence;
        pub type DeidentificationAction = file::DeidentificationAction;
        pub type PrivateDataElement = file::PrivateDataElement;
        pub type PrivateDataElementValueMultiplicity = file::PrivateDataElementValueMultiplicity;
        pub type PrivateDataElementValueRepresentation =
            file::PrivateDataElementValueRepresentation;
        pub type PrivateDataElementNumberOfItems = file::PrivateDataElementNumberOfItems;
        pub type PrivateDataElementName = file::PrivateDataElementName;
        pub type PrivateDataElementKeyword = file::PrivateDataElementKeyword;
        pub type PrivateDataElementDescription = file::PrivateDataElementDescription;
        pub type PrivateDataElementEncoding = file::PrivateDataElementEncoding;
        pub type PrivateDataElementDefinitionSequence = file::PrivateDataElementDefinitionSequence;
        pub type ScopeOfInventorySequence = file::ScopeOfInventorySequence;
        pub type InventoryPurpose = file::InventoryPurpose;
        pub type InventoryInstanceDescription = file::InventoryInstanceDescription;
        pub type InventoryLevel = file::InventoryLevel;
        pub type ItemInventoryDateTime = file::ItemInventoryDateTime;
        pub type RemovedFromOperationalUse = file::RemovedFromOperationalUse;
        pub type ReasonForRemovalCodeSequence = file::ReasonForRemovalCodeSequence;
        pub type StoredInstanceBaseURI = file::StoredInstanceBaseURI;
        pub type FolderAccessURI = file::FolderAccessURI;
        pub type FileAccessURI = file::FileAccessURI;
        pub type ContainerFileType = file::ContainerFileType;
        pub type FilenameInContainer = file::FilenameInContainer;
        pub type FileOffsetInContainer = file::FileOffsetInContainer;
        pub type FileLengthInContainer = file::FileLengthInContainer;
        pub type StoredInstanceTransferSyntaxUID = file::StoredInstanceTransferSyntaxUID;
        pub type ExtendedMatchingMechanisms = file::ExtendedMatchingMechanisms;
        pub type RangeMatchingSequence = file::RangeMatchingSequence;
        pub type ListOfUIDMatchingSequence = file::ListOfUIDMatchingSequence;
        pub type EmptyValueMatchingSequence = file::EmptyValueMatchingSequence;
        pub type GeneralMatchingSequence = file::GeneralMatchingSequence;
        pub type RequestedStatusInterval = file::RequestedStatusInterval;
        pub type RetainInstances = file::RetainInstances;
        pub type ExpirationDateTime = file::ExpirationDateTime;
        pub type TransactionStatus = file::TransactionStatus;
        pub type TransactionStatusComment = file::TransactionStatusComment;
        pub type FileSetAccessSequence = file::FileSetAccessSequence;
        pub type FileAccessSequence = file::FileAccessSequence;
        pub type RecordKey = file::RecordKey;
        pub type PriorRecordKey = file::PriorRecordKey;
        pub type MetadataSequence = file::MetadataSequence;
        pub type UpdatedMetadataSequence = file::UpdatedMetadataSequence;
        pub type StudyUpdateDateTime = file::StudyUpdateDateTime;
        pub type InventoryAccessEndPointsSequence = file::InventoryAccessEndPointsSequence;
        pub type StudyAccessEndPointsSequence = file::StudyAccessEndPointsSequence;
        pub type IncorporatedInventoryInstanceSequence =
            file::IncorporatedInventoryInstanceSequence;
        pub type InventoriedStudiesSequence = file::InventoriedStudiesSequence;
        pub type InventoriedSeriesSequence = file::InventoriedSeriesSequence;
        pub type InventoriedInstancesSequence = file::InventoriedInstancesSequence;
        pub type InventoryCompletionStatus = file::InventoryCompletionStatus;
        pub type NumberOfStudyRecordsInInstance = file::NumberOfStudyRecordsInInstance;
        pub type TotalNumberOfStudyRecords = file::TotalNumberOfStudyRecords;
        pub type MaximumNumberOfRecords = file::MaximumNumberOfRecords;
        pub type NetworkID = file::NetworkID;
        pub type StationName = file::StationName;
        pub type StudyDescription = file::StudyDescription;
        pub type ProcedureCodeSequence = file::ProcedureCodeSequence;
        pub type SeriesDescription = file::SeriesDescription;
        pub type SeriesDescriptionCodeSequence = file::SeriesDescriptionCodeSequence;
        pub type InstitutionalDepartmentName = file::InstitutionalDepartmentName;
        pub type InstitutionalDepartmentTypeCodeSequence =
            file::InstitutionalDepartmentTypeCodeSequence;
        pub type PhysiciansOfRecord = file::PhysiciansOfRecord;
        pub type PhysiciansOfRecordIdentificationSequence =
            file::PhysiciansOfRecordIdentificationSequence;
        pub type PerformingPhysicianName = file::PerformingPhysicianName;
        pub type PerformingPhysicianIdentificationSequence =
            file::PerformingPhysicianIdentificationSequence;
        pub type NameOfPhysiciansReadingStudy = file::NameOfPhysiciansReadingStudy;
        pub type PhysiciansReadingStudyIdentificationSequence =
            file::PhysiciansReadingStudyIdentificationSequence;
        pub type OperatorsName = file::OperatorsName;
        pub type OperatorIdentificationSequence = file::OperatorIdentificationSequence;
        pub type AdmittingDiagnosesDescription = file::AdmittingDiagnosesDescription;
        pub type AdmittingDiagnosesCodeSequence = file::AdmittingDiagnosesCodeSequence;
        pub type PyramidDescription = file::PyramidDescription;
        pub type ManufacturerModelName = file::ManufacturerModelName;
        pub type ReferencedResultsSequence = file::ReferencedResultsSequence;
        pub type ReferencedStudySequence = file::ReferencedStudySequence;
        pub type ReferencedPerformedProcedureStepSequence =
            file::ReferencedPerformedProcedureStepSequence;
        pub type ReferencedInstancesBySOPClassSequence =
            file::ReferencedInstancesBySOPClassSequence;
        pub type ReferencedSeriesSequence = file::ReferencedSeriesSequence;
        pub type ReferencedPatientSequence = file::ReferencedPatientSequence;
        pub type ReferencedVisitSequence = file::ReferencedVisitSequence;
        pub type ReferencedOverlaySequence = file::ReferencedOverlaySequence;
        pub type ReferencedStereometricInstanceSequence =
            file::ReferencedStereometricInstanceSequence;
        pub type ReferencedWaveformSequence = file::ReferencedWaveformSequence;
        pub type ReferencedImageSequence = file::ReferencedImageSequence;
        pub type ReferencedCurveSequence = file::ReferencedCurveSequence;
        pub type ReferencedInstanceSequence = file::ReferencedInstanceSequence;
        pub type ReferencedRealWorldValueMappingInstanceSequence =
            file::ReferencedRealWorldValueMappingInstanceSequence;
        pub type ReferencedSOPClassUID = file::ReferencedSOPClassUID;
        pub type ReferencedSOPInstanceUID = file::ReferencedSOPInstanceUID;
        pub type DefinitionSourceSequence = file::DefinitionSourceSequence;
        pub type SOPClassesSupported = file::SOPClassesSupported;
        pub type ReferencedFrameNumber = file::ReferencedFrameNumber;
        pub type SimpleFrameList = file::SimpleFrameList;
        pub type CalculatedFrameList = file::CalculatedFrameList;
        pub type TimeRange = file::TimeRange;
        pub type FrameExtractionSequence = file::FrameExtractionSequence;
        pub type MultiFrameSourceSOPInstanceUID = file::MultiFrameSourceSOPInstanceUID;
        pub type RetrieveURL = file::RetrieveURL;
        pub type TransactionUID = file::TransactionUID;
        pub type WarningReason = file::WarningReason;
        pub type FailureReason = file::FailureReason;
        pub type FailedSOPSequence = file::FailedSOPSequence;
        pub type ReferencedSOPSequence = file::ReferencedSOPSequence;
        pub type OtherFailuresSequence = file::OtherFailuresSequence;
        pub type FailedStudySequence = file::FailedStudySequence;
        pub type StudiesContainingOtherReferencedInstancesSequence =
            file::StudiesContainingOtherReferencedInstancesSequence;
        pub type RelatedSeriesSequence = file::RelatedSeriesSequence;
        pub type LossyImageCompressionRetired = file::LossyImageCompressionRetired;
        pub type DerivationDescription = file::DerivationDescription;
        pub type SourceImageSequence = file::SourceImageSequence;
        pub type StageName = file::StageName;
        pub type StageNumber = file::StageNumber;
        pub type NumberOfStages = file::NumberOfStages;
        pub type ViewName = file::ViewName;
        pub type ViewNumber = file::ViewNumber;
        pub type NumberOfEventTimers = file::NumberOfEventTimers;
        pub type NumberOfViewsInStage = file::NumberOfViewsInStage;
        pub type EventElapsedTimes = file::EventElapsedTimes;
        pub type EventTimerNames = file::EventTimerNames;
        pub type EventTimerSequence = file::EventTimerSequence;
        pub type EventTimeOffset = file::EventTimeOffset;
        pub type EventCodeSequence = file::EventCodeSequence;
        pub type StartTrim = file::StartTrim;
        pub type StopTrim = file::StopTrim;
        pub type RecommendedDisplayFrameRate = file::RecommendedDisplayFrameRate;
        pub type TransducerPosition = file::TransducerPosition;
        pub type TransducerOrientation = file::TransducerOrientation;
        pub type AnatomicStructure = file::AnatomicStructure;
        pub type AnatomicRegionSequence = file::AnatomicRegionSequence;
        pub type AnatomicRegionModifierSequence = file::AnatomicRegionModifierSequence;
        pub type PrimaryAnatomicStructureSequence = file::PrimaryAnatomicStructureSequence;
        pub type AnatomicStructureSpaceOrRegionSequence =
            file::AnatomicStructureSpaceOrRegionSequence;
        pub type PrimaryAnatomicStructureModifierSequence =
            file::PrimaryAnatomicStructureModifierSequence;
        pub type TransducerPositionSequence = file::TransducerPositionSequence;
        pub type TransducerPositionModifierSequence = file::TransducerPositionModifierSequence;
        pub type TransducerOrientationSequence = file::TransducerOrientationSequence;
        pub type TransducerOrientationModifierSequence =
            file::TransducerOrientationModifierSequence;
        pub type AnatomicStructureSpaceOrRegionCodeSequenceTrial =
            file::AnatomicStructureSpaceOrRegionCodeSequenceTrial;
        pub type AnatomicPortalOfEntranceCodeSequenceTrial =
            file::AnatomicPortalOfEntranceCodeSequenceTrial;
        pub type AnatomicApproachDirectionCodeSequenceTrial =
            file::AnatomicApproachDirectionCodeSequenceTrial;
        pub type AnatomicPerspectiveDescriptionTrial = file::AnatomicPerspectiveDescriptionTrial;
        pub type AnatomicPerspectiveCodeSequenceTrial = file::AnatomicPerspectiveCodeSequenceTrial;
        pub type AnatomicLocationOfExaminingInstrumentDescriptionTrial =
            file::AnatomicLocationOfExaminingInstrumentDescriptionTrial;
        pub type AnatomicLocationOfExaminingInstrumentCodeSequenceTrial =
            file::AnatomicLocationOfExaminingInstrumentCodeSequenceTrial;
        pub type AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial =
            file::AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial;
        pub type OnAxisBackgroundAnatomicStructureCodeSequenceTrial =
            file::OnAxisBackgroundAnatomicStructureCodeSequenceTrial;
        pub type AlternateRepresentationSequence = file::AlternateRepresentationSequence;
        pub type AvailableTransferSyntaxUID = file::AvailableTransferSyntaxUID;
        pub type IrradiationEventUID = file::IrradiationEventUID;
        pub type SourceIrradiationEventSequence = file::SourceIrradiationEventSequence;
        pub type RadiopharmaceuticalAdministrationEventUID =
            file::RadiopharmaceuticalAdministrationEventUID;
        pub type IdentifyingComments = file::IdentifyingComments;
        pub type FrameType = file::FrameType;
        pub type ReferencedImageEvidenceSequence = file::ReferencedImageEvidenceSequence;
        pub type ReferencedRawDataSequence = file::ReferencedRawDataSequence;
        pub type CreatorVersionUID = file::CreatorVersionUID;
        pub type DerivationImageSequence = file::DerivationImageSequence;
        pub type SourceImageEvidenceSequence = file::SourceImageEvidenceSequence;
        pub type PixelPresentation = file::PixelPresentation;
        pub type VolumetricProperties = file::VolumetricProperties;
        pub type VolumeBasedCalculationTechnique = file::VolumeBasedCalculationTechnique;
        pub type ComplexImageComponent = file::ComplexImageComponent;
        pub type AcquisitionContrast = file::AcquisitionContrast;
        pub type DerivationCodeSequence = file::DerivationCodeSequence;
        pub type ReferencedPresentationStateSequence = file::ReferencedPresentationStateSequence;
        pub type ReferencedOtherPlaneSequence = file::ReferencedOtherPlaneSequence;
        pub type FrameDisplaySequence = file::FrameDisplaySequence;
        pub type RecommendedDisplayFrameRateInFloat = file::RecommendedDisplayFrameRateInFloat;
        pub type SkipFrameRangeFlag = file::SkipFrameRangeFlag;
    }

    pub mod file {
        #[derive(Debug)]
        pub struct LengthToEnd;
        impl std::fmt::Display for LengthToEnd {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LengthToEnd {
            fn name(&self) -> String {
                "Length to End".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0001)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecificCharacterSet;
        impl std::fmt::Display for SpecificCharacterSet {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecificCharacterSet {
            fn name(&self) -> String {
                "Specific Character Set".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct LanguageCodeSequence;
        impl std::fmt::Display for LanguageCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LanguageCodeSequence {
            fn name(&self) -> String {
                "Language Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0006)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageType;
        impl std::fmt::Display for ImageType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageType {
            fn name(&self) -> String {
                "Image Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2-n"
            }
        }

        #[derive(Debug)]
        pub struct RecognitionCode;
        impl std::fmt::Display for RecognitionCode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RecognitionCode {
            fn name(&self) -> String {
                "Recognition Code".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceCreationDate;
        impl std::fmt::Display for InstanceCreationDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceCreationDate {
            fn name(&self) -> String {
                "Instance Creation Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceCreationTime;
        impl std::fmt::Display for InstanceCreationTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceCreationTime {
            fn name(&self) -> String {
                "Instance Creation Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0013)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0013)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceCreatorUID;
        impl std::fmt::Display for InstanceCreatorUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceCreatorUID {
            fn name(&self) -> String {
                "Instance Creator UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0014)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0014)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceCoercionDateTime;
        impl std::fmt::Display for InstanceCoercionDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceCoercionDateTime {
            fn name(&self) -> String {
                "Instance Coercion DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0015)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0015)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SOPClassUID;
        impl std::fmt::Display for SOPClassUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SOPClassUID {
            fn name(&self) -> String {
                "SOP Class UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0016)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0016)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionUID;
        impl std::fmt::Display for AcquisitionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionUID {
            fn name(&self) -> String {
                "Acquisition UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0017)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0017)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SOPInstanceUID;
        impl std::fmt::Display for SOPInstanceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SOPInstanceUID {
            fn name(&self) -> String {
                "SOP Instance UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0018)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0018)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PyramidUID;
        impl std::fmt::Display for PyramidUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PyramidUID {
            fn name(&self) -> String {
                "Pyramid UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0019)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0019)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelatedGeneralSOPClassUID;
        impl std::fmt::Display for RelatedGeneralSOPClassUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelatedGeneralSOPClassUID {
            fn name(&self) -> String {
                "Related General SOP Class UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x001A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x001A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct OriginalSpecializedSOPClassUID;
        impl std::fmt::Display for OriginalSpecializedSOPClassUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OriginalSpecializedSOPClassUID {
            fn name(&self) -> String {
                "Original Specialized SOP Class UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x001B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x001B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SyntheticData;
        impl std::fmt::Display for SyntheticData {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SyntheticData {
            fn name(&self) -> String {
                "Synthetic Data".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x001C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x001C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyDate;
        impl std::fmt::Display for StudyDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyDate {
            fn name(&self) -> String {
                "Study Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesDate;
        impl std::fmt::Display for SeriesDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesDate {
            fn name(&self) -> String {
                "Series Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionDate;
        impl std::fmt::Display for AcquisitionDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionDate {
            fn name(&self) -> String {
                "Acquisition Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0022)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentDate;
        impl std::fmt::Display for ContentDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentDate {
            fn name(&self) -> String {
                "Content Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0023)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OverlayDate;
        impl std::fmt::Display for OverlayDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OverlayDate {
            fn name(&self) -> String {
                "Overlay Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0024)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CurveDate;
        impl std::fmt::Display for CurveDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CurveDate {
            fn name(&self) -> String {
                "Curve Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0025)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0025)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionDateTime;
        impl std::fmt::Display for AcquisitionDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionDateTime {
            fn name(&self) -> String {
                "Acquisition DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x002A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x002A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyTime;
        impl std::fmt::Display for StudyTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyTime {
            fn name(&self) -> String {
                "Study Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesTime;
        impl std::fmt::Display for SeriesTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesTime {
            fn name(&self) -> String {
                "Series Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0031)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0031)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionTime;
        impl std::fmt::Display for AcquisitionTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionTime {
            fn name(&self) -> String {
                "Acquisition Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentTime;
        impl std::fmt::Display for ContentTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentTime {
            fn name(&self) -> String {
                "Content Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OverlayTime;
        impl std::fmt::Display for OverlayTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OverlayTime {
            fn name(&self) -> String {
                "Overlay Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0034)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0034)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CurveTime;
        impl std::fmt::Display for CurveTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CurveTime {
            fn name(&self) -> String {
                "Curve Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0035)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DataSetType;
        impl std::fmt::Display for DataSetType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DataSetType {
            fn name(&self) -> String {
                "Data Set Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0040)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DataSetSubtype;
        impl std::fmt::Display for DataSetSubtype {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DataSetSubtype {
            fn name(&self) -> String {
                "Data Set Subtype".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0041)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NuclearMedicineSeriesType;
        impl std::fmt::Display for NuclearMedicineSeriesType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NuclearMedicineSeriesType {
            fn name(&self) -> String {
                "Nuclear Medicine Series Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0042)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0042)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AccessionNumber;
        impl std::fmt::Display for AccessionNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AccessionNumber {
            fn name(&self) -> String {
                "Accession Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0050)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssuerOfAccessionNumberSequence;
        impl std::fmt::Display for IssuerOfAccessionNumberSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssuerOfAccessionNumberSequence {
            fn name(&self) -> String {
                "Issuer of Accession Number Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0051)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0051)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QueryRetrieveLevel;
        impl std::fmt::Display for QueryRetrieveLevel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QueryRetrieveLevel {
            fn name(&self) -> String {
                "Query/Retrieve Level".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0052)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0052)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QueryRetrieveView;
        impl std::fmt::Display for QueryRetrieveView {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QueryRetrieveView {
            fn name(&self) -> String {
                "Query/Retrieve View".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0053)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0053)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RetrieveAETitle;
        impl std::fmt::Display for RetrieveAETitle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RetrieveAETitle {
            fn name(&self) -> String {
                "Retrieve AE Title".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0054)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0054)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct StationAETitle;
        impl std::fmt::Display for StationAETitle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StationAETitle {
            fn name(&self) -> String {
                "Station AE Title".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0055)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0055)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceAvailability;
        impl std::fmt::Display for InstanceAvailability {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceAvailability {
            fn name(&self) -> String {
                "Instance Availability".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0056)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0056)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FailedSOPInstanceUIDList;
        impl std::fmt::Display for FailedSOPInstanceUIDList {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FailedSOPInstanceUIDList {
            fn name(&self) -> String {
                "Failed SOP Instance UID List".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0058)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0058)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct Modality;
        impl std::fmt::Display for Modality {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Modality {
            fn name(&self) -> String {
                "Modality".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModalitiesInStudy;
        impl std::fmt::Display for ModalitiesInStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModalitiesInStudy {
            fn name(&self) -> String {
                "Modalities in Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0061)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0061)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct SOPClassesInStudy;
        impl std::fmt::Display for SOPClassesInStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SOPClassesInStudy {
            fn name(&self) -> String {
                "SOP Classes in Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0062)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0062)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicRegionsInStudyCodeSequence;
        impl std::fmt::Display for AnatomicRegionsInStudyCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicRegionsInStudyCodeSequence {
            fn name(&self) -> String {
                "Anatomic Regions in Study Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0063)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0063)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConversionType;
        impl std::fmt::Display for ConversionType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConversionType {
            fn name(&self) -> String {
                "Conversion Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0064)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0064)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationIntentType;
        impl std::fmt::Display for PresentationIntentType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationIntentType {
            fn name(&self) -> String {
                "Presentation Intent Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0068)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0068)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Manufacturer;
        impl std::fmt::Display for Manufacturer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Manufacturer {
            fn name(&self) -> String {
                "Manufacturer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0070)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstitutionName;
        impl std::fmt::Display for InstitutionName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstitutionName {
            fn name(&self) -> String {
                "Institution Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0080)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstitutionAddress;
        impl std::fmt::Display for InstitutionAddress {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstitutionAddress {
            fn name(&self) -> String {
                "Institution Address".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0081)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0081)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstitutionCodeSequence;
        impl std::fmt::Display for InstitutionCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstitutionCodeSequence {
            fn name(&self) -> String {
                "Institution Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0082)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0082)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferringPhysicianName;
        impl std::fmt::Display for ReferringPhysicianName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferringPhysicianName {
            fn name(&self) -> String {
                "Referring Physician's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0090)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0090)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferringPhysicianAddress;
        impl std::fmt::Display for ReferringPhysicianAddress {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferringPhysicianAddress {
            fn name(&self) -> String {
                "Referring Physician's Address".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0092)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0092)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferringPhysicianTelephoneNumbers;
        impl std::fmt::Display for ReferringPhysicianTelephoneNumbers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferringPhysicianTelephoneNumbers {
            fn name(&self) -> String {
                "Referring Physician's Telephone Numbers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0094)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0094)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferringPhysicianIdentificationSequence;
        impl std::fmt::Display for ReferringPhysicianIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferringPhysicianIdentificationSequence {
            fn name(&self) -> String {
                "Referring Physician Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0096)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0096)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConsultingPhysicianName;
        impl std::fmt::Display for ConsultingPhysicianName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConsultingPhysicianName {
            fn name(&self) -> String {
                "Consulting Physician's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x009C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x009C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ConsultingPhysicianIdentificationSequence;
        impl std::fmt::Display for ConsultingPhysicianIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConsultingPhysicianIdentificationSequence {
            fn name(&self) -> String {
                "Consulting Physician Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x009D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x009D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodeValue;
        impl std::fmt::Display for CodeValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodeValue {
            fn name(&self) -> String {
                "Code Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0100)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExtendedCodeValue;
        impl std::fmt::Display for ExtendedCodeValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExtendedCodeValue {
            fn name(&self) -> String {
                "Extended Code Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0101)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0101)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeDesignator;
        impl std::fmt::Display for CodingSchemeDesignator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeDesignator {
            fn name(&self) -> String {
                "Coding Scheme Designator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0102)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0102)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeVersion;
        impl std::fmt::Display for CodingSchemeVersion {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeVersion {
            fn name(&self) -> String {
                "Coding Scheme Version".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0103)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0103)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodeMeaning;
        impl std::fmt::Display for CodeMeaning {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodeMeaning {
            fn name(&self) -> String {
                "Code Meaning".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0104)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0104)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MappingResource;
        impl std::fmt::Display for MappingResource {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MappingResource {
            fn name(&self) -> String {
                "Mapping Resource".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0105)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0105)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextGroupVersion;
        impl std::fmt::Display for ContextGroupVersion {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextGroupVersion {
            fn name(&self) -> String {
                "Context Group Version".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0106)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0106)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextGroupLocalVersion;
        impl std::fmt::Display for ContextGroupLocalVersion {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextGroupLocalVersion {
            fn name(&self) -> String {
                "Context Group Local Version".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0107)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0107)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExtendedCodeMeaning;
        impl std::fmt::Display for ExtendedCodeMeaning {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExtendedCodeMeaning {
            fn name(&self) -> String {
                "Extended Code Meaning".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0108)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0108)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeResourcesSequence;
        impl std::fmt::Display for CodingSchemeResourcesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeResourcesSequence {
            fn name(&self) -> String {
                "Coding Scheme Resources Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0109)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0109)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeURLType;
        impl std::fmt::Display for CodingSchemeURLType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeURLType {
            fn name(&self) -> String {
                "Coding Scheme URL Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextGroupExtensionFlag;
        impl std::fmt::Display for ContextGroupExtensionFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextGroupExtensionFlag {
            fn name(&self) -> String {
                "Context Group Extension Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeUID;
        impl std::fmt::Display for CodingSchemeUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeUID {
            fn name(&self) -> String {
                "Coding Scheme UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextGroupExtensionCreatorUID;
        impl std::fmt::Display for ContextGroupExtensionCreatorUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextGroupExtensionCreatorUID {
            fn name(&self) -> String {
                "Context Group Extension Creator UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeURL;
        impl std::fmt::Display for CodingSchemeURL {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeURL {
            fn name(&self) -> String {
                "Coding Scheme URL".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextIdentifier;
        impl std::fmt::Display for ContextIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextIdentifier {
            fn name(&self) -> String {
                "Context Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x010F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x010F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeIdentificationSequence;
        impl std::fmt::Display for CodingSchemeIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeIdentificationSequence {
            fn name(&self) -> String {
                "Coding Scheme Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0110)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeRegistry;
        impl std::fmt::Display for CodingSchemeRegistry {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeRegistry {
            fn name(&self) -> String {
                "Coding Scheme Registry".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0112)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0112)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeExternalID;
        impl std::fmt::Display for CodingSchemeExternalID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeExternalID {
            fn name(&self) -> String {
                "Coding Scheme External ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0114)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0114)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeName;
        impl std::fmt::Display for CodingSchemeName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeName {
            fn name(&self) -> String {
                "Coding Scheme Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0115)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0115)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CodingSchemeResponsibleOrganization;
        impl std::fmt::Display for CodingSchemeResponsibleOrganization {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CodingSchemeResponsibleOrganization {
            fn name(&self) -> String {
                "Coding Scheme Responsible Organization".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0116)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0116)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextUID;
        impl std::fmt::Display for ContextUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextUID {
            fn name(&self) -> String {
                "Context UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0117)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0117)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MappingResourceUID;
        impl std::fmt::Display for MappingResourceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MappingResourceUID {
            fn name(&self) -> String {
                "Mapping Resource UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0118)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0118)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LongCodeValue;
        impl std::fmt::Display for LongCodeValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LongCodeValue {
            fn name(&self) -> String {
                "Long Code Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0119)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UC")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0119)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct URNCodeValue;
        impl std::fmt::Display for URNCodeValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for URNCodeValue {
            fn name(&self) -> String {
                "URN Code Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0120)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0120)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EquivalentCodeSequence;
        impl std::fmt::Display for EquivalentCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EquivalentCodeSequence {
            fn name(&self) -> String {
                "Equivalent Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0121)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0121)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MappingResourceName;
        impl std::fmt::Display for MappingResourceName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MappingResourceName {
            fn name(&self) -> String {
                "Mapping Resource Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0122)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0122)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContextGroupIdentificationSequence;
        impl std::fmt::Display for ContextGroupIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContextGroupIdentificationSequence {
            fn name(&self) -> String {
                "Context Group Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0123)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0123)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MappingResourceIdentificationSequence;
        impl std::fmt::Display for MappingResourceIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MappingResourceIdentificationSequence {
            fn name(&self) -> String {
                "Mapping Resource Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0124)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0124)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TimezoneOffsetFromUTC;
        impl std::fmt::Display for TimezoneOffsetFromUTC {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TimezoneOffsetFromUTC {
            fn name(&self) -> String {
                "Timezone Offset From UTC".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0201)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0201)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ResponsibleGroupCodeSequence;
        impl std::fmt::Display for ResponsibleGroupCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ResponsibleGroupCodeSequence {
            fn name(&self) -> String {
                "Responsible Group Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0220)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0220)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EquipmentModality;
        impl std::fmt::Display for EquipmentModality {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EquipmentModality {
            fn name(&self) -> String {
                "Equipment Modality".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0221)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0221)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ManufacturerRelatedModelGroup;
        impl std::fmt::Display for ManufacturerRelatedModelGroup {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ManufacturerRelatedModelGroup {
            fn name(&self) -> String {
                "Manufacturer's Related Model Group".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0222)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0222)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementCharacteristicsSequence;
        impl std::fmt::Display for PrivateDataElementCharacteristicsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementCharacteristicsSequence {
            fn name(&self) -> String {
                "Private Data Element Characteristics Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0300)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0300)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateGroupReference;
        impl std::fmt::Display for PrivateGroupReference {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateGroupReference {
            fn name(&self) -> String {
                "Private Group Reference".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0301)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0301)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateCreatorReference;
        impl std::fmt::Display for PrivateCreatorReference {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateCreatorReference {
            fn name(&self) -> String {
                "Private Creator Reference".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0302)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0302)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlockIdentifyingInformationStatus;
        impl std::fmt::Display for BlockIdentifyingInformationStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlockIdentifyingInformationStatus {
            fn name(&self) -> String {
                "Block Identifying Information Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0303)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0303)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NonidentifyingPrivateElements;
        impl std::fmt::Display for NonidentifyingPrivateElements {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NonidentifyingPrivateElements {
            fn name(&self) -> String {
                "Nonidentifying Private Elements".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0304)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0304)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct IdentifyingPrivateElements;
        impl std::fmt::Display for IdentifyingPrivateElements {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdentifyingPrivateElements {
            fn name(&self) -> String {
                "Identifying Private Elements".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0306)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0306)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct DeidentificationActionSequence;
        impl std::fmt::Display for DeidentificationActionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeidentificationActionSequence {
            fn name(&self) -> String {
                "Deidentification Action Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0305)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0305)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DeidentificationAction;
        impl std::fmt::Display for DeidentificationAction {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DeidentificationAction {
            fn name(&self) -> String {
                "Deidentification Action".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0307)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0307)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElement;
        impl std::fmt::Display for PrivateDataElement {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElement {
            fn name(&self) -> String {
                "Private Data Element".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0308)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0308)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementValueMultiplicity;
        impl std::fmt::Display for PrivateDataElementValueMultiplicity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementValueMultiplicity {
            fn name(&self) -> String {
                "Private Data Element Value Multiplicity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0309)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0309)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-3"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementValueRepresentation;
        impl std::fmt::Display for PrivateDataElementValueRepresentation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementValueRepresentation {
            fn name(&self) -> String {
                "Private Data Element Value Representation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementNumberOfItems;
        impl std::fmt::Display for PrivateDataElementNumberOfItems {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementNumberOfItems {
            fn name(&self) -> String {
                "Private Data Element Number of Items".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-2"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementName;
        impl std::fmt::Display for PrivateDataElementName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementName {
            fn name(&self) -> String {
                "Private Data Element Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UC")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementKeyword;
        impl std::fmt::Display for PrivateDataElementKeyword {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementKeyword {
            fn name(&self) -> String {
                "Private Data Element Keyword".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UC")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementDescription;
        impl std::fmt::Display for PrivateDataElementDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementDescription {
            fn name(&self) -> String {
                "Private Data Element Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementEncoding;
        impl std::fmt::Display for PrivateDataElementEncoding {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementEncoding {
            fn name(&self) -> String {
                "Private Data Element Encoding".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x030F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x030F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrivateDataElementDefinitionSequence;
        impl std::fmt::Display for PrivateDataElementDefinitionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrivateDataElementDefinitionSequence {
            fn name(&self) -> String {
                "Private Data Element Definition Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0310)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0310)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScopeOfInventorySequence;
        impl std::fmt::Display for ScopeOfInventorySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScopeOfInventorySequence {
            fn name(&self) -> String {
                "Scope of Inventory Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0400)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0400)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoryPurpose;
        impl std::fmt::Display for InventoryPurpose {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoryPurpose {
            fn name(&self) -> String {
                "Inventory Purpose".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0401)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0401)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoryInstanceDescription;
        impl std::fmt::Display for InventoryInstanceDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoryInstanceDescription {
            fn name(&self) -> String {
                "Inventory Instance Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0402)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0402)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoryLevel;
        impl std::fmt::Display for InventoryLevel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoryLevel {
            fn name(&self) -> String {
                "Inventory Level".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0403)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0403)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ItemInventoryDateTime;
        impl std::fmt::Display for ItemInventoryDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ItemInventoryDateTime {
            fn name(&self) -> String {
                "Item Inventory DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0404)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0404)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RemovedFromOperationalUse;
        impl std::fmt::Display for RemovedFromOperationalUse {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RemovedFromOperationalUse {
            fn name(&self) -> String {
                "Removed from Operational Use".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0405)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0405)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForRemovalCodeSequence;
        impl std::fmt::Display for ReasonForRemovalCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForRemovalCodeSequence {
            fn name(&self) -> String {
                "Reason for Removal Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0406)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0406)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StoredInstanceBaseURI;
        impl std::fmt::Display for StoredInstanceBaseURI {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StoredInstanceBaseURI {
            fn name(&self) -> String {
                "Stored Instance Base URI".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0407)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0407)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FolderAccessURI;
        impl std::fmt::Display for FolderAccessURI {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FolderAccessURI {
            fn name(&self) -> String {
                "Folder Access URI".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0408)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0408)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FileAccessURI;
        impl std::fmt::Display for FileAccessURI {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FileAccessURI {
            fn name(&self) -> String {
                "File Access URI".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0409)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0409)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerFileType;
        impl std::fmt::Display for ContainerFileType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerFileType {
            fn name(&self) -> String {
                "Container File Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FilenameInContainer;
        impl std::fmt::Display for FilenameInContainer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FilenameInContainer {
            fn name(&self) -> String {
                "Filename in Container".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FileOffsetInContainer;
        impl std::fmt::Display for FileOffsetInContainer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FileOffsetInContainer {
            fn name(&self) -> String {
                "File Offset in Container".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UV")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FileLengthInContainer;
        impl std::fmt::Display for FileLengthInContainer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FileLengthInContainer {
            fn name(&self) -> String {
                "File Length in Container".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UV")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StoredInstanceTransferSyntaxUID;
        impl std::fmt::Display for StoredInstanceTransferSyntaxUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StoredInstanceTransferSyntaxUID {
            fn name(&self) -> String {
                "Stored Instance Transfer Syntax UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExtendedMatchingMechanisms;
        impl std::fmt::Display for ExtendedMatchingMechanisms {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExtendedMatchingMechanisms {
            fn name(&self) -> String {
                "Extended Matching Mechanisms".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x040F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x040F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct RangeMatchingSequence;
        impl std::fmt::Display for RangeMatchingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RangeMatchingSequence {
            fn name(&self) -> String {
                "Range Matching Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0410)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0410)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ListOfUIDMatchingSequence;
        impl std::fmt::Display for ListOfUIDMatchingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ListOfUIDMatchingSequence {
            fn name(&self) -> String {
                "List of UID Matching Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0411)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0411)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EmptyValueMatchingSequence;
        impl std::fmt::Display for EmptyValueMatchingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EmptyValueMatchingSequence {
            fn name(&self) -> String {
                "Empty Value Matching Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0412)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0412)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneralMatchingSequence;
        impl std::fmt::Display for GeneralMatchingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneralMatchingSequence {
            fn name(&self) -> String {
                "General Matching Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0413)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0413)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedStatusInterval;
        impl std::fmt::Display for RequestedStatusInterval {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedStatusInterval {
            fn name(&self) -> String {
                "Requested Status Interval".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0414)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0414)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RetainInstances;
        impl std::fmt::Display for RetainInstances {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RetainInstances {
            fn name(&self) -> String {
                "Retain Instances".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0415)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0415)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExpirationDateTime;
        impl std::fmt::Display for ExpirationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExpirationDateTime {
            fn name(&self) -> String {
                "Expiration DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0416)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0416)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransactionStatus;
        impl std::fmt::Display for TransactionStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransactionStatus {
            fn name(&self) -> String {
                "Transaction Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0417)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0417)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransactionStatusComment;
        impl std::fmt::Display for TransactionStatusComment {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransactionStatusComment {
            fn name(&self) -> String {
                "Transaction Status Comment".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0418)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0418)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FileSetAccessSequence;
        impl std::fmt::Display for FileSetAccessSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FileSetAccessSequence {
            fn name(&self) -> String {
                "File Set Access Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0419)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0419)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FileAccessSequence;
        impl std::fmt::Display for FileAccessSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FileAccessSequence {
            fn name(&self) -> String {
                "File Access Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RecordKey;
        impl std::fmt::Display for RecordKey {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RecordKey {
            fn name(&self) -> String {
                "Record Key".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PriorRecordKey;
        impl std::fmt::Display for PriorRecordKey {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PriorRecordKey {
            fn name(&self) -> String {
                "Prior Record Key".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MetadataSequence;
        impl std::fmt::Display for MetadataSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MetadataSequence {
            fn name(&self) -> String {
                "Metadata Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UpdatedMetadataSequence;
        impl std::fmt::Display for UpdatedMetadataSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UpdatedMetadataSequence {
            fn name(&self) -> String {
                "Updated Metadata Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyUpdateDateTime;
        impl std::fmt::Display for StudyUpdateDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyUpdateDateTime {
            fn name(&self) -> String {
                "Study Update DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x041F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x041F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoryAccessEndPointsSequence;
        impl std::fmt::Display for InventoryAccessEndPointsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoryAccessEndPointsSequence {
            fn name(&self) -> String {
                "Inventory Access End Points Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0420)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0420)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyAccessEndPointsSequence;
        impl std::fmt::Display for StudyAccessEndPointsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyAccessEndPointsSequence {
            fn name(&self) -> String {
                "Study Access End Points Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0421)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0421)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IncorporatedInventoryInstanceSequence;
        impl std::fmt::Display for IncorporatedInventoryInstanceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IncorporatedInventoryInstanceSequence {
            fn name(&self) -> String {
                "Incorporated Inventory Instance Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0422)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0422)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoriedStudiesSequence;
        impl std::fmt::Display for InventoriedStudiesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoriedStudiesSequence {
            fn name(&self) -> String {
                "Inventoried Studies Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0423)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0423)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoriedSeriesSequence;
        impl std::fmt::Display for InventoriedSeriesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoriedSeriesSequence {
            fn name(&self) -> String {
                "Inventoried Series Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0424)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0424)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoriedInstancesSequence;
        impl std::fmt::Display for InventoriedInstancesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoriedInstancesSequence {
            fn name(&self) -> String {
                "Inventoried Instances Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0425)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0425)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InventoryCompletionStatus;
        impl std::fmt::Display for InventoryCompletionStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InventoryCompletionStatus {
            fn name(&self) -> String {
                "Inventory Completion Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0426)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0426)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfStudyRecordsInInstance;
        impl std::fmt::Display for NumberOfStudyRecordsInInstance {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfStudyRecordsInInstance {
            fn name(&self) -> String {
                "Number of Study Records in Instance".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0427)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0427)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TotalNumberOfStudyRecords;
        impl std::fmt::Display for TotalNumberOfStudyRecords {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TotalNumberOfStudyRecords {
            fn name(&self) -> String {
                "Total Number of Study Records".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0428)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UV")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0428)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MaximumNumberOfRecords;
        impl std::fmt::Display for MaximumNumberOfRecords {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MaximumNumberOfRecords {
            fn name(&self) -> String {
                "Maximum Number of Records".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x0429)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UV")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x0429)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NetworkID;
        impl std::fmt::Display for NetworkID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NetworkID {
            fn name(&self) -> String {
                "Network ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StationName;
        impl std::fmt::Display for StationName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StationName {
            fn name(&self) -> String {
                "Station Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyDescription;
        impl std::fmt::Display for StudyDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyDescription {
            fn name(&self) -> String {
                "Study Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProcedureCodeSequence;
        impl std::fmt::Display for ProcedureCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProcedureCodeSequence {
            fn name(&self) -> String {
                "Procedure Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesDescription;
        impl std::fmt::Display for SeriesDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesDescription {
            fn name(&self) -> String {
                "Series Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x103E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x103E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesDescriptionCodeSequence;
        impl std::fmt::Display for SeriesDescriptionCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesDescriptionCodeSequence {
            fn name(&self) -> String {
                "Series Description Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x103F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x103F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstitutionalDepartmentName;
        impl std::fmt::Display for InstitutionalDepartmentName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstitutionalDepartmentName {
            fn name(&self) -> String {
                "Institutional Department Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstitutionalDepartmentTypeCodeSequence;
        impl std::fmt::Display for InstitutionalDepartmentTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstitutionalDepartmentTypeCodeSequence {
            fn name(&self) -> String {
                "Institutional Department Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1041)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PhysiciansOfRecord;
        impl std::fmt::Display for PhysiciansOfRecord {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PhysiciansOfRecord {
            fn name(&self) -> String {
                "Physician(s) of Record".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1048)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1048)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PhysiciansOfRecordIdentificationSequence;
        impl std::fmt::Display for PhysiciansOfRecordIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PhysiciansOfRecordIdentificationSequence {
            fn name(&self) -> String {
                "Physician(s) of Record Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1049)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1049)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformingPhysicianName;
        impl std::fmt::Display for PerformingPhysicianName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformingPhysicianName {
            fn name(&self) -> String {
                "Performing Physician's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1050)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PerformingPhysicianIdentificationSequence;
        impl std::fmt::Display for PerformingPhysicianIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformingPhysicianIdentificationSequence {
            fn name(&self) -> String {
                "Performing Physician Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1052)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1052)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NameOfPhysiciansReadingStudy;
        impl std::fmt::Display for NameOfPhysiciansReadingStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NameOfPhysiciansReadingStudy {
            fn name(&self) -> String {
                "Name of Physician(s) Reading Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PhysiciansReadingStudyIdentificationSequence;
        impl std::fmt::Display for PhysiciansReadingStudyIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PhysiciansReadingStudyIdentificationSequence {
            fn name(&self) -> String {
                "Physician(s) Reading Study Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1062)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1062)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OperatorsName;
        impl std::fmt::Display for OperatorsName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OperatorsName {
            fn name(&self) -> String {
                "Operators' Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1070)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct OperatorIdentificationSequence;
        impl std::fmt::Display for OperatorIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OperatorIdentificationSequence {
            fn name(&self) -> String {
                "Operator Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1072)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1072)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AdmittingDiagnosesDescription;
        impl std::fmt::Display for AdmittingDiagnosesDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AdmittingDiagnosesDescription {
            fn name(&self) -> String {
                "Admitting Diagnoses Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1080)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct AdmittingDiagnosesCodeSequence;
        impl std::fmt::Display for AdmittingDiagnosesCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AdmittingDiagnosesCodeSequence {
            fn name(&self) -> String {
                "Admitting Diagnoses Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1084)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1084)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PyramidDescription;
        impl std::fmt::Display for PyramidDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PyramidDescription {
            fn name(&self) -> String {
                "Pyramid Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1088)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1088)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ManufacturerModelName;
        impl std::fmt::Display for ManufacturerModelName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ManufacturerModelName {
            fn name(&self) -> String {
                "Manufacturer's Model Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1090)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1090)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedResultsSequence;
        impl std::fmt::Display for ReferencedResultsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedResultsSequence {
            fn name(&self) -> String {
                "Referenced Results Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1100)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedStudySequence;
        impl std::fmt::Display for ReferencedStudySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedStudySequence {
            fn name(&self) -> String {
                "Referenced Study Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1110)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedPerformedProcedureStepSequence;
        impl std::fmt::Display for ReferencedPerformedProcedureStepSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedPerformedProcedureStepSequence {
            fn name(&self) -> String {
                "Referenced Performed Procedure Step Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1111)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1111)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedInstancesBySOPClassSequence;
        impl std::fmt::Display for ReferencedInstancesBySOPClassSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedInstancesBySOPClassSequence {
            fn name(&self) -> String {
                "Referenced Instances by SOP Class Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1112)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1112)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSeriesSequence;
        impl std::fmt::Display for ReferencedSeriesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSeriesSequence {
            fn name(&self) -> String {
                "Referenced Series Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1115)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1115)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedPatientSequence;
        impl std::fmt::Display for ReferencedPatientSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedPatientSequence {
            fn name(&self) -> String {
                "Referenced Patient Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1120)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1120)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedVisitSequence;
        impl std::fmt::Display for ReferencedVisitSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedVisitSequence {
            fn name(&self) -> String {
                "Referenced Visit Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1125)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1125)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedOverlaySequence;
        impl std::fmt::Display for ReferencedOverlaySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedOverlaySequence {
            fn name(&self) -> String {
                "Referenced Overlay Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1130)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1130)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedStereometricInstanceSequence;
        impl std::fmt::Display for ReferencedStereometricInstanceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedStereometricInstanceSequence {
            fn name(&self) -> String {
                "Referenced Stereometric Instance Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1134)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1134)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedWaveformSequence;
        impl std::fmt::Display for ReferencedWaveformSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedWaveformSequence {
            fn name(&self) -> String {
                "Referenced Waveform Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x113A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x113A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedImageSequence;
        impl std::fmt::Display for ReferencedImageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedImageSequence {
            fn name(&self) -> String {
                "Referenced Image Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1140)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1140)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedCurveSequence;
        impl std::fmt::Display for ReferencedCurveSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedCurveSequence {
            fn name(&self) -> String {
                "Referenced Curve Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1145)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1145)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedInstanceSequence;
        impl std::fmt::Display for ReferencedInstanceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedInstanceSequence {
            fn name(&self) -> String {
                "Referenced Instance Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x114A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x114A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedRealWorldValueMappingInstanceSequence;
        impl std::fmt::Display for ReferencedRealWorldValueMappingInstanceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedRealWorldValueMappingInstanceSequence {
            fn name(&self) -> String {
                "Referenced Real World Value Mapping Instance Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x114B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x114B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSOPClassUID;
        impl std::fmt::Display for ReferencedSOPClassUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSOPClassUID {
            fn name(&self) -> String {
                "Referenced SOP Class UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1150)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1150)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSOPInstanceUID;
        impl std::fmt::Display for ReferencedSOPInstanceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSOPInstanceUID {
            fn name(&self) -> String {
                "Referenced SOP Instance UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1155)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1155)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DefinitionSourceSequence;
        impl std::fmt::Display for DefinitionSourceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DefinitionSourceSequence {
            fn name(&self) -> String {
                "Definition Source Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1156)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1156)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SOPClassesSupported;
        impl std::fmt::Display for SOPClassesSupported {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SOPClassesSupported {
            fn name(&self) -> String {
                "SOP Classes Supported".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x115A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x115A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedFrameNumber;
        impl std::fmt::Display for ReferencedFrameNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedFrameNumber {
            fn name(&self) -> String {
                "Referenced Frame Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1160)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1160)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct SimpleFrameList;
        impl std::fmt::Display for SimpleFrameList {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SimpleFrameList {
            fn name(&self) -> String {
                "Simple Frame List".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1161)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1161)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct CalculatedFrameList;
        impl std::fmt::Display for CalculatedFrameList {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CalculatedFrameList {
            fn name(&self) -> String {
                "Calculated Frame List".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1162)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1162)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3-3n"
            }
        }

        #[derive(Debug)]
        pub struct TimeRange;
        impl std::fmt::Display for TimeRange {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TimeRange {
            fn name(&self) -> String {
                "Time Range".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1163)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1163)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct FrameExtractionSequence;
        impl std::fmt::Display for FrameExtractionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameExtractionSequence {
            fn name(&self) -> String {
                "Frame Extraction Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1164)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1164)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MultiFrameSourceSOPInstanceUID;
        impl std::fmt::Display for MultiFrameSourceSOPInstanceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MultiFrameSourceSOPInstanceUID {
            fn name(&self) -> String {
                "Multi-frame Source SOP Instance UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1167)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1167)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RetrieveURL;
        impl std::fmt::Display for RetrieveURL {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RetrieveURL {
            fn name(&self) -> String {
                "Retrieve URL".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1190)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1190)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransactionUID;
        impl std::fmt::Display for TransactionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransactionUID {
            fn name(&self) -> String {
                "Transaction UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1195)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1195)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WarningReason;
        impl std::fmt::Display for WarningReason {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WarningReason {
            fn name(&self) -> String {
                "Warning Reason".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1196)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1196)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FailureReason;
        impl std::fmt::Display for FailureReason {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FailureReason {
            fn name(&self) -> String {
                "Failure Reason".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1197)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1197)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FailedSOPSequence;
        impl std::fmt::Display for FailedSOPSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FailedSOPSequence {
            fn name(&self) -> String {
                "Failed SOP Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1198)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1198)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSOPSequence;
        impl std::fmt::Display for ReferencedSOPSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSOPSequence {
            fn name(&self) -> String {
                "Referenced SOP Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1199)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1199)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OtherFailuresSequence;
        impl std::fmt::Display for OtherFailuresSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OtherFailuresSequence {
            fn name(&self) -> String {
                "Other Failures Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x119A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x119A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FailedStudySequence;
        impl std::fmt::Display for FailedStudySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FailedStudySequence {
            fn name(&self) -> String {
                "Failed Study Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x119B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x119B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudiesContainingOtherReferencedInstancesSequence;
        impl std::fmt::Display for StudiesContainingOtherReferencedInstancesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudiesContainingOtherReferencedInstancesSequence {
            fn name(&self) -> String {
                "Studies Containing Other Referenced Instances Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1200)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1200)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelatedSeriesSequence;
        impl std::fmt::Display for RelatedSeriesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelatedSeriesSequence {
            fn name(&self) -> String {
                "Related Series Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x1250)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x1250)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LossyImageCompressionRetired;
        impl std::fmt::Display for LossyImageCompressionRetired {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LossyImageCompressionRetired {
            fn name(&self) -> String {
                "Lossy Image Compression (Retired)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2110)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DerivationDescription;
        impl std::fmt::Display for DerivationDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DerivationDescription {
            fn name(&self) -> String {
                "Derivation Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2111)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2111)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SourceImageSequence;
        impl std::fmt::Display for SourceImageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SourceImageSequence {
            fn name(&self) -> String {
                "Source Image Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2112)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2112)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StageName;
        impl std::fmt::Display for StageName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StageName {
            fn name(&self) -> String {
                "Stage Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2120)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2120)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StageNumber;
        impl std::fmt::Display for StageNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StageNumber {
            fn name(&self) -> String {
                "Stage Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2122)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2122)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfStages;
        impl std::fmt::Display for NumberOfStages {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfStages {
            fn name(&self) -> String {
                "Number of Stages".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2124)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2124)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ViewName;
        impl std::fmt::Display for ViewName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ViewName {
            fn name(&self) -> String {
                "View Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2127)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2127)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ViewNumber;
        impl std::fmt::Display for ViewNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ViewNumber {
            fn name(&self) -> String {
                "View Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2128)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2128)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfEventTimers;
        impl std::fmt::Display for NumberOfEventTimers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfEventTimers {
            fn name(&self) -> String {
                "Number of Event Timers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2129)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2129)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfViewsInStage;
        impl std::fmt::Display for NumberOfViewsInStage {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfViewsInStage {
            fn name(&self) -> String {
                "Number of Views in Stage".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x212A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x212A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EventElapsedTimes;
        impl std::fmt::Display for EventElapsedTimes {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EventElapsedTimes {
            fn name(&self) -> String {
                "Event Elapsed Time(s)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2130)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2130)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct EventTimerNames;
        impl std::fmt::Display for EventTimerNames {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EventTimerNames {
            fn name(&self) -> String {
                "Event Timer Name(s)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2132)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2132)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct EventTimerSequence;
        impl std::fmt::Display for EventTimerSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EventTimerSequence {
            fn name(&self) -> String {
                "Event Timer Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2133)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2133)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EventTimeOffset;
        impl std::fmt::Display for EventTimeOffset {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EventTimeOffset {
            fn name(&self) -> String {
                "Event Time Offset".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2134)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2134)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EventCodeSequence;
        impl std::fmt::Display for EventCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EventCodeSequence {
            fn name(&self) -> String {
                "Event Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2135)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2135)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StartTrim;
        impl std::fmt::Display for StartTrim {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StartTrim {
            fn name(&self) -> String {
                "Start Trim".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2142)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2142)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StopTrim;
        impl std::fmt::Display for StopTrim {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StopTrim {
            fn name(&self) -> String {
                "Stop Trim".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2143)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2143)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RecommendedDisplayFrameRate;
        impl std::fmt::Display for RecommendedDisplayFrameRate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RecommendedDisplayFrameRate {
            fn name(&self) -> String {
                "Recommended Display Frame Rate".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2144)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2144)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerPosition;
        impl std::fmt::Display for TransducerPosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerPosition {
            fn name(&self) -> String {
                "Transducer Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2200)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2200)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerOrientation;
        impl std::fmt::Display for TransducerOrientation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerOrientation {
            fn name(&self) -> String {
                "Transducer Orientation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2204)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2204)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicStructure;
        impl std::fmt::Display for AnatomicStructure {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicStructure {
            fn name(&self) -> String {
                "Anatomic Structure".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2208)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2208)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicRegionSequence;
        impl std::fmt::Display for AnatomicRegionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicRegionSequence {
            fn name(&self) -> String {
                "Anatomic Region Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2218)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2218)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicRegionModifierSequence;
        impl std::fmt::Display for AnatomicRegionModifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicRegionModifierSequence {
            fn name(&self) -> String {
                "Anatomic Region Modifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2220)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2220)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrimaryAnatomicStructureSequence;
        impl std::fmt::Display for PrimaryAnatomicStructureSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrimaryAnatomicStructureSequence {
            fn name(&self) -> String {
                "Primary Anatomic Structure Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2228)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2228)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicStructureSpaceOrRegionSequence;
        impl std::fmt::Display for AnatomicStructureSpaceOrRegionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicStructureSpaceOrRegionSequence {
            fn name(&self) -> String {
                "Anatomic Structure, Space or Region Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2229)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2229)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PrimaryAnatomicStructureModifierSequence;
        impl std::fmt::Display for PrimaryAnatomicStructureModifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PrimaryAnatomicStructureModifierSequence {
            fn name(&self) -> String {
                "Primary Anatomic Structure Modifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2230)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2230)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerPositionSequence;
        impl std::fmt::Display for TransducerPositionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerPositionSequence {
            fn name(&self) -> String {
                "Transducer Position Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2240)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2240)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerPositionModifierSequence;
        impl std::fmt::Display for TransducerPositionModifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerPositionModifierSequence {
            fn name(&self) -> String {
                "Transducer Position Modifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2242)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2242)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerOrientationSequence;
        impl std::fmt::Display for TransducerOrientationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerOrientationSequence {
            fn name(&self) -> String {
                "Transducer Orientation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2244)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2244)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TransducerOrientationModifierSequence;
        impl std::fmt::Display for TransducerOrientationModifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TransducerOrientationModifierSequence {
            fn name(&self) -> String {
                "Transducer Orientation Modifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2246)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2246)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicStructureSpaceOrRegionCodeSequenceTrial;
        impl std::fmt::Display for AnatomicStructureSpaceOrRegionCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicStructureSpaceOrRegionCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Structure Space Or Region Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2251)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2251)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicPortalOfEntranceCodeSequenceTrial;
        impl std::fmt::Display for AnatomicPortalOfEntranceCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicPortalOfEntranceCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Portal Of Entrance Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2253)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2253)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicApproachDirectionCodeSequenceTrial;
        impl std::fmt::Display for AnatomicApproachDirectionCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicApproachDirectionCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Approach Direction Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2255)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2255)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicPerspectiveDescriptionTrial;
        impl std::fmt::Display for AnatomicPerspectiveDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicPerspectiveDescriptionTrial {
            fn name(&self) -> String {
                "Anatomic Perspective Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2256)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2256)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicPerspectiveCodeSequenceTrial;
        impl std::fmt::Display for AnatomicPerspectiveCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicPerspectiveCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Perspective Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2257)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2257)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicLocationOfExaminingInstrumentDescriptionTrial;
        impl std::fmt::Display for AnatomicLocationOfExaminingInstrumentDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicLocationOfExaminingInstrumentDescriptionTrial {
            fn name(&self) -> String {
                "Anatomic Location Of Examining Instrument Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2258)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2258)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicLocationOfExaminingInstrumentCodeSequenceTrial;
        impl std::fmt::Display for AnatomicLocationOfExaminingInstrumentCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicLocationOfExaminingInstrumentCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Location Of Examining Instrument Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x2259)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x2259)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial;
        impl std::fmt::Display for AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Anatomic Structure Space Or Region Modifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x225A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x225A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OnAxisBackgroundAnatomicStructureCodeSequenceTrial;
        impl std::fmt::Display for OnAxisBackgroundAnatomicStructureCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OnAxisBackgroundAnatomicStructureCodeSequenceTrial {
            fn name(&self) -> String {
                "On Axis Background Anatomic Structure Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x225C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x225C)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AlternateRepresentationSequence;
        impl std::fmt::Display for AlternateRepresentationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AlternateRepresentationSequence {
            fn name(&self) -> String {
                "Alternate Representation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x3001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x3001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AvailableTransferSyntaxUID;
        impl std::fmt::Display for AvailableTransferSyntaxUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AvailableTransferSyntaxUID {
            fn name(&self) -> String {
                "Available Transfer Syntax UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x3002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x3002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct IrradiationEventUID;
        impl std::fmt::Display for IrradiationEventUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IrradiationEventUID {
            fn name(&self) -> String {
                "Irradiation Event UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x3010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x3010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct SourceIrradiationEventSequence;
        impl std::fmt::Display for SourceIrradiationEventSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SourceIrradiationEventSequence {
            fn name(&self) -> String {
                "Source Irradiation Event Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x3011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x3011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RadiopharmaceuticalAdministrationEventUID;
        impl std::fmt::Display for RadiopharmaceuticalAdministrationEventUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RadiopharmaceuticalAdministrationEventUID {
            fn name(&self) -> String {
                "Radiopharmaceutical Administration Event UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x3012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x3012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IdentifyingComments;
        impl std::fmt::Display for IdentifyingComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdentifyingComments {
            fn name(&self) -> String {
                "Identifying Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x4000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x4000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameType;
        impl std::fmt::Display for FrameType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameType {
            fn name(&self) -> String {
                "Frame Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9007)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "4-5"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedImageEvidenceSequence;
        impl std::fmt::Display for ReferencedImageEvidenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedImageEvidenceSequence {
            fn name(&self) -> String {
                "Referenced Image Evidence Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9092)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9092)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedRawDataSequence;
        impl std::fmt::Display for ReferencedRawDataSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedRawDataSequence {
            fn name(&self) -> String {
                "Referenced Raw Data Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9121)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9121)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CreatorVersionUID;
        impl std::fmt::Display for CreatorVersionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CreatorVersionUID {
            fn name(&self) -> String {
                "Creator-Version UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9123)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9123)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DerivationImageSequence;
        impl std::fmt::Display for DerivationImageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DerivationImageSequence {
            fn name(&self) -> String {
                "Derivation Image Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9124)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9124)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SourceImageEvidenceSequence;
        impl std::fmt::Display for SourceImageEvidenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SourceImageEvidenceSequence {
            fn name(&self) -> String {
                "Source Image Evidence Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9154)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9154)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PixelPresentation;
        impl std::fmt::Display for PixelPresentation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PixelPresentation {
            fn name(&self) -> String {
                "Pixel Presentation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9205)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9205)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricProperties;
        impl std::fmt::Display for VolumetricProperties {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricProperties {
            fn name(&self) -> String {
                "Volumetric Properties".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9206)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9206)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumeBasedCalculationTechnique;
        impl std::fmt::Display for VolumeBasedCalculationTechnique {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeBasedCalculationTechnique {
            fn name(&self) -> String {
                "Volume Based Calculation Technique".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9207)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9207)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ComplexImageComponent;
        impl std::fmt::Display for ComplexImageComponent {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ComplexImageComponent {
            fn name(&self) -> String {
                "Complex Image Component".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9208)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9208)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionContrast;
        impl std::fmt::Display for AcquisitionContrast {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionContrast {
            fn name(&self) -> String {
                "Acquisition Contrast".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9209)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9209)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DerivationCodeSequence;
        impl std::fmt::Display for DerivationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DerivationCodeSequence {
            fn name(&self) -> String {
                "Derivation Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9215)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9215)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedPresentationStateSequence;
        impl std::fmt::Display for ReferencedPresentationStateSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedPresentationStateSequence {
            fn name(&self) -> String {
                "Referenced Presentation State Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9237)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9237)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedOtherPlaneSequence;
        impl std::fmt::Display for ReferencedOtherPlaneSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedOtherPlaneSequence {
            fn name(&self) -> String {
                "Referenced Other Plane Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9410)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9410)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameDisplaySequence;
        impl std::fmt::Display for FrameDisplaySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameDisplaySequence {
            fn name(&self) -> String {
                "Frame Display Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9458)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9458)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RecommendedDisplayFrameRateInFloat;
        impl std::fmt::Display for RecommendedDisplayFrameRateInFloat {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RecommendedDisplayFrameRateInFloat {
            fn name(&self) -> String {
                "Recommended Display Frame Rate in Float".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9459)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9459)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SkipFrameRangeFlag;
        impl std::fmt::Display for SkipFrameRangeFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SkipFrameRangeFlag {
            fn name(&self) -> String {
                "Skip Frame Range Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0008, 0x9460)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0008
            }
            fn element(&self) -> Option<u16> {
                Some(0x9460)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct FrameOfReference;
    impl std::fmt::Display for FrameOfReference {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for FrameOfReference {
        fn name(&self) -> String {
            "FrameOfReference".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0032, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0032
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl FrameOfReference {
        pub type StudyStatusID = frameofreference::StudyStatusID;
        pub type StudyPriorityID = frameofreference::StudyPriorityID;
        pub type StudyIDIssuer = frameofreference::StudyIDIssuer;
        pub type StudyVerifiedDate = frameofreference::StudyVerifiedDate;
        pub type StudyVerifiedTime = frameofreference::StudyVerifiedTime;
        pub type StudyReadDate = frameofreference::StudyReadDate;
        pub type StudyReadTime = frameofreference::StudyReadTime;
        pub type ScheduledStudyStartDate = frameofreference::ScheduledStudyStartDate;
        pub type ScheduledStudyStartTime = frameofreference::ScheduledStudyStartTime;
        pub type ScheduledStudyStopDate = frameofreference::ScheduledStudyStopDate;
        pub type ScheduledStudyStopTime = frameofreference::ScheduledStudyStopTime;
        pub type ScheduledStudyLocation = frameofreference::ScheduledStudyLocation;
        pub type ScheduledStudyLocationAETitle = frameofreference::ScheduledStudyLocationAETitle;
        pub type ReasonForStudy = frameofreference::ReasonForStudy;
        pub type RequestingPhysicianIdentificationSequence =
            frameofreference::RequestingPhysicianIdentificationSequence;
        pub type RequestingPhysician = frameofreference::RequestingPhysician;
        pub type RequestingService = frameofreference::RequestingService;
        pub type RequestingServiceCodeSequence = frameofreference::RequestingServiceCodeSequence;
        pub type StudyArrivalDate = frameofreference::StudyArrivalDate;
        pub type StudyArrivalTime = frameofreference::StudyArrivalTime;
        pub type StudyCompletionDate = frameofreference::StudyCompletionDate;
        pub type StudyCompletionTime = frameofreference::StudyCompletionTime;
        pub type StudyComponentStatusID = frameofreference::StudyComponentStatusID;
        pub type RequestedProcedureDescription = frameofreference::RequestedProcedureDescription;
        pub type RequestedProcedureCodeSequence = frameofreference::RequestedProcedureCodeSequence;
        pub type RequestedLateralityCodeSequence =
            frameofreference::RequestedLateralityCodeSequence;
        pub type ReasonForVisit = frameofreference::ReasonForVisit;
        pub type ReasonForVisitCodeSequence = frameofreference::ReasonForVisitCodeSequence;
        pub type RequestedContrastAgent = frameofreference::RequestedContrastAgent;
        pub type StudyComments = frameofreference::StudyComments;
    }

    pub mod frameofreference {
        #[derive(Debug)]
        pub struct StudyStatusID;
        impl std::fmt::Display for StudyStatusID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyStatusID {
            fn name(&self) -> String {
                "Study Status ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x000A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x000A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyPriorityID;
        impl std::fmt::Display for StudyPriorityID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyPriorityID {
            fn name(&self) -> String {
                "Study Priority ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x000C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x000C)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyIDIssuer;
        impl std::fmt::Display for StudyIDIssuer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyIDIssuer {
            fn name(&self) -> String {
                "Study ID Issuer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyVerifiedDate;
        impl std::fmt::Display for StudyVerifiedDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyVerifiedDate {
            fn name(&self) -> String {
                "Study Verified Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x0032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x0032)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyVerifiedTime;
        impl std::fmt::Display for StudyVerifiedTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyVerifiedTime {
            fn name(&self) -> String {
                "Study Verified Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x0033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x0033)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyReadDate;
        impl std::fmt::Display for StudyReadDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyReadDate {
            fn name(&self) -> String {
                "Study Read Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x0034)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x0034)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyReadTime;
        impl std::fmt::Display for StudyReadTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyReadTime {
            fn name(&self) -> String {
                "Study Read Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x0035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x0035)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyStartDate;
        impl std::fmt::Display for ScheduledStudyStartDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyStartDate {
            fn name(&self) -> String {
                "Scheduled Study Start Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyStartTime;
        impl std::fmt::Display for ScheduledStudyStartTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyStartTime {
            fn name(&self) -> String {
                "Scheduled Study Start Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1001)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyStopDate;
        impl std::fmt::Display for ScheduledStudyStopDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyStopDate {
            fn name(&self) -> String {
                "Scheduled Study Stop Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1010)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyStopTime;
        impl std::fmt::Display for ScheduledStudyStopTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyStopTime {
            fn name(&self) -> String {
                "Scheduled Study Stop Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1011)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyLocation;
        impl std::fmt::Display for ScheduledStudyLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyLocation {
            fn name(&self) -> String {
                "Scheduled Study Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1020)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStudyLocationAETitle;
        impl std::fmt::Display for ScheduledStudyLocationAETitle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStudyLocationAETitle {
            fn name(&self) -> String {
                "Scheduled Study Location AE Title".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1021)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForStudy;
        impl std::fmt::Display for ReasonForStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForStudy {
            fn name(&self) -> String {
                "Reason for Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1030)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestingPhysicianIdentificationSequence;
        impl std::fmt::Display for RequestingPhysicianIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestingPhysicianIdentificationSequence {
            fn name(&self) -> String {
                "Requesting Physician Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1031)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1031)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestingPhysician;
        impl std::fmt::Display for RequestingPhysician {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestingPhysician {
            fn name(&self) -> String {
                "Requesting Physician".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestingService;
        impl std::fmt::Display for RequestingService {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestingService {
            fn name(&self) -> String {
                "Requesting Service".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestingServiceCodeSequence;
        impl std::fmt::Display for RequestingServiceCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestingServiceCodeSequence {
            fn name(&self) -> String {
                "Requesting Service Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1034)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1034)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyArrivalDate;
        impl std::fmt::Display for StudyArrivalDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyArrivalDate {
            fn name(&self) -> String {
                "Study Arrival Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1040)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyArrivalTime;
        impl std::fmt::Display for StudyArrivalTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyArrivalTime {
            fn name(&self) -> String {
                "Study Arrival Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1041)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyCompletionDate;
        impl std::fmt::Display for StudyCompletionDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyCompletionDate {
            fn name(&self) -> String {
                "Study Completion Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1050)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyCompletionTime;
        impl std::fmt::Display for StudyCompletionTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyCompletionTime {
            fn name(&self) -> String {
                "Study Completion Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1051)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1051)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyComponentStatusID;
        impl std::fmt::Display for StudyComponentStatusID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyComponentStatusID {
            fn name(&self) -> String {
                "Study Component Status ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1055)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1055)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureDescription;
        impl std::fmt::Display for RequestedProcedureDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureDescription {
            fn name(&self) -> String {
                "Requested Procedure Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureCodeSequence;
        impl std::fmt::Display for RequestedProcedureCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureCodeSequence {
            fn name(&self) -> String {
                "Requested Procedure Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1064)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1064)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedLateralityCodeSequence;
        impl std::fmt::Display for RequestedLateralityCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedLateralityCodeSequence {
            fn name(&self) -> String {
                "Requested Laterality Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1065)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1065)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForVisit;
        impl std::fmt::Display for ReasonForVisit {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForVisit {
            fn name(&self) -> String {
                "Reason for Visit".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1066)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1066)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForVisitCodeSequence;
        impl std::fmt::Display for ReasonForVisitCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForVisitCodeSequence {
            fn name(&self) -> String {
                "Reason for Visit Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1067)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1067)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedContrastAgent;
        impl std::fmt::Display for RequestedContrastAgent {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedContrastAgent {
            fn name(&self) -> String {
                "Requested Contrast Agent".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x1070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x1070)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyComments;
        impl std::fmt::Display for StudyComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyComments {
            fn name(&self) -> String {
                "Study Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0032, 0x4000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0032
            }
            fn element(&self) -> Option<u16> {
                Some(0x4000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct Study;
    impl std::fmt::Display for Study {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for Study {
        fn name(&self) -> String {
            "Study".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0020, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0020
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl Study {
        pub type StudyInstanceUID = study::StudyInstanceUID;
        pub type SeriesInstanceUID = study::SeriesInstanceUID;
        pub type StudyID = study::StudyID;
        pub type SeriesNumber = study::SeriesNumber;
        pub type AcquisitionNumber = study::AcquisitionNumber;
        pub type InstanceNumber = study::InstanceNumber;
        pub type IsotopeNumber = study::IsotopeNumber;
        pub type PhaseNumber = study::PhaseNumber;
        pub type IntervalNumber = study::IntervalNumber;
        pub type TimeSlotNumber = study::TimeSlotNumber;
        pub type AngleNumber = study::AngleNumber;
        pub type ItemNumber = study::ItemNumber;
        pub type PatientOrientation = study::PatientOrientation;
        pub type OverlayNumber = study::OverlayNumber;
        pub type CurveNumber = study::CurveNumber;
        pub type LUTNumber = study::LUTNumber;
        pub type PyramidLabel = study::PyramidLabel;
        pub type ImagePosition = study::ImagePosition;
        pub type ImagePositionPatient = study::ImagePositionPatient;
        pub type ImageOrientation = study::ImageOrientation;
        pub type ImageOrientationPatient = study::ImageOrientationPatient;
        pub type Location = study::Location;
        pub type FrameOfReferenceUID = study::FrameOfReferenceUID;
        pub type Laterality = study::Laterality;
        pub type ImageLaterality = study::ImageLaterality;
        pub type ImageGeometryType = study::ImageGeometryType;
        pub type MaskingImage = study::MaskingImage;
        pub type ReportNumber = study::ReportNumber;
        pub type TemporalPositionIdentifier = study::TemporalPositionIdentifier;
        pub type NumberOfTemporalPositions = study::NumberOfTemporalPositions;
        pub type TemporalResolution = study::TemporalResolution;
        pub type SynchronizationFrameOfReferenceUID = study::SynchronizationFrameOfReferenceUID;
        pub type SOPInstanceUIDOfConcatenationSource = study::SOPInstanceUIDOfConcatenationSource;
        pub type SeriesInStudy = study::SeriesInStudy;
        pub type AcquisitionsInSeries = study::AcquisitionsInSeries;
        pub type ImagesInAcquisition = study::ImagesInAcquisition;
        pub type ImagesInSeries = study::ImagesInSeries;
        pub type AcquisitionsInStudy = study::AcquisitionsInStudy;
        pub type ImagesInStudy = study::ImagesInStudy;
        pub type Reference = study::Reference;
        pub type TargetPositionReferenceIndicator = study::TargetPositionReferenceIndicator;
        pub type PositionReferenceIndicator = study::PositionReferenceIndicator;
        pub type SliceLocation = study::SliceLocation;
        pub type OtherStudyNumbers = study::OtherStudyNumbers;
        pub type NumberOfPatientRelatedStudies = study::NumberOfPatientRelatedStudies;
        pub type NumberOfPatientRelatedSeries = study::NumberOfPatientRelatedSeries;
        pub type NumberOfPatientRelatedInstances = study::NumberOfPatientRelatedInstances;
        pub type NumberOfStudyRelatedSeries = study::NumberOfStudyRelatedSeries;
        pub type NumberOfStudyRelatedInstances = study::NumberOfStudyRelatedInstances;
        pub type NumberOfSeriesRelatedInstances = study::NumberOfSeriesRelatedInstances;
        pub type ModifyingDeviceID = study::ModifyingDeviceID;
        pub type ModifiedImageID = study::ModifiedImageID;
        pub type ModifiedImageDate = study::ModifiedImageDate;
        pub type ModifyingDeviceManufacturer = study::ModifyingDeviceManufacturer;
        pub type ModifiedImageTime = study::ModifiedImageTime;
        pub type ModifiedImageDescription = study::ModifiedImageDescription;
        pub type ImageComments = study::ImageComments;
        pub type OriginalImageIdentification = study::OriginalImageIdentification;
        pub type OriginalImageIdentificationNomenclature =
            study::OriginalImageIdentificationNomenclature;
        pub type StackID = study::StackID;
        pub type InStackPositionNumber = study::InStackPositionNumber;
        pub type FrameAnatomySequence = study::FrameAnatomySequence;
        pub type FrameLaterality = study::FrameLaterality;
        pub type FrameContentSequence = study::FrameContentSequence;
        pub type PlanePositionSequence = study::PlanePositionSequence;
        pub type PlaneOrientationSequence = study::PlaneOrientationSequence;
        pub type TemporalPositionIndex = study::TemporalPositionIndex;
        pub type NominalCardiacTriggerDelayTime = study::NominalCardiacTriggerDelayTime;
        pub type NominalCardiacTriggerTimePriorToRPeak =
            study::NominalCardiacTriggerTimePriorToRPeak;
        pub type ActualCardiacTriggerTimePriorToRPeak = study::ActualCardiacTriggerTimePriorToRPeak;
        pub type FrameAcquisitionNumber = study::FrameAcquisitionNumber;
        pub type DimensionIndexValues = study::DimensionIndexValues;
        pub type FrameComments = study::FrameComments;
        pub type ConcatenationUID = study::ConcatenationUID;
        pub type InConcatenationNumber = study::InConcatenationNumber;
        pub type InConcatenationTotalNumber = study::InConcatenationTotalNumber;
        pub type DimensionOrganizationUID = study::DimensionOrganizationUID;
        pub type DimensionIndexPointer = study::DimensionIndexPointer;
        pub type FunctionalGroupPointer = study::FunctionalGroupPointer;
        pub type UnassignedSharedConvertedAttributesSequence =
            study::UnassignedSharedConvertedAttributesSequence;
        pub type UnassignedPerFrameConvertedAttributesSequence =
            study::UnassignedPerFrameConvertedAttributesSequence;
        pub type ConversionSourceAttributesSequence = study::ConversionSourceAttributesSequence;
        pub type DimensionIndexPrivateCreator = study::DimensionIndexPrivateCreator;
        pub type DimensionOrganizationSequence = study::DimensionOrganizationSequence;
        pub type DimensionIndexSequence = study::DimensionIndexSequence;
        pub type ConcatenationFrameOffsetNumber = study::ConcatenationFrameOffsetNumber;
        pub type FunctionalGroupPrivateCreator = study::FunctionalGroupPrivateCreator;
        pub type NominalPercentageOfCardiacPhase = study::NominalPercentageOfCardiacPhase;
        pub type NominalPercentageOfRespiratoryPhase = study::NominalPercentageOfRespiratoryPhase;
        pub type StartingRespiratoryAmplitude = study::StartingRespiratoryAmplitude;
        pub type StartingRespiratoryPhase = study::StartingRespiratoryPhase;
        pub type EndingRespiratoryAmplitude = study::EndingRespiratoryAmplitude;
        pub type EndingRespiratoryPhase = study::EndingRespiratoryPhase;
        pub type RespiratoryTriggerType = study::RespiratoryTriggerType;
        pub type RRIntervalTimeNominal = study::RRIntervalTimeNominal;
        pub type ActualCardiacTriggerDelayTime = study::ActualCardiacTriggerDelayTime;
        pub type RespiratorySynchronizationSequence = study::RespiratorySynchronizationSequence;
        pub type RespiratoryIntervalTime = study::RespiratoryIntervalTime;
        pub type NominalRespiratoryTriggerDelayTime = study::NominalRespiratoryTriggerDelayTime;
        pub type RespiratoryTriggerDelayThreshold = study::RespiratoryTriggerDelayThreshold;
        pub type ActualRespiratoryTriggerDelayTime = study::ActualRespiratoryTriggerDelayTime;
        pub type ImagePositionVolume = study::ImagePositionVolume;
        pub type ImageOrientationVolume = study::ImageOrientationVolume;
        pub type UltrasoundAcquisitionGeometry = study::UltrasoundAcquisitionGeometry;
        pub type ApexPosition = study::ApexPosition;
        pub type VolumeToTransducerMappingMatrix = study::VolumeToTransducerMappingMatrix;
        pub type VolumeToTableMappingMatrix = study::VolumeToTableMappingMatrix;
        pub type VolumeToTransducerRelationship = study::VolumeToTransducerRelationship;
        pub type PatientFrameOfReferenceSource = study::PatientFrameOfReferenceSource;
        pub type TemporalPositionTimeOffset = study::TemporalPositionTimeOffset;
        pub type PlanePositionVolumeSequence = study::PlanePositionVolumeSequence;
        pub type PlaneOrientationVolumeSequence = study::PlaneOrientationVolumeSequence;
        pub type TemporalPositionSequence = study::TemporalPositionSequence;
        pub type DimensionOrganizationType = study::DimensionOrganizationType;
        pub type VolumeFrameOfReferenceUID = study::VolumeFrameOfReferenceUID;
        pub type TableFrameOfReferenceUID = study::TableFrameOfReferenceUID;
        pub type DimensionDescriptionLabel = study::DimensionDescriptionLabel;
        pub type PatientOrientationInFrameSequence = study::PatientOrientationInFrameSequence;
        pub type FrameLabel = study::FrameLabel;
        pub type AcquisitionIndex = study::AcquisitionIndex;
        pub type ContributingSOPInstancesReferenceSequence =
            study::ContributingSOPInstancesReferenceSequence;
        pub type ReconstructionIndex = study::ReconstructionIndex;
    }

    pub mod study {
        #[derive(Debug)]
        pub struct StudyInstanceUID;
        impl std::fmt::Display for StudyInstanceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyInstanceUID {
            fn name(&self) -> String {
                "Study Instance UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x000D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x000D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesInstanceUID;
        impl std::fmt::Display for SeriesInstanceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesInstanceUID {
            fn name(&self) -> String {
                "Series Instance UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x000E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x000E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StudyID;
        impl std::fmt::Display for StudyID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StudyID {
            fn name(&self) -> String {
                "Study ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesNumber;
        impl std::fmt::Display for SeriesNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesNumber {
            fn name(&self) -> String {
                "Series Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionNumber;
        impl std::fmt::Display for AcquisitionNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionNumber {
            fn name(&self) -> String {
                "Acquisition Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InstanceNumber;
        impl std::fmt::Display for InstanceNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InstanceNumber {
            fn name(&self) -> String {
                "Instance Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0013)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0013)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IsotopeNumber;
        impl std::fmt::Display for IsotopeNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IsotopeNumber {
            fn name(&self) -> String {
                "Isotope Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0014)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0014)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PhaseNumber;
        impl std::fmt::Display for PhaseNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PhaseNumber {
            fn name(&self) -> String {
                "Phase Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0015)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0015)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IntervalNumber;
        impl std::fmt::Display for IntervalNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IntervalNumber {
            fn name(&self) -> String {
                "Interval Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0016)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0016)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TimeSlotNumber;
        impl std::fmt::Display for TimeSlotNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TimeSlotNumber {
            fn name(&self) -> String {
                "Time Slot Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0017)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0017)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AngleNumber;
        impl std::fmt::Display for AngleNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AngleNumber {
            fn name(&self) -> String {
                "Angle Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0018)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0018)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ItemNumber;
        impl std::fmt::Display for ItemNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ItemNumber {
            fn name(&self) -> String {
                "Item Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0019)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0019)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientOrientation;
        impl std::fmt::Display for PatientOrientation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientOrientation {
            fn name(&self) -> String {
                "Patient Orientation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct OverlayNumber;
        impl std::fmt::Display for OverlayNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OverlayNumber {
            fn name(&self) -> String {
                "Overlay Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0022)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CurveNumber;
        impl std::fmt::Display for CurveNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CurveNumber {
            fn name(&self) -> String {
                "Curve Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0024)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LUTNumber;
        impl std::fmt::Display for LUTNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LUTNumber {
            fn name(&self) -> String {
                "LUT Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0026)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0026)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PyramidLabel;
        impl std::fmt::Display for PyramidLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PyramidLabel {
            fn name(&self) -> String {
                "Pyramid Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0027)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0027)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagePosition;
        impl std::fmt::Display for ImagePosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagePosition {
            fn name(&self) -> String {
                "Image Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0030)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct ImagePositionPatient;
        impl std::fmt::Display for ImagePositionPatient {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagePositionPatient {
            fn name(&self) -> String {
                "Image Position (Patient)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct ImageOrientation;
        impl std::fmt::Display for ImageOrientation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageOrientation {
            fn name(&self) -> String {
                "Image Orientation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0035)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "6"
            }
        }

        #[derive(Debug)]
        pub struct ImageOrientationPatient;
        impl std::fmt::Display for ImageOrientationPatient {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageOrientationPatient {
            fn name(&self) -> String {
                "Image Orientation (Patient)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0037)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0037)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "6"
            }
        }

        #[derive(Debug)]
        pub struct Location;
        impl std::fmt::Display for Location {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Location {
            fn name(&self) -> String {
                "Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0050)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameOfReferenceUID;
        impl std::fmt::Display for FrameOfReferenceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameOfReferenceUID {
            fn name(&self) -> String {
                "Frame of Reference UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0052)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0052)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Laterality;
        impl std::fmt::Display for Laterality {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Laterality {
            fn name(&self) -> String {
                "Laterality".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageLaterality;
        impl std::fmt::Display for ImageLaterality {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageLaterality {
            fn name(&self) -> String {
                "Image Laterality".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0062)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0062)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageGeometryType;
        impl std::fmt::Display for ImageGeometryType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageGeometryType {
            fn name(&self) -> String {
                "Image Geometry Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0070)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MaskingImage;
        impl std::fmt::Display for MaskingImage {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MaskingImage {
            fn name(&self) -> String {
                "Masking Image".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0080)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReportNumber;
        impl std::fmt::Display for ReportNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReportNumber {
            fn name(&self) -> String {
                "Report Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x00AA)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x00AA)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemporalPositionIdentifier;
        impl std::fmt::Display for TemporalPositionIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalPositionIdentifier {
            fn name(&self) -> String {
                "Temporal Position Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0100)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfTemporalPositions;
        impl std::fmt::Display for NumberOfTemporalPositions {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfTemporalPositions {
            fn name(&self) -> String {
                "Number of Temporal Positions".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0105)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0105)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemporalResolution;
        impl std::fmt::Display for TemporalResolution {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalResolution {
            fn name(&self) -> String {
                "Temporal Resolution".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0110)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SynchronizationFrameOfReferenceUID;
        impl std::fmt::Display for SynchronizationFrameOfReferenceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SynchronizationFrameOfReferenceUID {
            fn name(&self) -> String {
                "Synchronization Frame of Reference UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0200)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0200)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SOPInstanceUIDOfConcatenationSource;
        impl std::fmt::Display for SOPInstanceUIDOfConcatenationSource {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SOPInstanceUIDOfConcatenationSource {
            fn name(&self) -> String {
                "SOP Instance UID of Concatenation Source".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x0242)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x0242)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SeriesInStudy;
        impl std::fmt::Display for SeriesInStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SeriesInStudy {
            fn name(&self) -> String {
                "Series in Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionsInSeries;
        impl std::fmt::Display for AcquisitionsInSeries {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionsInSeries {
            fn name(&self) -> String {
                "Acquisitions in Series".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1001)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagesInAcquisition;
        impl std::fmt::Display for ImagesInAcquisition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagesInAcquisition {
            fn name(&self) -> String {
                "Images in Acquisition".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagesInSeries;
        impl std::fmt::Display for ImagesInSeries {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagesInSeries {
            fn name(&self) -> String {
                "Images in Series".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1003)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1003)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionsInStudy;
        impl std::fmt::Display for AcquisitionsInStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionsInStudy {
            fn name(&self) -> String {
                "Acquisitions in Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1004)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagesInStudy;
        impl std::fmt::Display for ImagesInStudy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagesInStudy {
            fn name(&self) -> String {
                "Images in Study".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1005)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Reference;
        impl std::fmt::Display for Reference {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Reference {
            fn name(&self) -> String {
                "Reference".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1020)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct TargetPositionReferenceIndicator;
        impl std::fmt::Display for TargetPositionReferenceIndicator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TargetPositionReferenceIndicator {
            fn name(&self) -> String {
                "Target Position Reference Indicator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x103F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x103F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PositionReferenceIndicator;
        impl std::fmt::Display for PositionReferenceIndicator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PositionReferenceIndicator {
            fn name(&self) -> String {
                "Position Reference Indicator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SliceLocation;
        impl std::fmt::Display for SliceLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SliceLocation {
            fn name(&self) -> String {
                "Slice Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1041)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OtherStudyNumbers;
        impl std::fmt::Display for OtherStudyNumbers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OtherStudyNumbers {
            fn name(&self) -> String {
                "Other Study Numbers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1070)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfPatientRelatedStudies;
        impl std::fmt::Display for NumberOfPatientRelatedStudies {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfPatientRelatedStudies {
            fn name(&self) -> String {
                "Number of Patient Related Studies".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1200)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1200)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfPatientRelatedSeries;
        impl std::fmt::Display for NumberOfPatientRelatedSeries {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfPatientRelatedSeries {
            fn name(&self) -> String {
                "Number of Patient Related Series".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1202)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1202)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfPatientRelatedInstances;
        impl std::fmt::Display for NumberOfPatientRelatedInstances {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfPatientRelatedInstances {
            fn name(&self) -> String {
                "Number of Patient Related Instances".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1204)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1204)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfStudyRelatedSeries;
        impl std::fmt::Display for NumberOfStudyRelatedSeries {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfStudyRelatedSeries {
            fn name(&self) -> String {
                "Number of Study Related Series".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1206)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1206)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfStudyRelatedInstances;
        impl std::fmt::Display for NumberOfStudyRelatedInstances {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfStudyRelatedInstances {
            fn name(&self) -> String {
                "Number of Study Related Instances".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1208)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1208)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfSeriesRelatedInstances;
        impl std::fmt::Display for NumberOfSeriesRelatedInstances {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfSeriesRelatedInstances {
            fn name(&self) -> String {
                "Number of Series Related Instances".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x1209)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x1209)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifyingDeviceID;
        impl std::fmt::Display for ModifyingDeviceID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifyingDeviceID {
            fn name(&self) -> String {
                "Modifying Device ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3401)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3401)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifiedImageID;
        impl std::fmt::Display for ModifiedImageID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifiedImageID {
            fn name(&self) -> String {
                "Modified Image ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3402)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3402)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifiedImageDate;
        impl std::fmt::Display for ModifiedImageDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifiedImageDate {
            fn name(&self) -> String {
                "Modified Image Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3403)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3403)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifyingDeviceManufacturer;
        impl std::fmt::Display for ModifyingDeviceManufacturer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifyingDeviceManufacturer {
            fn name(&self) -> String {
                "Modifying Device Manufacturer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3404)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3404)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifiedImageTime;
        impl std::fmt::Display for ModifiedImageTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifiedImageTime {
            fn name(&self) -> String {
                "Modified Image Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3405)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3405)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifiedImageDescription;
        impl std::fmt::Display for ModifiedImageDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifiedImageDescription {
            fn name(&self) -> String {
                "Modified Image Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x3406)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x3406)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageComments;
        impl std::fmt::Display for ImageComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageComments {
            fn name(&self) -> String {
                "Image Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x4000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x4000)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OriginalImageIdentification;
        impl std::fmt::Display for OriginalImageIdentification {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OriginalImageIdentification {
            fn name(&self) -> String {
                "Original Image Identification".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x5000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AT")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x5000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct OriginalImageIdentificationNomenclature;
        impl std::fmt::Display for OriginalImageIdentificationNomenclature {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OriginalImageIdentificationNomenclature {
            fn name(&self) -> String {
                "Original Image Identification Nomenclature".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x5002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x5002)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct StackID;
        impl std::fmt::Display for StackID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StackID {
            fn name(&self) -> String {
                "Stack ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9056)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9056)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InStackPositionNumber;
        impl std::fmt::Display for InStackPositionNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InStackPositionNumber {
            fn name(&self) -> String {
                "In-Stack Position Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9057)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9057)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameAnatomySequence;
        impl std::fmt::Display for FrameAnatomySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameAnatomySequence {
            fn name(&self) -> String {
                "Frame Anatomy Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9071)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9071)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameLaterality;
        impl std::fmt::Display for FrameLaterality {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameLaterality {
            fn name(&self) -> String {
                "Frame Laterality".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9072)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9072)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameContentSequence;
        impl std::fmt::Display for FrameContentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameContentSequence {
            fn name(&self) -> String {
                "Frame Content Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9111)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9111)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlanePositionSequence;
        impl std::fmt::Display for PlanePositionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlanePositionSequence {
            fn name(&self) -> String {
                "Plane Position Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9113)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9113)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlaneOrientationSequence;
        impl std::fmt::Display for PlaneOrientationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlaneOrientationSequence {
            fn name(&self) -> String {
                "Plane Orientation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9116)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9116)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemporalPositionIndex;
        impl std::fmt::Display for TemporalPositionIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalPositionIndex {
            fn name(&self) -> String {
                "Temporal Position Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9128)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9128)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NominalCardiacTriggerDelayTime;
        impl std::fmt::Display for NominalCardiacTriggerDelayTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NominalCardiacTriggerDelayTime {
            fn name(&self) -> String {
                "Nominal Cardiac Trigger Delay Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9153)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9153)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NominalCardiacTriggerTimePriorToRPeak;
        impl std::fmt::Display for NominalCardiacTriggerTimePriorToRPeak {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NominalCardiacTriggerTimePriorToRPeak {
            fn name(&self) -> String {
                "Nominal Cardiac Trigger Time Prior To R-Peak".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9154)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9154)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ActualCardiacTriggerTimePriorToRPeak;
        impl std::fmt::Display for ActualCardiacTriggerTimePriorToRPeak {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ActualCardiacTriggerTimePriorToRPeak {
            fn name(&self) -> String {
                "Actual Cardiac Trigger Time Prior To R-Peak".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9155)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9155)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameAcquisitionNumber;
        impl std::fmt::Display for FrameAcquisitionNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameAcquisitionNumber {
            fn name(&self) -> String {
                "Frame Acquisition Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9156)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9156)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionIndexValues;
        impl std::fmt::Display for DimensionIndexValues {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionIndexValues {
            fn name(&self) -> String {
                "Dimension Index Values".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9157)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9157)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct FrameComments;
        impl std::fmt::Display for FrameComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameComments {
            fn name(&self) -> String {
                "Frame Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9158)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9158)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConcatenationUID;
        impl std::fmt::Display for ConcatenationUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConcatenationUID {
            fn name(&self) -> String {
                "Concatenation UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9161)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9161)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InConcatenationNumber;
        impl std::fmt::Display for InConcatenationNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InConcatenationNumber {
            fn name(&self) -> String {
                "In-concatenation Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9162)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9162)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InConcatenationTotalNumber;
        impl std::fmt::Display for InConcatenationTotalNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InConcatenationTotalNumber {
            fn name(&self) -> String {
                "In-concatenation Total Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9163)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9163)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionOrganizationUID;
        impl std::fmt::Display for DimensionOrganizationUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionOrganizationUID {
            fn name(&self) -> String {
                "Dimension Organization UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9164)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9164)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionIndexPointer;
        impl std::fmt::Display for DimensionIndexPointer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionIndexPointer {
            fn name(&self) -> String {
                "Dimension Index Pointer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9165)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AT")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9165)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FunctionalGroupPointer;
        impl std::fmt::Display for FunctionalGroupPointer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FunctionalGroupPointer {
            fn name(&self) -> String {
                "Functional Group Pointer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9167)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AT")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9167)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UnassignedSharedConvertedAttributesSequence;
        impl std::fmt::Display for UnassignedSharedConvertedAttributesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UnassignedSharedConvertedAttributesSequence {
            fn name(&self) -> String {
                "Unassigned Shared Converted Attributes Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9170)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9170)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UnassignedPerFrameConvertedAttributesSequence;
        impl std::fmt::Display for UnassignedPerFrameConvertedAttributesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UnassignedPerFrameConvertedAttributesSequence {
            fn name(&self) -> String {
                "Unassigned Per-Frame Converted Attributes Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9171)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9171)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConversionSourceAttributesSequence;
        impl std::fmt::Display for ConversionSourceAttributesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConversionSourceAttributesSequence {
            fn name(&self) -> String {
                "Conversion Source Attributes Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9172)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9172)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionIndexPrivateCreator;
        impl std::fmt::Display for DimensionIndexPrivateCreator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionIndexPrivateCreator {
            fn name(&self) -> String {
                "Dimension Index Private Creator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9213)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9213)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionOrganizationSequence;
        impl std::fmt::Display for DimensionOrganizationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionOrganizationSequence {
            fn name(&self) -> String {
                "Dimension Organization Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9221)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9221)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionIndexSequence;
        impl std::fmt::Display for DimensionIndexSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionIndexSequence {
            fn name(&self) -> String {
                "Dimension Index Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9222)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9222)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConcatenationFrameOffsetNumber;
        impl std::fmt::Display for ConcatenationFrameOffsetNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConcatenationFrameOffsetNumber {
            fn name(&self) -> String {
                "Concatenation Frame Offset Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9228)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9228)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FunctionalGroupPrivateCreator;
        impl std::fmt::Display for FunctionalGroupPrivateCreator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FunctionalGroupPrivateCreator {
            fn name(&self) -> String {
                "Functional Group Private Creator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9238)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9238)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NominalPercentageOfCardiacPhase;
        impl std::fmt::Display for NominalPercentageOfCardiacPhase {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NominalPercentageOfCardiacPhase {
            fn name(&self) -> String {
                "Nominal Percentage of Cardiac Phase".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9241)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9241)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NominalPercentageOfRespiratoryPhase;
        impl std::fmt::Display for NominalPercentageOfRespiratoryPhase {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NominalPercentageOfRespiratoryPhase {
            fn name(&self) -> String {
                "Nominal Percentage of Respiratory Phase".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9245)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9245)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StartingRespiratoryAmplitude;
        impl std::fmt::Display for StartingRespiratoryAmplitude {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StartingRespiratoryAmplitude {
            fn name(&self) -> String {
                "Starting Respiratory Amplitude".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9246)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9246)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StartingRespiratoryPhase;
        impl std::fmt::Display for StartingRespiratoryPhase {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StartingRespiratoryPhase {
            fn name(&self) -> String {
                "Starting Respiratory Phase".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9247)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9247)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EndingRespiratoryAmplitude;
        impl std::fmt::Display for EndingRespiratoryAmplitude {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EndingRespiratoryAmplitude {
            fn name(&self) -> String {
                "Ending Respiratory Amplitude".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9248)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9248)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EndingRespiratoryPhase;
        impl std::fmt::Display for EndingRespiratoryPhase {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EndingRespiratoryPhase {
            fn name(&self) -> String {
                "Ending Respiratory Phase".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9249)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9249)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RespiratoryTriggerType;
        impl std::fmt::Display for RespiratoryTriggerType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RespiratoryTriggerType {
            fn name(&self) -> String {
                "Respiratory Trigger Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9250)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9250)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RRIntervalTimeNominal;
        impl std::fmt::Display for RRIntervalTimeNominal {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RRIntervalTimeNominal {
            fn name(&self) -> String {
                "R-R Interval Time Nominal".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9251)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9251)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ActualCardiacTriggerDelayTime;
        impl std::fmt::Display for ActualCardiacTriggerDelayTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ActualCardiacTriggerDelayTime {
            fn name(&self) -> String {
                "Actual Cardiac Trigger Delay Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9252)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9252)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RespiratorySynchronizationSequence;
        impl std::fmt::Display for RespiratorySynchronizationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RespiratorySynchronizationSequence {
            fn name(&self) -> String {
                "Respiratory Synchronization Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9253)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9253)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RespiratoryIntervalTime;
        impl std::fmt::Display for RespiratoryIntervalTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RespiratoryIntervalTime {
            fn name(&self) -> String {
                "Respiratory Interval Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9254)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9254)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NominalRespiratoryTriggerDelayTime;
        impl std::fmt::Display for NominalRespiratoryTriggerDelayTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NominalRespiratoryTriggerDelayTime {
            fn name(&self) -> String {
                "Nominal Respiratory Trigger Delay Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9255)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9255)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RespiratoryTriggerDelayThreshold;
        impl std::fmt::Display for RespiratoryTriggerDelayThreshold {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RespiratoryTriggerDelayThreshold {
            fn name(&self) -> String {
                "Respiratory Trigger Delay Threshold".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9256)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9256)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ActualRespiratoryTriggerDelayTime;
        impl std::fmt::Display for ActualRespiratoryTriggerDelayTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ActualRespiratoryTriggerDelayTime {
            fn name(&self) -> String {
                "Actual Respiratory Trigger Delay Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9257)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9257)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagePositionVolume;
        impl std::fmt::Display for ImagePositionVolume {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagePositionVolume {
            fn name(&self) -> String {
                "Image Position (Volume)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9301)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9301)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct ImageOrientationVolume;
        impl std::fmt::Display for ImageOrientationVolume {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageOrientationVolume {
            fn name(&self) -> String {
                "Image Orientation (Volume)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9302)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9302)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "6"
            }
        }

        #[derive(Debug)]
        pub struct UltrasoundAcquisitionGeometry;
        impl std::fmt::Display for UltrasoundAcquisitionGeometry {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UltrasoundAcquisitionGeometry {
            fn name(&self) -> String {
                "Ultrasound Acquisition Geometry".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9307)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9307)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ApexPosition;
        impl std::fmt::Display for ApexPosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ApexPosition {
            fn name(&self) -> String {
                "Apex Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9308)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9308)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct VolumeToTransducerMappingMatrix;
        impl std::fmt::Display for VolumeToTransducerMappingMatrix {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeToTransducerMappingMatrix {
            fn name(&self) -> String {
                "Volume to Transducer Mapping Matrix".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9309)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9309)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "16"
            }
        }

        #[derive(Debug)]
        pub struct VolumeToTableMappingMatrix;
        impl std::fmt::Display for VolumeToTableMappingMatrix {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeToTableMappingMatrix {
            fn name(&self) -> String {
                "Volume to Table Mapping Matrix".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "16"
            }
        }

        #[derive(Debug)]
        pub struct VolumeToTransducerRelationship;
        impl std::fmt::Display for VolumeToTransducerRelationship {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeToTransducerRelationship {
            fn name(&self) -> String {
                "Volume to Transducer Relationship".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientFrameOfReferenceSource;
        impl std::fmt::Display for PatientFrameOfReferenceSource {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientFrameOfReferenceSource {
            fn name(&self) -> String {
                "Patient Frame of Reference Source".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemporalPositionTimeOffset;
        impl std::fmt::Display for TemporalPositionTimeOffset {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalPositionTimeOffset {
            fn name(&self) -> String {
                "Temporal Position Time Offset".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlanePositionVolumeSequence;
        impl std::fmt::Display for PlanePositionVolumeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlanePositionVolumeSequence {
            fn name(&self) -> String {
                "Plane Position (Volume) Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlaneOrientationVolumeSequence;
        impl std::fmt::Display for PlaneOrientationVolumeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlaneOrientationVolumeSequence {
            fn name(&self) -> String {
                "Plane Orientation (Volume) Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x930F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x930F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemporalPositionSequence;
        impl std::fmt::Display for TemporalPositionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalPositionSequence {
            fn name(&self) -> String {
                "Temporal Position Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9310)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9310)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionOrganizationType;
        impl std::fmt::Display for DimensionOrganizationType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionOrganizationType {
            fn name(&self) -> String {
                "Dimension Organization Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9311)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9311)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumeFrameOfReferenceUID;
        impl std::fmt::Display for VolumeFrameOfReferenceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeFrameOfReferenceUID {
            fn name(&self) -> String {
                "Volume Frame of Reference UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9312)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9312)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TableFrameOfReferenceUID;
        impl std::fmt::Display for TableFrameOfReferenceUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TableFrameOfReferenceUID {
            fn name(&self) -> String {
                "Table Frame of Reference UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9313)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9313)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DimensionDescriptionLabel;
        impl std::fmt::Display for DimensionDescriptionLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DimensionDescriptionLabel {
            fn name(&self) -> String {
                "Dimension Description Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9421)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9421)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientOrientationInFrameSequence;
        impl std::fmt::Display for PatientOrientationInFrameSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientOrientationInFrameSequence {
            fn name(&self) -> String {
                "Patient Orientation in Frame Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9450)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9450)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameLabel;
        impl std::fmt::Display for FrameLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameLabel {
            fn name(&self) -> String {
                "Frame Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9453)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9453)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionIndex;
        impl std::fmt::Display for AcquisitionIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionIndex {
            fn name(&self) -> String {
                "Acquisition Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9518)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9518)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ContributingSOPInstancesReferenceSequence;
        impl std::fmt::Display for ContributingSOPInstancesReferenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContributingSOPInstancesReferenceSequence {
            fn name(&self) -> String {
                "Contributing SOP Instances Reference Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9529)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9529)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReconstructionIndex;
        impl std::fmt::Display for ReconstructionIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReconstructionIndex {
            fn name(&self) -> String {
                "Reconstruction Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0020, 0x9536)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0020
            }
            fn element(&self) -> Option<u16> {
                Some(0x9536)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct Scheduling;
    impl std::fmt::Display for Scheduling {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for Scheduling {
        fn name(&self) -> String {
            "Scheduling".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0040, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0040
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl Scheduling {
        pub type ScheduledStationAETitle = scheduling::ScheduledStationAETitle;
        pub type ScheduledProcedureStepStartDate = scheduling::ScheduledProcedureStepStartDate;
        pub type ScheduledProcedureStepStartTime = scheduling::ScheduledProcedureStepStartTime;
        pub type ScheduledProcedureStepEndDate = scheduling::ScheduledProcedureStepEndDate;
        pub type ScheduledProcedureStepEndTime = scheduling::ScheduledProcedureStepEndTime;
        pub type ScheduledPerformingPhysicianName = scheduling::ScheduledPerformingPhysicianName;
        pub type ScheduledProcedureStepDescription = scheduling::ScheduledProcedureStepDescription;
        pub type ScheduledProtocolCodeSequence = scheduling::ScheduledProtocolCodeSequence;
        pub type ScheduledProcedureStepID = scheduling::ScheduledProcedureStepID;
        pub type StageCodeSequence = scheduling::StageCodeSequence;
        pub type ScheduledPerformingPhysicianIdentificationSequence =
            scheduling::ScheduledPerformingPhysicianIdentificationSequence;
        pub type ScheduledStationName = scheduling::ScheduledStationName;
        pub type ScheduledProcedureStepLocation = scheduling::ScheduledProcedureStepLocation;
        pub type PreMedication = scheduling::PreMedication;
        pub type ScheduledProcedureStepStatus = scheduling::ScheduledProcedureStepStatus;
        pub type OrderPlacerIdentifierSequence = scheduling::OrderPlacerIdentifierSequence;
        pub type OrderFillerIdentifierSequence = scheduling::OrderFillerIdentifierSequence;
        pub type LocalNamespaceEntityID = scheduling::LocalNamespaceEntityID;
        pub type UniversalEntityID = scheduling::UniversalEntityID;
        pub type UniversalEntityIDType = scheduling::UniversalEntityIDType;
        pub type IdentifierTypeCode = scheduling::IdentifierTypeCode;
        pub type AssigningFacilitySequence = scheduling::AssigningFacilitySequence;
        pub type AssigningJurisdictionCodeSequence = scheduling::AssigningJurisdictionCodeSequence;
        pub type AssigningAgencyOrDepartmentCodeSequence =
            scheduling::AssigningAgencyOrDepartmentCodeSequence;
        pub type ScheduledProcedureStepSequence = scheduling::ScheduledProcedureStepSequence;
        pub type ReferencedNonImageCompositeSOPInstanceSequence =
            scheduling::ReferencedNonImageCompositeSOPInstanceSequence;
        pub type PerformedStationAETitle = scheduling::PerformedStationAETitle;
        pub type PerformedStationName = scheduling::PerformedStationName;
        pub type PerformedLocation = scheduling::PerformedLocation;
        pub type PerformedProcedureStepStartDate = scheduling::PerformedProcedureStepStartDate;
        pub type PerformedProcedureStepStartTime = scheduling::PerformedProcedureStepStartTime;
        pub type PerformedProcedureStepEndDate = scheduling::PerformedProcedureStepEndDate;
        pub type PerformedProcedureStepEndTime = scheduling::PerformedProcedureStepEndTime;
        pub type PerformedProcedureStepStatus = scheduling::PerformedProcedureStepStatus;
        pub type PerformedProcedureStepID = scheduling::PerformedProcedureStepID;
        pub type PerformedProcedureStepDescription = scheduling::PerformedProcedureStepDescription;
        pub type PerformedProcedureTypeDescription = scheduling::PerformedProcedureTypeDescription;
        pub type PerformedProtocolCodeSequence = scheduling::PerformedProtocolCodeSequence;
        pub type PerformedProtocolType = scheduling::PerformedProtocolType;
        pub type ScheduledStepAttributesSequence = scheduling::ScheduledStepAttributesSequence;
        pub type RequestAttributesSequence = scheduling::RequestAttributesSequence;
        pub type CommentsOnThePerformedProcedureStep =
            scheduling::CommentsOnThePerformedProcedureStep;
        pub type PerformedProcedureStepDiscontinuationReasonCodeSequence =
            scheduling::PerformedProcedureStepDiscontinuationReasonCodeSequence;
        pub type QuantitySequence = scheduling::QuantitySequence;
        pub type Quantity = scheduling::Quantity;
        pub type MeasuringUnitsSequence = scheduling::MeasuringUnitsSequence;
        pub type BillingItemSequence = scheduling::BillingItemSequence;
        pub type TotalTimeOfFluoroscopy = scheduling::TotalTimeOfFluoroscopy;
        pub type TotalNumberOfExposures = scheduling::TotalNumberOfExposures;
        pub type EntranceDose = scheduling::EntranceDose;
        pub type ExposedArea = scheduling::ExposedArea;
        pub type DistanceSourceToEntrance = scheduling::DistanceSourceToEntrance;
        pub type DistanceSourceToSupport = scheduling::DistanceSourceToSupport;
        pub type ExposureDoseSequence = scheduling::ExposureDoseSequence;
        pub type CommentsOnRadiationDose = scheduling::CommentsOnRadiationDose;
        pub type XRayOutput = scheduling::XRayOutput;
        pub type HalfValueLayer = scheduling::HalfValueLayer;
        pub type OrganDose = scheduling::OrganDose;
        pub type OrganExposed = scheduling::OrganExposed;
        pub type BillingProcedureStepSequence = scheduling::BillingProcedureStepSequence;
        pub type FilmConsumptionSequence = scheduling::FilmConsumptionSequence;
        pub type BillingSuppliesAndDevicesSequence = scheduling::BillingSuppliesAndDevicesSequence;
        pub type ReferencedProcedureStepSequence = scheduling::ReferencedProcedureStepSequence;
        pub type PerformedSeriesSequence = scheduling::PerformedSeriesSequence;
        pub type CommentsOnTheScheduledProcedureStep =
            scheduling::CommentsOnTheScheduledProcedureStep;
        pub type ProtocolContextSequence = scheduling::ProtocolContextSequence;
        pub type ContentItemModifierSequence = scheduling::ContentItemModifierSequence;
        pub type ScheduledSpecimenSequence = scheduling::ScheduledSpecimenSequence;
        pub type SpecimenAccessionNumber = scheduling::SpecimenAccessionNumber;
        pub type ContainerIdentifier = scheduling::ContainerIdentifier;
        pub type IssuerOfTheContainerIdentifierSequence =
            scheduling::IssuerOfTheContainerIdentifierSequence;
        pub type AlternateContainerIdentifierSequence =
            scheduling::AlternateContainerIdentifierSequence;
        pub type ContainerTypeCodeSequence = scheduling::ContainerTypeCodeSequence;
        pub type ContainerDescription = scheduling::ContainerDescription;
        pub type ContainerComponentSequence = scheduling::ContainerComponentSequence;
        pub type SpecimenSequence = scheduling::SpecimenSequence;
        pub type SpecimenIdentifier = scheduling::SpecimenIdentifier;
        pub type SpecimenDescriptionSequenceTrial = scheduling::SpecimenDescriptionSequenceTrial;
        pub type SpecimenDescriptionTrial = scheduling::SpecimenDescriptionTrial;
        pub type SpecimenUID = scheduling::SpecimenUID;
        pub type AcquisitionContextSequence = scheduling::AcquisitionContextSequence;
        pub type AcquisitionContextDescription = scheduling::AcquisitionContextDescription;
        pub type SpecimenTypeCodeSequence = scheduling::SpecimenTypeCodeSequence;
        pub type SpecimenDescriptionSequence = scheduling::SpecimenDescriptionSequence;
        pub type IssuerOfTheSpecimenIdentifierSequence =
            scheduling::IssuerOfTheSpecimenIdentifierSequence;
        pub type SpecimenShortDescription = scheduling::SpecimenShortDescription;
        pub type SpecimenDetailedDescription = scheduling::SpecimenDetailedDescription;
        pub type SpecimenPreparationSequence = scheduling::SpecimenPreparationSequence;
        pub type SpecimenPreparationStepContentItemSequence =
            scheduling::SpecimenPreparationStepContentItemSequence;
        pub type SpecimenLocalizationContentItemSequence =
            scheduling::SpecimenLocalizationContentItemSequence;
        pub type SlideIdentifier = scheduling::SlideIdentifier;
        pub type WholeSlideMicroscopyImageFrameTypeSequence =
            scheduling::WholeSlideMicroscopyImageFrameTypeSequence;
        pub type ImageCenterPointCoordinatesSequence =
            scheduling::ImageCenterPointCoordinatesSequence;
        pub type XOffsetInSlideCoordinateSystem = scheduling::XOffsetInSlideCoordinateSystem;
        pub type YOffsetInSlideCoordinateSystem = scheduling::YOffsetInSlideCoordinateSystem;
        pub type ZOffsetInSlideCoordinateSystem = scheduling::ZOffsetInSlideCoordinateSystem;
        pub type PixelSpacingSequence = scheduling::PixelSpacingSequence;
        pub type CoordinateSystemAxisCodeSequence = scheduling::CoordinateSystemAxisCodeSequence;
        pub type MeasurementUnitsCodeSequence = scheduling::MeasurementUnitsCodeSequence;
        pub type VitalStainCodeSequenceTrial = scheduling::VitalStainCodeSequenceTrial;
        pub type RequestedProcedureID = scheduling::RequestedProcedureID;
        pub type ReasonForTheRequestedProcedure = scheduling::ReasonForTheRequestedProcedure;
        pub type RequestedProcedurePriority = scheduling::RequestedProcedurePriority;
        pub type PatientTransportArrangements = scheduling::PatientTransportArrangements;
        pub type RequestedProcedureLocation = scheduling::RequestedProcedureLocation;
        pub type PlacerOrderNumberProcedure = scheduling::PlacerOrderNumberProcedure;
        pub type FillerOrderNumberProcedure = scheduling::FillerOrderNumberProcedure;
        pub type ConfidentialityCode = scheduling::ConfidentialityCode;
        pub type ReportingPriority = scheduling::ReportingPriority;
        pub type ReasonForRequestedProcedureCodeSequence =
            scheduling::ReasonForRequestedProcedureCodeSequence;
        pub type NamesOfIntendedRecipientsOfResults =
            scheduling::NamesOfIntendedRecipientsOfResults;
        pub type IntendedRecipientsOfResultsIdentificationSequence =
            scheduling::IntendedRecipientsOfResultsIdentificationSequence;
        pub type ReasonForPerformedProcedureCodeSequence =
            scheduling::ReasonForPerformedProcedureCodeSequence;
        pub type RequestedProcedureDescriptionTrial =
            scheduling::RequestedProcedureDescriptionTrial;
        pub type PersonIdentificationCodeSequence = scheduling::PersonIdentificationCodeSequence;
        pub type PersonAddress = scheduling::PersonAddress;
        pub type PersonTelephoneNumbers = scheduling::PersonTelephoneNumbers;
        pub type PersonTelecomInformation = scheduling::PersonTelecomInformation;
        pub type RequestedProcedureComments = scheduling::RequestedProcedureComments;
        pub type ReasonForTheImagingServiceRequest = scheduling::ReasonForTheImagingServiceRequest;
        pub type IssueDateOfImagingServiceRequest = scheduling::IssueDateOfImagingServiceRequest;
        pub type IssueTimeOfImagingServiceRequest = scheduling::IssueTimeOfImagingServiceRequest;
        pub type PlacerOrderNumberImagingServiceRequestRetired =
            scheduling::PlacerOrderNumberImagingServiceRequestRetired;
        pub type FillerOrderNumberImagingServiceRequestRetired =
            scheduling::FillerOrderNumberImagingServiceRequestRetired;
        pub type OrderEnteredBy = scheduling::OrderEnteredBy;
        pub type OrderEntererLocation = scheduling::OrderEntererLocation;
        pub type OrderCallbackPhoneNumber = scheduling::OrderCallbackPhoneNumber;
        pub type OrderCallbackTelecomInformation = scheduling::OrderCallbackTelecomInformation;
        pub type PlacerOrderNumberImagingServiceRequest =
            scheduling::PlacerOrderNumberImagingServiceRequest;
        pub type FillerOrderNumberImagingServiceRequest =
            scheduling::FillerOrderNumberImagingServiceRequest;
        pub type ImagingServiceRequestComments = scheduling::ImagingServiceRequestComments;
        pub type ConfidentialityConstraintOnPatientDataDescription =
            scheduling::ConfidentialityConstraintOnPatientDataDescription;
        pub type GeneralPurposeScheduledProcedureStepStatus =
            scheduling::GeneralPurposeScheduledProcedureStepStatus;
        pub type GeneralPurposePerformedProcedureStepStatus =
            scheduling::GeneralPurposePerformedProcedureStepStatus;
        pub type GeneralPurposeScheduledProcedureStepPriority =
            scheduling::GeneralPurposeScheduledProcedureStepPriority;
        pub type ScheduledProcessingApplicationsCodeSequence =
            scheduling::ScheduledProcessingApplicationsCodeSequence;
        pub type ScheduledProcedureStepStartDateTime =
            scheduling::ScheduledProcedureStepStartDateTime;
        pub type MultipleCopiesFlag = scheduling::MultipleCopiesFlag;
        pub type PerformedProcessingApplicationsCodeSequence =
            scheduling::PerformedProcessingApplicationsCodeSequence;
        pub type ScheduledProcedureStepExpirationDateTime =
            scheduling::ScheduledProcedureStepExpirationDateTime;
        pub type HumanPerformerCodeSequence = scheduling::HumanPerformerCodeSequence;
        pub type ScheduledProcedureStepModificationDateTime =
            scheduling::ScheduledProcedureStepModificationDateTime;
        pub type ExpectedCompletionDateTime = scheduling::ExpectedCompletionDateTime;
        pub type ResultingGeneralPurposePerformedProcedureStepsSequence =
            scheduling::ResultingGeneralPurposePerformedProcedureStepsSequence;
        pub type ReferencedGeneralPurposeScheduledProcedureStepSequence =
            scheduling::ReferencedGeneralPurposeScheduledProcedureStepSequence;
        pub type ScheduledWorkitemCodeSequence = scheduling::ScheduledWorkitemCodeSequence;
        pub type PerformedWorkitemCodeSequence = scheduling::PerformedWorkitemCodeSequence;
        pub type InputAvailabilityFlag = scheduling::InputAvailabilityFlag;
        pub type InputInformationSequence = scheduling::InputInformationSequence;
        pub type RelevantInformationSequence = scheduling::RelevantInformationSequence;
        pub type ReferencedGeneralPurposeScheduledProcedureStepTransactionUID =
            scheduling::ReferencedGeneralPurposeScheduledProcedureStepTransactionUID;
        pub type ScheduledStationNameCodeSequence = scheduling::ScheduledStationNameCodeSequence;
        pub type ScheduledStationClassCodeSequence = scheduling::ScheduledStationClassCodeSequence;
        pub type ScheduledStationGeographicLocationCodeSequence =
            scheduling::ScheduledStationGeographicLocationCodeSequence;
        pub type PerformedStationNameCodeSequence = scheduling::PerformedStationNameCodeSequence;
        pub type PerformedStationClassCodeSequence = scheduling::PerformedStationClassCodeSequence;
        pub type PerformedStationGeographicLocationCodeSequence =
            scheduling::PerformedStationGeographicLocationCodeSequence;
        pub type RequestedSubsequentWorkitemCodeSequence =
            scheduling::RequestedSubsequentWorkitemCodeSequence;
        pub type NonDICOMOutputCodeSequence = scheduling::NonDICOMOutputCodeSequence;
        pub type OutputInformationSequence = scheduling::OutputInformationSequence;
        pub type ScheduledHumanPerformersSequence = scheduling::ScheduledHumanPerformersSequence;
        pub type ActualHumanPerformersSequence = scheduling::ActualHumanPerformersSequence;
        pub type HumanPerformerOrganization = scheduling::HumanPerformerOrganization;
        pub type HumanPerformerName = scheduling::HumanPerformerName;
        pub type RawDataHandling = scheduling::RawDataHandling;
        pub type InputReadinessState = scheduling::InputReadinessState;
        pub type PerformedProcedureStepStartDateTime =
            scheduling::PerformedProcedureStepStartDateTime;
        pub type PerformedProcedureStepEndDateTime = scheduling::PerformedProcedureStepEndDateTime;
        pub type ProcedureStepCancellationDateTime = scheduling::ProcedureStepCancellationDateTime;
        pub type OutputDestinationSequence = scheduling::OutputDestinationSequence;
        pub type DICOMStorageSequence = scheduling::DICOMStorageSequence;
        pub type STOWRSStorageSequence = scheduling::STOWRSStorageSequence;
        pub type StorageURL = scheduling::StorageURL;
        pub type XDSStorageSequence = scheduling::XDSStorageSequence;
        pub type EntranceDoseInmGy = scheduling::EntranceDoseInmGy;
        pub type EntranceDoseDerivation = scheduling::EntranceDoseDerivation;
        pub type ParametricMapFrameTypeSequence = scheduling::ParametricMapFrameTypeSequence;
        pub type ReferencedImageRealWorldValueMappingSequence =
            scheduling::ReferencedImageRealWorldValueMappingSequence;
        pub type RealWorldValueMappingSequence = scheduling::RealWorldValueMappingSequence;
        pub type PixelValueMappingCodeSequence = scheduling::PixelValueMappingCodeSequence;
        pub type LUTLabel = scheduling::LUTLabel;
        pub type RealWorldValueLastValueMapped = scheduling::RealWorldValueLastValueMapped;
        pub type RealWorldValueLUTData = scheduling::RealWorldValueLUTData;
        pub type DoubleFloatRealWorldValueLastValueMapped =
            scheduling::DoubleFloatRealWorldValueLastValueMapped;
        pub type DoubleFloatRealWorldValueFirstValueMapped =
            scheduling::DoubleFloatRealWorldValueFirstValueMapped;
        pub type RealWorldValueFirstValueMapped = scheduling::RealWorldValueFirstValueMapped;
        pub type QuantityDefinitionSequence = scheduling::QuantityDefinitionSequence;
        pub type RealWorldValueIntercept = scheduling::RealWorldValueIntercept;
        pub type RealWorldValueSlope = scheduling::RealWorldValueSlope;
        pub type FindingsFlagTrial = scheduling::FindingsFlagTrial;
        pub type RelationshipType = scheduling::RelationshipType;
        pub type FindingsSequenceTrial = scheduling::FindingsSequenceTrial;
        pub type FindingsGroupUIDTrial = scheduling::FindingsGroupUIDTrial;
        pub type ReferencedFindingsGroupUIDTrial = scheduling::ReferencedFindingsGroupUIDTrial;
        pub type FindingsGroupRecordingDateTrial = scheduling::FindingsGroupRecordingDateTrial;
        pub type FindingsGroupRecordingTimeTrial = scheduling::FindingsGroupRecordingTimeTrial;
        pub type FindingsSourceCategoryCodeSequenceTrial =
            scheduling::FindingsSourceCategoryCodeSequenceTrial;
        pub type VerifyingOrganization = scheduling::VerifyingOrganization;
        pub type DocumentingOrganizationIdentifierCodeSequenceTrial =
            scheduling::DocumentingOrganizationIdentifierCodeSequenceTrial;
        pub type VerificationDateTime = scheduling::VerificationDateTime;
        pub type ObservationDateTime = scheduling::ObservationDateTime;
        pub type ObservationStartDateTime = scheduling::ObservationStartDateTime;
        pub type ValueType = scheduling::ValueType;
        pub type ConceptNameCodeSequence = scheduling::ConceptNameCodeSequence;
        pub type MeasurementPrecisionDescriptionTrial =
            scheduling::MeasurementPrecisionDescriptionTrial;
        pub type ContinuityOfContent = scheduling::ContinuityOfContent;
        pub type UrgencyOrPriorityAlertsTrial = scheduling::UrgencyOrPriorityAlertsTrial;
        pub type SequencingIndicatorTrial = scheduling::SequencingIndicatorTrial;
        pub type DocumentIdentifierCodeSequenceTrial =
            scheduling::DocumentIdentifierCodeSequenceTrial;
        pub type DocumentAuthorTrial = scheduling::DocumentAuthorTrial;
        pub type DocumentAuthorIdentifierCodeSequenceTrial =
            scheduling::DocumentAuthorIdentifierCodeSequenceTrial;
        pub type IdentifierCodeSequenceTrial = scheduling::IdentifierCodeSequenceTrial;
        pub type VerifyingObserverSequence = scheduling::VerifyingObserverSequence;
        pub type ObjectBinaryIdentifierTrial = scheduling::ObjectBinaryIdentifierTrial;
        pub type VerifyingObserverName = scheduling::VerifyingObserverName;
        pub type DocumentingObserverIdentifierCodeSequenceTrial =
            scheduling::DocumentingObserverIdentifierCodeSequenceTrial;
        pub type AuthorObserverSequence = scheduling::AuthorObserverSequence;
        pub type ParticipantSequence = scheduling::ParticipantSequence;
        pub type CustodialOrganizationSequence = scheduling::CustodialOrganizationSequence;
        pub type ParticipationType = scheduling::ParticipationType;
        pub type ParticipationDateTime = scheduling::ParticipationDateTime;
        pub type ObserverType = scheduling::ObserverType;
        pub type ProcedureIdentifierCodeSequenceTrial =
            scheduling::ProcedureIdentifierCodeSequenceTrial;
        pub type VerifyingObserverIdentificationCodeSequence =
            scheduling::VerifyingObserverIdentificationCodeSequence;
        pub type ObjectDirectoryBinaryIdentifierTrial =
            scheduling::ObjectDirectoryBinaryIdentifierTrial;
        pub type EquivalentCDADocumentSequence = scheduling::EquivalentCDADocumentSequence;
        pub type ReferencedWaveformChannels = scheduling::ReferencedWaveformChannels;
        pub type DateOfDocumentOrVerbalTransactionTrial =
            scheduling::DateOfDocumentOrVerbalTransactionTrial;
        pub type TimeOfDocumentCreationOrVerbalTransactionTrial =
            scheduling::TimeOfDocumentCreationOrVerbalTransactionTrial;
        pub type DateTime = scheduling::DateTime;
        pub type Date = scheduling::Date;
        pub type Time = scheduling::Time;
        pub type PersonName = scheduling::PersonName;
        pub type UID = scheduling::UID;
        pub type ReportStatusIDTrial = scheduling::ReportStatusIDTrial;
        pub type TemporalRangeType = scheduling::TemporalRangeType;
        pub type ReferencedSamplePositions = scheduling::ReferencedSamplePositions;
        pub type ReferencedFrameNumbers = scheduling::ReferencedFrameNumbers;
        pub type ReferencedTimeOffsets = scheduling::ReferencedTimeOffsets;
        pub type ReferencedDateTime = scheduling::ReferencedDateTime;
        pub type TextValue = scheduling::TextValue;
        pub type FloatingPointValue = scheduling::FloatingPointValue;
        pub type RationalNumeratorValue = scheduling::RationalNumeratorValue;
        pub type RationalDenominatorValue = scheduling::RationalDenominatorValue;
        pub type ObservationCategoryCodeSequenceTrial =
            scheduling::ObservationCategoryCodeSequenceTrial;
        pub type ConceptCodeSequence = scheduling::ConceptCodeSequence;
        pub type BibliographicCitationTrial = scheduling::BibliographicCitationTrial;
        pub type PurposeOfReferenceCodeSequence = scheduling::PurposeOfReferenceCodeSequence;
        pub type ObservationUID = scheduling::ObservationUID;
        pub type ReferencedObservationUIDTrial = scheduling::ReferencedObservationUIDTrial;
        pub type ReferencedObservationClassTrial = scheduling::ReferencedObservationClassTrial;
        pub type ReferencedObjectObservationClassTrial =
            scheduling::ReferencedObjectObservationClassTrial;
        pub type AnnotationGroupNumber = scheduling::AnnotationGroupNumber;
        pub type ObservationDateTrial = scheduling::ObservationDateTrial;
        pub type ObservationTimeTrial = scheduling::ObservationTimeTrial;
        pub type MeasurementAutomationTrial = scheduling::MeasurementAutomationTrial;
        pub type ModifierCodeSequence = scheduling::ModifierCodeSequence;
        pub type IdentificationDescriptionTrial = scheduling::IdentificationDescriptionTrial;
        pub type CoordinatesSetGeometricTypeTrial = scheduling::CoordinatesSetGeometricTypeTrial;
        pub type AlgorithmCodeSequenceTrial = scheduling::AlgorithmCodeSequenceTrial;
        pub type AlgorithmDescriptionTrial = scheduling::AlgorithmDescriptionTrial;
        pub type PixelCoordinatesSetTrial = scheduling::PixelCoordinatesSetTrial;
        pub type MeasuredValueSequence = scheduling::MeasuredValueSequence;
        pub type NumericValueQualifierCodeSequence = scheduling::NumericValueQualifierCodeSequence;
        pub type CurrentObserverTrial = scheduling::CurrentObserverTrial;
        pub type NumericValue = scheduling::NumericValue;
        pub type ReferencedAccessionSequenceTrial = scheduling::ReferencedAccessionSequenceTrial;
        pub type ReportStatusCommentTrial = scheduling::ReportStatusCommentTrial;
        pub type ProcedureContextSequenceTrial = scheduling::ProcedureContextSequenceTrial;
        pub type VerbalSourceTrial = scheduling::VerbalSourceTrial;
        pub type AddressTrial = scheduling::AddressTrial;
        pub type TelephoneNumberTrial = scheduling::TelephoneNumberTrial;
        pub type VerbalSourceIdentifierCodeSequenceTrial =
            scheduling::VerbalSourceIdentifierCodeSequenceTrial;
        pub type PredecessorDocumentsSequence = scheduling::PredecessorDocumentsSequence;
        pub type ReferencedRequestSequence = scheduling::ReferencedRequestSequence;
        pub type PerformedProcedureCodeSequence = scheduling::PerformedProcedureCodeSequence;
        pub type CurrentRequestedProcedureEvidenceSequence =
            scheduling::CurrentRequestedProcedureEvidenceSequence;
        pub type ReportDetailSequenceTrial = scheduling::ReportDetailSequenceTrial;
        pub type PertinentOtherEvidenceSequence = scheduling::PertinentOtherEvidenceSequence;
        pub type HL7StructuredDocumentReferenceSequence =
            scheduling::HL7StructuredDocumentReferenceSequence;
        pub type ObservationSubjectUIDTrial = scheduling::ObservationSubjectUIDTrial;
        pub type ObservationSubjectClassTrial = scheduling::ObservationSubjectClassTrial;
        pub type ObservationSubjectTypeCodeSequenceTrial =
            scheduling::ObservationSubjectTypeCodeSequenceTrial;
        pub type CompletionFlag = scheduling::CompletionFlag;
        pub type CompletionFlagDescription = scheduling::CompletionFlagDescription;
        pub type VerificationFlag = scheduling::VerificationFlag;
        pub type ArchiveRequested = scheduling::ArchiveRequested;
        pub type PreliminaryFlag = scheduling::PreliminaryFlag;
        pub type ContentTemplateSequence = scheduling::ContentTemplateSequence;
        pub type IdenticalDocumentsSequence = scheduling::IdenticalDocumentsSequence;
        pub type ObservationSubjectContextFlagTrial =
            scheduling::ObservationSubjectContextFlagTrial;
        pub type ObserverContextFlagTrial = scheduling::ObserverContextFlagTrial;
        pub type ProcedureContextFlagTrial = scheduling::ProcedureContextFlagTrial;
        pub type ContentSequence = scheduling::ContentSequence;
        pub type RelationshipSequenceTrial = scheduling::RelationshipSequenceTrial;
        pub type RelationshipTypeCodeSequenceTrial = scheduling::RelationshipTypeCodeSequenceTrial;
        pub type LanguageCodeSequenceTrial = scheduling::LanguageCodeSequenceTrial;
        pub type TabulatedValuesSequence = scheduling::TabulatedValuesSequence;
        pub type NumberOfTableRows = scheduling::NumberOfTableRows;
        pub type NumberOfTableColumns = scheduling::NumberOfTableColumns;
        pub type TableRowNumber = scheduling::TableRowNumber;
        pub type TableColumnNumber = scheduling::TableColumnNumber;
        pub type TableRowDefinitionSequence = scheduling::TableRowDefinitionSequence;
        pub type TableColumnDefinitionSequence = scheduling::TableColumnDefinitionSequence;
        pub type CellValuesSequence = scheduling::CellValuesSequence;
        pub type UniformResourceLocatorTrial = scheduling::UniformResourceLocatorTrial;
        pub type WaveformAnnotationSequence = scheduling::WaveformAnnotationSequence;
        pub type TemplateIdentifier = scheduling::TemplateIdentifier;
        pub type TemplateVersion = scheduling::TemplateVersion;
        pub type TemplateLocalVersion = scheduling::TemplateLocalVersion;
        pub type TemplateExtensionFlag = scheduling::TemplateExtensionFlag;
        pub type TemplateExtensionOrganizationUID = scheduling::TemplateExtensionOrganizationUID;
        pub type TemplateExtensionCreatorUID = scheduling::TemplateExtensionCreatorUID;
        pub type ReferencedContentItemIdentifier = scheduling::ReferencedContentItemIdentifier;
        pub type HL7InstanceIdentifier = scheduling::HL7InstanceIdentifier;
        pub type HL7DocumentEffectiveTime = scheduling::HL7DocumentEffectiveTime;
        pub type HL7DocumentTypeCodeSequence = scheduling::HL7DocumentTypeCodeSequence;
        pub type DocumentClassCodeSequence = scheduling::DocumentClassCodeSequence;
        pub type RetrieveURI = scheduling::RetrieveURI;
        pub type RetrieveLocationUID = scheduling::RetrieveLocationUID;
        pub type TypeOfInstances = scheduling::TypeOfInstances;
        pub type DICOMRetrievalSequence = scheduling::DICOMRetrievalSequence;
        pub type DICOMMediaRetrievalSequence = scheduling::DICOMMediaRetrievalSequence;
        pub type WADORetrievalSequence = scheduling::WADORetrievalSequence;
        pub type XDSRetrievalSequence = scheduling::XDSRetrievalSequence;
        pub type WADORSRetrievalSequence = scheduling::WADORSRetrievalSequence;
        pub type RepositoryUniqueID = scheduling::RepositoryUniqueID;
        pub type HomeCommunityID = scheduling::HomeCommunityID;
    }

    pub mod scheduling {
        #[derive(Debug)]
        pub struct ScheduledStationAETitle;
        impl std::fmt::Display for ScheduledStationAETitle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStationAETitle {
            fn name(&self) -> String {
                "Scheduled Station AE Title".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepStartDate;
        impl std::fmt::Display for ScheduledProcedureStepStartDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepStartDate {
            fn name(&self) -> String {
                "Scheduled Procedure Step Start Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepStartTime;
        impl std::fmt::Display for ScheduledProcedureStepStartTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepStartTime {
            fn name(&self) -> String {
                "Scheduled Procedure Step Start Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0003)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0003)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepEndDate;
        impl std::fmt::Display for ScheduledProcedureStepEndDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepEndDate {
            fn name(&self) -> String {
                "Scheduled Procedure Step End Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepEndTime;
        impl std::fmt::Display for ScheduledProcedureStepEndTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepEndTime {
            fn name(&self) -> String {
                "Scheduled Procedure Step End Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledPerformingPhysicianName;
        impl std::fmt::Display for ScheduledPerformingPhysicianName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledPerformingPhysicianName {
            fn name(&self) -> String {
                "Scheduled Performing Physician's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0006)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepDescription;
        impl std::fmt::Display for ScheduledProcedureStepDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepDescription {
            fn name(&self) -> String {
                "Scheduled Procedure Step Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0007)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProtocolCodeSequence;
        impl std::fmt::Display for ScheduledProtocolCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProtocolCodeSequence {
            fn name(&self) -> String {
                "Scheduled Protocol Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepID;
        impl std::fmt::Display for ScheduledProcedureStepID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepID {
            fn name(&self) -> String {
                "Scheduled Procedure Step ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0009)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0009)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StageCodeSequence;
        impl std::fmt::Display for StageCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StageCodeSequence {
            fn name(&self) -> String {
                "Stage Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x000A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x000A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledPerformingPhysicianIdentificationSequence;
        impl std::fmt::Display for ScheduledPerformingPhysicianIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledPerformingPhysicianIdentificationSequence {
            fn name(&self) -> String {
                "Scheduled Performing Physician Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x000B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x000B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStationName;
        impl std::fmt::Display for ScheduledStationName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStationName {
            fn name(&self) -> String {
                "Scheduled Station Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepLocation;
        impl std::fmt::Display for ScheduledProcedureStepLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepLocation {
            fn name(&self) -> String {
                "Scheduled Procedure Step Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PreMedication;
        impl std::fmt::Display for PreMedication {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PreMedication {
            fn name(&self) -> String {
                "Pre-Medication".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepStatus;
        impl std::fmt::Display for ScheduledProcedureStepStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepStatus {
            fn name(&self) -> String {
                "Scheduled Procedure Step Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderPlacerIdentifierSequence;
        impl std::fmt::Display for OrderPlacerIdentifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderPlacerIdentifierSequence {
            fn name(&self) -> String {
                "Order Placer Identifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0026)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0026)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderFillerIdentifierSequence;
        impl std::fmt::Display for OrderFillerIdentifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderFillerIdentifierSequence {
            fn name(&self) -> String {
                "Order Filler Identifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0027)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0027)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LocalNamespaceEntityID;
        impl std::fmt::Display for LocalNamespaceEntityID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LocalNamespaceEntityID {
            fn name(&self) -> String {
                "Local Namespace Entity ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0031)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0031)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UniversalEntityID;
        impl std::fmt::Display for UniversalEntityID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UniversalEntityID {
            fn name(&self) -> String {
                "Universal Entity ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UniversalEntityIDType;
        impl std::fmt::Display for UniversalEntityIDType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UniversalEntityIDType {
            fn name(&self) -> String {
                "Universal Entity ID Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IdentifierTypeCode;
        impl std::fmt::Display for IdentifierTypeCode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdentifierTypeCode {
            fn name(&self) -> String {
                "Identifier Type Code".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0035)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AssigningFacilitySequence;
        impl std::fmt::Display for AssigningFacilitySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AssigningFacilitySequence {
            fn name(&self) -> String {
                "Assigning Facility Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0036)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0036)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AssigningJurisdictionCodeSequence;
        impl std::fmt::Display for AssigningJurisdictionCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AssigningJurisdictionCodeSequence {
            fn name(&self) -> String {
                "Assigning Jurisdiction Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0039)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0039)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AssigningAgencyOrDepartmentCodeSequence;
        impl std::fmt::Display for AssigningAgencyOrDepartmentCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AssigningAgencyOrDepartmentCodeSequence {
            fn name(&self) -> String {
                "Assigning Agency or Department Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x003A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x003A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepSequence;
        impl std::fmt::Display for ScheduledProcedureStepSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepSequence {
            fn name(&self) -> String {
                "Scheduled Procedure Step Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0100)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedNonImageCompositeSOPInstanceSequence;
        impl std::fmt::Display for ReferencedNonImageCompositeSOPInstanceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedNonImageCompositeSOPInstanceSequence {
            fn name(&self) -> String {
                "Referenced Non-Image Composite SOP Instance Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0220)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0220)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedStationAETitle;
        impl std::fmt::Display for PerformedStationAETitle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedStationAETitle {
            fn name(&self) -> String {
                "Performed Station AE Title".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0241)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AE")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0241)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedStationName;
        impl std::fmt::Display for PerformedStationName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedStationName {
            fn name(&self) -> String {
                "Performed Station Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0242)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0242)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedLocation;
        impl std::fmt::Display for PerformedLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedLocation {
            fn name(&self) -> String {
                "Performed Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0243)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0243)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepStartDate;
        impl std::fmt::Display for PerformedProcedureStepStartDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepStartDate {
            fn name(&self) -> String {
                "Performed Procedure Step Start Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0244)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0244)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepStartTime;
        impl std::fmt::Display for PerformedProcedureStepStartTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepStartTime {
            fn name(&self) -> String {
                "Performed Procedure Step Start Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0245)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0245)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepEndDate;
        impl std::fmt::Display for PerformedProcedureStepEndDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepEndDate {
            fn name(&self) -> String {
                "Performed Procedure Step End Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0250)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0250)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepEndTime;
        impl std::fmt::Display for PerformedProcedureStepEndTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepEndTime {
            fn name(&self) -> String {
                "Performed Procedure Step End Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0251)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0251)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepStatus;
        impl std::fmt::Display for PerformedProcedureStepStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepStatus {
            fn name(&self) -> String {
                "Performed Procedure Step Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0252)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0252)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepID;
        impl std::fmt::Display for PerformedProcedureStepID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepID {
            fn name(&self) -> String {
                "Performed Procedure Step ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0253)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0253)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepDescription;
        impl std::fmt::Display for PerformedProcedureStepDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepDescription {
            fn name(&self) -> String {
                "Performed Procedure Step Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0254)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0254)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureTypeDescription;
        impl std::fmt::Display for PerformedProcedureTypeDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureTypeDescription {
            fn name(&self) -> String {
                "Performed Procedure Type Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0255)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0255)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProtocolCodeSequence;
        impl std::fmt::Display for PerformedProtocolCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProtocolCodeSequence {
            fn name(&self) -> String {
                "Performed Protocol Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0260)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0260)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProtocolType;
        impl std::fmt::Display for PerformedProtocolType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProtocolType {
            fn name(&self) -> String {
                "Performed Protocol Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0261)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0261)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStepAttributesSequence;
        impl std::fmt::Display for ScheduledStepAttributesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStepAttributesSequence {
            fn name(&self) -> String {
                "Scheduled Step Attributes Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0270)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0270)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestAttributesSequence;
        impl std::fmt::Display for RequestAttributesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestAttributesSequence {
            fn name(&self) -> String {
                "Request Attributes Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0275)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0275)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CommentsOnThePerformedProcedureStep;
        impl std::fmt::Display for CommentsOnThePerformedProcedureStep {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CommentsOnThePerformedProcedureStep {
            fn name(&self) -> String {
                "Comments on the Performed Procedure Step".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0280)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0280)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepDiscontinuationReasonCodeSequence;
        impl std::fmt::Display for PerformedProcedureStepDiscontinuationReasonCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepDiscontinuationReasonCodeSequence {
            fn name(&self) -> String {
                "Performed Procedure Step Discontinuation Reason Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0281)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0281)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QuantitySequence;
        impl std::fmt::Display for QuantitySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QuantitySequence {
            fn name(&self) -> String {
                "Quantity Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0293)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0293)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Quantity;
        impl std::fmt::Display for Quantity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Quantity {
            fn name(&self) -> String {
                "Quantity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0294)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0294)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasuringUnitsSequence;
        impl std::fmt::Display for MeasuringUnitsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasuringUnitsSequence {
            fn name(&self) -> String {
                "Measuring Units Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0295)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0295)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BillingItemSequence;
        impl std::fmt::Display for BillingItemSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BillingItemSequence {
            fn name(&self) -> String {
                "Billing Item Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0296)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0296)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TotalTimeOfFluoroscopy;
        impl std::fmt::Display for TotalTimeOfFluoroscopy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TotalTimeOfFluoroscopy {
            fn name(&self) -> String {
                "Total Time of Fluoroscopy".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0300)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0300)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TotalNumberOfExposures;
        impl std::fmt::Display for TotalNumberOfExposures {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TotalNumberOfExposures {
            fn name(&self) -> String {
                "Total Number of Exposures".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0301)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0301)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EntranceDose;
        impl std::fmt::Display for EntranceDose {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EntranceDose {
            fn name(&self) -> String {
                "Entrance Dose".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0302)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0302)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExposedArea;
        impl std::fmt::Display for ExposedArea {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExposedArea {
            fn name(&self) -> String {
                "Exposed Area".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0303)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0303)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-2"
            }
        }

        #[derive(Debug)]
        pub struct DistanceSourceToEntrance;
        impl std::fmt::Display for DistanceSourceToEntrance {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DistanceSourceToEntrance {
            fn name(&self) -> String {
                "Distance Source to Entrance".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0306)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0306)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DistanceSourceToSupport;
        impl std::fmt::Display for DistanceSourceToSupport {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DistanceSourceToSupport {
            fn name(&self) -> String {
                "Distance Source to Support".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0307)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0307)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExposureDoseSequence;
        impl std::fmt::Display for ExposureDoseSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExposureDoseSequence {
            fn name(&self) -> String {
                "Exposure Dose Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x030E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x030E)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CommentsOnRadiationDose;
        impl std::fmt::Display for CommentsOnRadiationDose {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CommentsOnRadiationDose {
            fn name(&self) -> String {
                "Comments on Radiation Dose".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0310)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0310)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct XRayOutput;
        impl std::fmt::Display for XRayOutput {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for XRayOutput {
            fn name(&self) -> String {
                "X-Ray Output".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0312)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0312)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HalfValueLayer;
        impl std::fmt::Display for HalfValueLayer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HalfValueLayer {
            fn name(&self) -> String {
                "Half Value Layer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0314)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0314)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrganDose;
        impl std::fmt::Display for OrganDose {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrganDose {
            fn name(&self) -> String {
                "Organ Dose".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0316)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0316)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrganExposed;
        impl std::fmt::Display for OrganExposed {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrganExposed {
            fn name(&self) -> String {
                "Organ Exposed".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0318)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0318)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BillingProcedureStepSequence;
        impl std::fmt::Display for BillingProcedureStepSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BillingProcedureStepSequence {
            fn name(&self) -> String {
                "Billing Procedure Step Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0320)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0320)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FilmConsumptionSequence;
        impl std::fmt::Display for FilmConsumptionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FilmConsumptionSequence {
            fn name(&self) -> String {
                "Film Consumption Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0321)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0321)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BillingSuppliesAndDevicesSequence;
        impl std::fmt::Display for BillingSuppliesAndDevicesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BillingSuppliesAndDevicesSequence {
            fn name(&self) -> String {
                "Billing Supplies and Devices Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0324)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0324)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedProcedureStepSequence;
        impl std::fmt::Display for ReferencedProcedureStepSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedProcedureStepSequence {
            fn name(&self) -> String {
                "Referenced Procedure Step Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0330)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0330)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedSeriesSequence;
        impl std::fmt::Display for PerformedSeriesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedSeriesSequence {
            fn name(&self) -> String {
                "Performed Series Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0340)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0340)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CommentsOnTheScheduledProcedureStep;
        impl std::fmt::Display for CommentsOnTheScheduledProcedureStep {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CommentsOnTheScheduledProcedureStep {
            fn name(&self) -> String {
                "Comments on the Scheduled Procedure Step".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0400)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0400)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProtocolContextSequence;
        impl std::fmt::Display for ProtocolContextSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProtocolContextSequence {
            fn name(&self) -> String {
                "Protocol Context Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0440)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0440)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentItemModifierSequence;
        impl std::fmt::Display for ContentItemModifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentItemModifierSequence {
            fn name(&self) -> String {
                "Content Item Modifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0441)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0441)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledSpecimenSequence;
        impl std::fmt::Display for ScheduledSpecimenSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledSpecimenSequence {
            fn name(&self) -> String {
                "Scheduled Specimen Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0500)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0500)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenAccessionNumber;
        impl std::fmt::Display for SpecimenAccessionNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenAccessionNumber {
            fn name(&self) -> String {
                "Specimen Accession Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x050A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x050A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerIdentifier;
        impl std::fmt::Display for ContainerIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerIdentifier {
            fn name(&self) -> String {
                "Container Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0512)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0512)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssuerOfTheContainerIdentifierSequence;
        impl std::fmt::Display for IssuerOfTheContainerIdentifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssuerOfTheContainerIdentifierSequence {
            fn name(&self) -> String {
                "Issuer of the Container Identifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0513)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0513)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AlternateContainerIdentifierSequence;
        impl std::fmt::Display for AlternateContainerIdentifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AlternateContainerIdentifierSequence {
            fn name(&self) -> String {
                "Alternate Container Identifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0515)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0515)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerTypeCodeSequence;
        impl std::fmt::Display for ContainerTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerTypeCodeSequence {
            fn name(&self) -> String {
                "Container Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0518)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0518)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerDescription;
        impl std::fmt::Display for ContainerDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerDescription {
            fn name(&self) -> String {
                "Container Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x051A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x051A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContainerComponentSequence;
        impl std::fmt::Display for ContainerComponentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContainerComponentSequence {
            fn name(&self) -> String {
                "Container Component Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0520)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0520)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenSequence;
        impl std::fmt::Display for SpecimenSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenSequence {
            fn name(&self) -> String {
                "Specimen Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0550)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0550)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenIdentifier;
        impl std::fmt::Display for SpecimenIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenIdentifier {
            fn name(&self) -> String {
                "Specimen Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0551)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0551)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenDescriptionSequenceTrial;
        impl std::fmt::Display for SpecimenDescriptionSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenDescriptionSequenceTrial {
            fn name(&self) -> String {
                "Specimen Description Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0552)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0552)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenDescriptionTrial;
        impl std::fmt::Display for SpecimenDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenDescriptionTrial {
            fn name(&self) -> String {
                "Specimen Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0553)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0553)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenUID;
        impl std::fmt::Display for SpecimenUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenUID {
            fn name(&self) -> String {
                "Specimen UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0554)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0554)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionContextSequence;
        impl std::fmt::Display for AcquisitionContextSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionContextSequence {
            fn name(&self) -> String {
                "Acquisition Context Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0555)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0555)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AcquisitionContextDescription;
        impl std::fmt::Display for AcquisitionContextDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AcquisitionContextDescription {
            fn name(&self) -> String {
                "Acquisition Context Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0556)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0556)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenTypeCodeSequence;
        impl std::fmt::Display for SpecimenTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenTypeCodeSequence {
            fn name(&self) -> String {
                "Specimen Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x059A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x059A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenDescriptionSequence;
        impl std::fmt::Display for SpecimenDescriptionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenDescriptionSequence {
            fn name(&self) -> String {
                "Specimen Description Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0560)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0560)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssuerOfTheSpecimenIdentifierSequence;
        impl std::fmt::Display for IssuerOfTheSpecimenIdentifierSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssuerOfTheSpecimenIdentifierSequence {
            fn name(&self) -> String {
                "Issuer of the Specimen Identifier Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0562)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0562)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenShortDescription;
        impl std::fmt::Display for SpecimenShortDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenShortDescription {
            fn name(&self) -> String {
                "Specimen Short Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0600)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0600)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenDetailedDescription;
        impl std::fmt::Display for SpecimenDetailedDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenDetailedDescription {
            fn name(&self) -> String {
                "Specimen Detailed Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0602)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0602)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenPreparationSequence;
        impl std::fmt::Display for SpecimenPreparationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenPreparationSequence {
            fn name(&self) -> String {
                "Specimen Preparation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0610)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0610)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenPreparationStepContentItemSequence;
        impl std::fmt::Display for SpecimenPreparationStepContentItemSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenPreparationStepContentItemSequence {
            fn name(&self) -> String {
                "Specimen Preparation Step Content Item Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0612)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0612)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecimenLocalizationContentItemSequence;
        impl std::fmt::Display for SpecimenLocalizationContentItemSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecimenLocalizationContentItemSequence {
            fn name(&self) -> String {
                "Specimen Localization Content Item Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0620)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0620)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SlideIdentifier;
        impl std::fmt::Display for SlideIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SlideIdentifier {
            fn name(&self) -> String {
                "Slide Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x06FA)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x06FA)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WholeSlideMicroscopyImageFrameTypeSequence;
        impl std::fmt::Display for WholeSlideMicroscopyImageFrameTypeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WholeSlideMicroscopyImageFrameTypeSequence {
            fn name(&self) -> String {
                "Whole Slide Microscopy Image Frame Type Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x0710)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x0710)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageCenterPointCoordinatesSequence;
        impl std::fmt::Display for ImageCenterPointCoordinatesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageCenterPointCoordinatesSequence {
            fn name(&self) -> String {
                "Image Center Point Coordinates Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x071A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x071A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct XOffsetInSlideCoordinateSystem;
        impl std::fmt::Display for XOffsetInSlideCoordinateSystem {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for XOffsetInSlideCoordinateSystem {
            fn name(&self) -> String {
                "X Offset in Slide Coordinate System".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x072A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x072A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct YOffsetInSlideCoordinateSystem;
        impl std::fmt::Display for YOffsetInSlideCoordinateSystem {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for YOffsetInSlideCoordinateSystem {
            fn name(&self) -> String {
                "Y Offset in Slide Coordinate System".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x073A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x073A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ZOffsetInSlideCoordinateSystem;
        impl std::fmt::Display for ZOffsetInSlideCoordinateSystem {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ZOffsetInSlideCoordinateSystem {
            fn name(&self) -> String {
                "Z Offset in Slide Coordinate System".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x074A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x074A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PixelSpacingSequence;
        impl std::fmt::Display for PixelSpacingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PixelSpacingSequence {
            fn name(&self) -> String {
                "Pixel Spacing Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x08D8)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x08D8)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CoordinateSystemAxisCodeSequence;
        impl std::fmt::Display for CoordinateSystemAxisCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CoordinateSystemAxisCodeSequence {
            fn name(&self) -> String {
                "Coordinate System Axis Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x08DA)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x08DA)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasurementUnitsCodeSequence;
        impl std::fmt::Display for MeasurementUnitsCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasurementUnitsCodeSequence {
            fn name(&self) -> String {
                "Measurement Units Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x08EA)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x08EA)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VitalStainCodeSequenceTrial;
        impl std::fmt::Display for VitalStainCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VitalStainCodeSequenceTrial {
            fn name(&self) -> String {
                "Vital Stain Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x09F8)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x09F8)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureID;
        impl std::fmt::Display for RequestedProcedureID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureID {
            fn name(&self) -> String {
                "Requested Procedure ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForTheRequestedProcedure;
        impl std::fmt::Display for ReasonForTheRequestedProcedure {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForTheRequestedProcedure {
            fn name(&self) -> String {
                "Reason for the Requested Procedure".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedurePriority;
        impl std::fmt::Display for RequestedProcedurePriority {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedurePriority {
            fn name(&self) -> String {
                "Requested Procedure Priority".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1003)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1003)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientTransportArrangements;
        impl std::fmt::Display for PatientTransportArrangements {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientTransportArrangements {
            fn name(&self) -> String {
                "Patient Transport Arrangements".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureLocation;
        impl std::fmt::Display for RequestedProcedureLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureLocation {
            fn name(&self) -> String {
                "Requested Procedure Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlacerOrderNumberProcedure;
        impl std::fmt::Display for PlacerOrderNumberProcedure {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlacerOrderNumberProcedure {
            fn name(&self) -> String {
                "Placer Order Number / Procedure".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1006)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillerOrderNumberProcedure;
        impl std::fmt::Display for FillerOrderNumberProcedure {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillerOrderNumberProcedure {
            fn name(&self) -> String {
                "Filler Order Number / Procedure".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1007)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConfidentialityCode;
        impl std::fmt::Display for ConfidentialityCode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConfidentialityCode {
            fn name(&self) -> String {
                "Confidentiality Code".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReportingPriority;
        impl std::fmt::Display for ReportingPriority {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReportingPriority {
            fn name(&self) -> String {
                "Reporting Priority".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1009)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1009)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForRequestedProcedureCodeSequence;
        impl std::fmt::Display for ReasonForRequestedProcedureCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForRequestedProcedureCodeSequence {
            fn name(&self) -> String {
                "Reason for Requested Procedure Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x100A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x100A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NamesOfIntendedRecipientsOfResults;
        impl std::fmt::Display for NamesOfIntendedRecipientsOfResults {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NamesOfIntendedRecipientsOfResults {
            fn name(&self) -> String {
                "Names of Intended Recipients of Results".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct IntendedRecipientsOfResultsIdentificationSequence;
        impl std::fmt::Display for IntendedRecipientsOfResultsIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IntendedRecipientsOfResultsIdentificationSequence {
            fn name(&self) -> String {
                "Intended Recipients of Results Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForPerformedProcedureCodeSequence;
        impl std::fmt::Display for ReasonForPerformedProcedureCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForPerformedProcedureCodeSequence {
            fn name(&self) -> String {
                "Reason For Performed Procedure Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureDescriptionTrial;
        impl std::fmt::Display for RequestedProcedureDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureDescriptionTrial {
            fn name(&self) -> String {
                "Requested Procedure Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1060)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PersonIdentificationCodeSequence;
        impl std::fmt::Display for PersonIdentificationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PersonIdentificationCodeSequence {
            fn name(&self) -> String {
                "Person Identification Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1101)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1101)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PersonAddress;
        impl std::fmt::Display for PersonAddress {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PersonAddress {
            fn name(&self) -> String {
                "Person's Address".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1102)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1102)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PersonTelephoneNumbers;
        impl std::fmt::Display for PersonTelephoneNumbers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PersonTelephoneNumbers {
            fn name(&self) -> String {
                "Person's Telephone Numbers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1103)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1103)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PersonTelecomInformation;
        impl std::fmt::Display for PersonTelecomInformation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PersonTelecomInformation {
            fn name(&self) -> String {
                "Person's Telecom Information".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1104)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1104)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedProcedureComments;
        impl std::fmt::Display for RequestedProcedureComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedProcedureComments {
            fn name(&self) -> String {
                "Requested Procedure Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x1400)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x1400)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReasonForTheImagingServiceRequest;
        impl std::fmt::Display for ReasonForTheImagingServiceRequest {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReasonForTheImagingServiceRequest {
            fn name(&self) -> String {
                "Reason for the Imaging Service Request".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2001)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssueDateOfImagingServiceRequest;
        impl std::fmt::Display for IssueDateOfImagingServiceRequest {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssueDateOfImagingServiceRequest {
            fn name(&self) -> String {
                "Issue Date of Imaging Service Request".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssueTimeOfImagingServiceRequest;
        impl std::fmt::Display for IssueTimeOfImagingServiceRequest {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssueTimeOfImagingServiceRequest {
            fn name(&self) -> String {
                "Issue Time of Imaging Service Request".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlacerOrderNumberImagingServiceRequestRetired;
        impl std::fmt::Display for PlacerOrderNumberImagingServiceRequestRetired {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlacerOrderNumberImagingServiceRequestRetired {
            fn name(&self) -> String {
                "Placer Order Number / Imaging Service Request (Retired)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2006)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillerOrderNumberImagingServiceRequestRetired;
        impl std::fmt::Display for FillerOrderNumberImagingServiceRequestRetired {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillerOrderNumberImagingServiceRequestRetired {
            fn name(&self) -> String {
                "Filler Order Number / Imaging Service Request (Retired)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2007)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderEnteredBy;
        impl std::fmt::Display for OrderEnteredBy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderEnteredBy {
            fn name(&self) -> String {
                "Order Entered By".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderEntererLocation;
        impl std::fmt::Display for OrderEntererLocation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderEntererLocation {
            fn name(&self) -> String {
                "Order Enterer's Location".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2009)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2009)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderCallbackPhoneNumber;
        impl std::fmt::Display for OrderCallbackPhoneNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderCallbackPhoneNumber {
            fn name(&self) -> String {
                "Order Callback Phone Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OrderCallbackTelecomInformation;
        impl std::fmt::Display for OrderCallbackTelecomInformation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OrderCallbackTelecomInformation {
            fn name(&self) -> String {
                "Order Callback Telecom Information".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PlacerOrderNumberImagingServiceRequest;
        impl std::fmt::Display for PlacerOrderNumberImagingServiceRequest {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlacerOrderNumberImagingServiceRequest {
            fn name(&self) -> String {
                "Placer Order Number / Imaging Service Request".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2016)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2016)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillerOrderNumberImagingServiceRequest;
        impl std::fmt::Display for FillerOrderNumberImagingServiceRequest {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillerOrderNumberImagingServiceRequest {
            fn name(&self) -> String {
                "Filler Order Number / Imaging Service Request".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2017)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2017)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImagingServiceRequestComments;
        impl std::fmt::Display for ImagingServiceRequestComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImagingServiceRequestComments {
            fn name(&self) -> String {
                "Imaging Service Request Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x2400)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x2400)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConfidentialityConstraintOnPatientDataDescription;
        impl std::fmt::Display for ConfidentialityConstraintOnPatientDataDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConfidentialityConstraintOnPatientDataDescription {
            fn name(&self) -> String {
                "Confidentiality Constraint on Patient Data Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x3001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x3001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneralPurposeScheduledProcedureStepStatus;
        impl std::fmt::Display for GeneralPurposeScheduledProcedureStepStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneralPurposeScheduledProcedureStepStatus {
            fn name(&self) -> String {
                "General Purpose Scheduled Procedure Step Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4001)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneralPurposePerformedProcedureStepStatus;
        impl std::fmt::Display for GeneralPurposePerformedProcedureStepStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneralPurposePerformedProcedureStepStatus {
            fn name(&self) -> String {
                "General Purpose Performed Procedure Step Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4002)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneralPurposeScheduledProcedureStepPriority;
        impl std::fmt::Display for GeneralPurposeScheduledProcedureStepPriority {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneralPurposeScheduledProcedureStepPriority {
            fn name(&self) -> String {
                "General Purpose Scheduled Procedure Step Priority".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4003)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4003)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcessingApplicationsCodeSequence;
        impl std::fmt::Display for ScheduledProcessingApplicationsCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcessingApplicationsCodeSequence {
            fn name(&self) -> String {
                "Scheduled Processing Applications Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4004)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepStartDateTime;
        impl std::fmt::Display for ScheduledProcedureStepStartDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepStartDateTime {
            fn name(&self) -> String {
                "Scheduled Procedure Step Start DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MultipleCopiesFlag;
        impl std::fmt::Display for MultipleCopiesFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MultipleCopiesFlag {
            fn name(&self) -> String {
                "Multiple Copies Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4006)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcessingApplicationsCodeSequence;
        impl std::fmt::Display for PerformedProcessingApplicationsCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcessingApplicationsCodeSequence {
            fn name(&self) -> String {
                "Performed Processing Applications Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4007)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepExpirationDateTime;
        impl std::fmt::Display for ScheduledProcedureStepExpirationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepExpirationDateTime {
            fn name(&self) -> String {
                "Scheduled Procedure Step Expiration DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HumanPerformerCodeSequence;
        impl std::fmt::Display for HumanPerformerCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HumanPerformerCodeSequence {
            fn name(&self) -> String {
                "Human Performer Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4009)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4009)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledProcedureStepModificationDateTime;
        impl std::fmt::Display for ScheduledProcedureStepModificationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledProcedureStepModificationDateTime {
            fn name(&self) -> String {
                "Scheduled Procedure Step Modification DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExpectedCompletionDateTime;
        impl std::fmt::Display for ExpectedCompletionDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExpectedCompletionDateTime {
            fn name(&self) -> String {
                "Expected Completion DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ResultingGeneralPurposePerformedProcedureStepsSequence;
        impl std::fmt::Display for ResultingGeneralPurposePerformedProcedureStepsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ResultingGeneralPurposePerformedProcedureStepsSequence {
            fn name(&self) -> String {
                "Resulting General Purpose Performed Procedure Steps Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4015)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4015)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedGeneralPurposeScheduledProcedureStepSequence;
        impl std::fmt::Display for ReferencedGeneralPurposeScheduledProcedureStepSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedGeneralPurposeScheduledProcedureStepSequence {
            fn name(&self) -> String {
                "Referenced General Purpose Scheduled Procedure Step Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4016)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4016)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledWorkitemCodeSequence;
        impl std::fmt::Display for ScheduledWorkitemCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledWorkitemCodeSequence {
            fn name(&self) -> String {
                "Scheduled Workitem Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4018)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4018)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedWorkitemCodeSequence;
        impl std::fmt::Display for PerformedWorkitemCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedWorkitemCodeSequence {
            fn name(&self) -> String {
                "Performed Workitem Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4019)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4019)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InputAvailabilityFlag;
        impl std::fmt::Display for InputAvailabilityFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InputAvailabilityFlag {
            fn name(&self) -> String {
                "Input Availability Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4020)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InputInformationSequence;
        impl std::fmt::Display for InputInformationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InputInformationSequence {
            fn name(&self) -> String {
                "Input Information Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelevantInformationSequence;
        impl std::fmt::Display for RelevantInformationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelevantInformationSequence {
            fn name(&self) -> String {
                "Relevant Information Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4022)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedGeneralPurposeScheduledProcedureStepTransactionUID;
        impl std::fmt::Display for ReferencedGeneralPurposeScheduledProcedureStepTransactionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedGeneralPurposeScheduledProcedureStepTransactionUID {
            fn name(&self) -> String {
                "Referenced General Purpose Scheduled Procedure Step Transaction UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4023)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStationNameCodeSequence;
        impl std::fmt::Display for ScheduledStationNameCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStationNameCodeSequence {
            fn name(&self) -> String {
                "Scheduled Station Name Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4025)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4025)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStationClassCodeSequence;
        impl std::fmt::Display for ScheduledStationClassCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStationClassCodeSequence {
            fn name(&self) -> String {
                "Scheduled Station Class Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4026)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4026)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledStationGeographicLocationCodeSequence;
        impl std::fmt::Display for ScheduledStationGeographicLocationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledStationGeographicLocationCodeSequence {
            fn name(&self) -> String {
                "Scheduled Station Geographic Location Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4027)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4027)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedStationNameCodeSequence;
        impl std::fmt::Display for PerformedStationNameCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedStationNameCodeSequence {
            fn name(&self) -> String {
                "Performed Station Name Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4028)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4028)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedStationClassCodeSequence;
        impl std::fmt::Display for PerformedStationClassCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedStationClassCodeSequence {
            fn name(&self) -> String {
                "Performed Station Class Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4029)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4029)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedStationGeographicLocationCodeSequence;
        impl std::fmt::Display for PerformedStationGeographicLocationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedStationGeographicLocationCodeSequence {
            fn name(&self) -> String {
                "Performed Station Geographic Location Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RequestedSubsequentWorkitemCodeSequence;
        impl std::fmt::Display for RequestedSubsequentWorkitemCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RequestedSubsequentWorkitemCodeSequence {
            fn name(&self) -> String {
                "Requested Subsequent Workitem Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4031)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4031)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NonDICOMOutputCodeSequence;
        impl std::fmt::Display for NonDICOMOutputCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NonDICOMOutputCodeSequence {
            fn name(&self) -> String {
                "Non-DICOM Output Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4032)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OutputInformationSequence;
        impl std::fmt::Display for OutputInformationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OutputInformationSequence {
            fn name(&self) -> String {
                "Output Information Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ScheduledHumanPerformersSequence;
        impl std::fmt::Display for ScheduledHumanPerformersSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ScheduledHumanPerformersSequence {
            fn name(&self) -> String {
                "Scheduled Human Performers Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4034)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4034)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ActualHumanPerformersSequence;
        impl std::fmt::Display for ActualHumanPerformersSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ActualHumanPerformersSequence {
            fn name(&self) -> String {
                "Actual Human Performers Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4035)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HumanPerformerOrganization;
        impl std::fmt::Display for HumanPerformerOrganization {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HumanPerformerOrganization {
            fn name(&self) -> String {
                "Human Performer's Organization".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4036)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4036)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HumanPerformerName;
        impl std::fmt::Display for HumanPerformerName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HumanPerformerName {
            fn name(&self) -> String {
                "Human Performer's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4037)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4037)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RawDataHandling;
        impl std::fmt::Display for RawDataHandling {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RawDataHandling {
            fn name(&self) -> String {
                "Raw Data Handling".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InputReadinessState;
        impl std::fmt::Display for InputReadinessState {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InputReadinessState {
            fn name(&self) -> String {
                "Input Readiness State".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4041)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepStartDateTime;
        impl std::fmt::Display for PerformedProcedureStepStartDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepStartDateTime {
            fn name(&self) -> String {
                "Performed Procedure Step Start DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4050)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureStepEndDateTime;
        impl std::fmt::Display for PerformedProcedureStepEndDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureStepEndDateTime {
            fn name(&self) -> String {
                "Performed Procedure Step End DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4051)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4051)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProcedureStepCancellationDateTime;
        impl std::fmt::Display for ProcedureStepCancellationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProcedureStepCancellationDateTime {
            fn name(&self) -> String {
                "Procedure Step Cancellation DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4052)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4052)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OutputDestinationSequence;
        impl std::fmt::Display for OutputDestinationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OutputDestinationSequence {
            fn name(&self) -> String {
                "Output Destination Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4070)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DICOMStorageSequence;
        impl std::fmt::Display for DICOMStorageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DICOMStorageSequence {
            fn name(&self) -> String {
                "DICOM Storage Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4071)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4071)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct STOWRSStorageSequence;
        impl std::fmt::Display for STOWRSStorageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for STOWRSStorageSequence {
            fn name(&self) -> String {
                "STOW-RS Storage Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4072)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4072)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StorageURL;
        impl std::fmt::Display for StorageURL {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StorageURL {
            fn name(&self) -> String {
                "Storage URL".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4073)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4073)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct XDSStorageSequence;
        impl std::fmt::Display for XDSStorageSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for XDSStorageSequence {
            fn name(&self) -> String {
                "XDS Storage Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x4074)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x4074)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EntranceDoseInmGy;
        impl std::fmt::Display for EntranceDoseInmGy {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EntranceDoseInmGy {
            fn name(&self) -> String {
                "Entrance Dose in mGy".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x8302)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x8302)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EntranceDoseDerivation;
        impl std::fmt::Display for EntranceDoseDerivation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EntranceDoseDerivation {
            fn name(&self) -> String {
                "Entrance Dose Derivation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x8303)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x8303)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ParametricMapFrameTypeSequence;
        impl std::fmt::Display for ParametricMapFrameTypeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ParametricMapFrameTypeSequence {
            fn name(&self) -> String {
                "Parametric Map Frame Type Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9092)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9092)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedImageRealWorldValueMappingSequence;
        impl std::fmt::Display for ReferencedImageRealWorldValueMappingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedImageRealWorldValueMappingSequence {
            fn name(&self) -> String {
                "Referenced Image Real World Value Mapping Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9094)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9094)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueMappingSequence;
        impl std::fmt::Display for RealWorldValueMappingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueMappingSequence {
            fn name(&self) -> String {
                "Real World Value Mapping Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9096)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9096)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PixelValueMappingCodeSequence;
        impl std::fmt::Display for PixelValueMappingCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PixelValueMappingCodeSequence {
            fn name(&self) -> String {
                "Pixel Value Mapping Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9098)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9098)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LUTLabel;
        impl std::fmt::Display for LUTLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LUTLabel {
            fn name(&self) -> String {
                "LUT Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9210)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9210)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueLastValueMapped;
        impl std::fmt::Display for RealWorldValueLastValueMapped {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueLastValueMapped {
            fn name(&self) -> String {
                "Real World Value Last Value Mapped".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9211)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US or SS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9211)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueLUTData;
        impl std::fmt::Display for RealWorldValueLUTData {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueLUTData {
            fn name(&self) -> String {
                "Real World Value LUT Data".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9212)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9212)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct DoubleFloatRealWorldValueLastValueMapped;
        impl std::fmt::Display for DoubleFloatRealWorldValueLastValueMapped {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DoubleFloatRealWorldValueLastValueMapped {
            fn name(&self) -> String {
                "Double Float Real World Value Last Value Mapped".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9213)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9213)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DoubleFloatRealWorldValueFirstValueMapped;
        impl std::fmt::Display for DoubleFloatRealWorldValueFirstValueMapped {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DoubleFloatRealWorldValueFirstValueMapped {
            fn name(&self) -> String {
                "Double Float Real World Value First Value Mapped".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9214)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9214)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueFirstValueMapped;
        impl std::fmt::Display for RealWorldValueFirstValueMapped {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueFirstValueMapped {
            fn name(&self) -> String {
                "Real World Value First Value Mapped".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9216)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US or SS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9216)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QuantityDefinitionSequence;
        impl std::fmt::Display for QuantityDefinitionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QuantityDefinitionSequence {
            fn name(&self) -> String {
                "Quantity Definition Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9220)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9220)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueIntercept;
        impl std::fmt::Display for RealWorldValueIntercept {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueIntercept {
            fn name(&self) -> String {
                "Real World Value Intercept".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9224)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9224)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RealWorldValueSlope;
        impl std::fmt::Display for RealWorldValueSlope {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RealWorldValueSlope {
            fn name(&self) -> String {
                "Real World Value Slope".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0x9225)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0x9225)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsFlagTrial;
        impl std::fmt::Display for FindingsFlagTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsFlagTrial {
            fn name(&self) -> String {
                "Findings Flag (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA007)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA007)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelationshipType;
        impl std::fmt::Display for RelationshipType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelationshipType {
            fn name(&self) -> String {
                "Relationship Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsSequenceTrial;
        impl std::fmt::Display for FindingsSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsSequenceTrial {
            fn name(&self) -> String {
                "Findings Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA020)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsGroupUIDTrial;
        impl std::fmt::Display for FindingsGroupUIDTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsGroupUIDTrial {
            fn name(&self) -> String {
                "Findings Group UID (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA021)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedFindingsGroupUIDTrial;
        impl std::fmt::Display for ReferencedFindingsGroupUIDTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedFindingsGroupUIDTrial {
            fn name(&self) -> String {
                "Referenced Findings Group UID (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA022)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsGroupRecordingDateTrial;
        impl std::fmt::Display for FindingsGroupRecordingDateTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsGroupRecordingDateTrial {
            fn name(&self) -> String {
                "Findings Group Recording Date (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA023)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsGroupRecordingTimeTrial;
        impl std::fmt::Display for FindingsGroupRecordingTimeTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsGroupRecordingTimeTrial {
            fn name(&self) -> String {
                "Findings Group Recording Time (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA024)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FindingsSourceCategoryCodeSequenceTrial;
        impl std::fmt::Display for FindingsSourceCategoryCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FindingsSourceCategoryCodeSequenceTrial {
            fn name(&self) -> String {
                "Findings Source Category Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA026)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA026)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerifyingOrganization;
        impl std::fmt::Display for VerifyingOrganization {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerifyingOrganization {
            fn name(&self) -> String {
                "Verifying Organization".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA027)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA027)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentingOrganizationIdentifierCodeSequenceTrial;
        impl std::fmt::Display for DocumentingOrganizationIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentingOrganizationIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Documenting Organization Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA028)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA028)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerificationDateTime;
        impl std::fmt::Display for VerificationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerificationDateTime {
            fn name(&self) -> String {
                "Verification DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationDateTime;
        impl std::fmt::Display for ObservationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationDateTime {
            fn name(&self) -> String {
                "Observation DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationStartDateTime;
        impl std::fmt::Display for ObservationStartDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationStartDateTime {
            fn name(&self) -> String {
                "Observation Start DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ValueType;
        impl std::fmt::Display for ValueType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ValueType {
            fn name(&self) -> String {
                "Value Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConceptNameCodeSequence;
        impl std::fmt::Display for ConceptNameCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConceptNameCodeSequence {
            fn name(&self) -> String {
                "Concept Name Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA043)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA043)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasurementPrecisionDescriptionTrial;
        impl std::fmt::Display for MeasurementPrecisionDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasurementPrecisionDescriptionTrial {
            fn name(&self) -> String {
                "Measurement Precision Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA047)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA047)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContinuityOfContent;
        impl std::fmt::Display for ContinuityOfContent {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContinuityOfContent {
            fn name(&self) -> String {
                "Continuity Of Content".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA050)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UrgencyOrPriorityAlertsTrial;
        impl std::fmt::Display for UrgencyOrPriorityAlertsTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UrgencyOrPriorityAlertsTrial {
            fn name(&self) -> String {
                "Urgency or Priority Alerts (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA057)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA057)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct SequencingIndicatorTrial;
        impl std::fmt::Display for SequencingIndicatorTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SequencingIndicatorTrial {
            fn name(&self) -> String {
                "Sequencing Indicator (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA060)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentIdentifierCodeSequenceTrial;
        impl std::fmt::Display for DocumentIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Document Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA066)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA066)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentAuthorTrial;
        impl std::fmt::Display for DocumentAuthorTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentAuthorTrial {
            fn name(&self) -> String {
                "Document Author (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA067)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA067)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentAuthorIdentifierCodeSequenceTrial;
        impl std::fmt::Display for DocumentAuthorIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentAuthorIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Document Author Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA068)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA068)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IdentifierCodeSequenceTrial;
        impl std::fmt::Display for IdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA070)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA070)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerifyingObserverSequence;
        impl std::fmt::Display for VerifyingObserverSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerifyingObserverSequence {
            fn name(&self) -> String {
                "Verifying Observer Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA073)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA073)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObjectBinaryIdentifierTrial;
        impl std::fmt::Display for ObjectBinaryIdentifierTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObjectBinaryIdentifierTrial {
            fn name(&self) -> String {
                "Object Binary Identifier (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA074)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA074)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerifyingObserverName;
        impl std::fmt::Display for VerifyingObserverName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerifyingObserverName {
            fn name(&self) -> String {
                "Verifying Observer Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA075)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA075)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentingObserverIdentifierCodeSequenceTrial;
        impl std::fmt::Display for DocumentingObserverIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentingObserverIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Documenting Observer Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA076)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA076)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AuthorObserverSequence;
        impl std::fmt::Display for AuthorObserverSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AuthorObserverSequence {
            fn name(&self) -> String {
                "Author Observer Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA078)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA078)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ParticipantSequence;
        impl std::fmt::Display for ParticipantSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ParticipantSequence {
            fn name(&self) -> String {
                "Participant Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA07A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA07A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CustodialOrganizationSequence;
        impl std::fmt::Display for CustodialOrganizationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CustodialOrganizationSequence {
            fn name(&self) -> String {
                "Custodial Organization Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA07C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA07C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ParticipationType;
        impl std::fmt::Display for ParticipationType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ParticipationType {
            fn name(&self) -> String {
                "Participation Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA080)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ParticipationDateTime;
        impl std::fmt::Display for ParticipationDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ParticipationDateTime {
            fn name(&self) -> String {
                "Participation DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA082)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA082)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObserverType;
        impl std::fmt::Display for ObserverType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObserverType {
            fn name(&self) -> String {
                "Observer Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA084)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA084)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProcedureIdentifierCodeSequenceTrial;
        impl std::fmt::Display for ProcedureIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProcedureIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Procedure Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA085)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA085)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerifyingObserverIdentificationCodeSequence;
        impl std::fmt::Display for VerifyingObserverIdentificationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerifyingObserverIdentificationCodeSequence {
            fn name(&self) -> String {
                "Verifying Observer Identification Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA088)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA088)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObjectDirectoryBinaryIdentifierTrial;
        impl std::fmt::Display for ObjectDirectoryBinaryIdentifierTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObjectDirectoryBinaryIdentifierTrial {
            fn name(&self) -> String {
                "Object Directory Binary Identifier (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA089)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA089)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EquivalentCDADocumentSequence;
        impl std::fmt::Display for EquivalentCDADocumentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EquivalentCDADocumentSequence {
            fn name(&self) -> String {
                "Equivalent CDA Document Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA090)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA090)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedWaveformChannels;
        impl std::fmt::Display for ReferencedWaveformChannels {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedWaveformChannels {
            fn name(&self) -> String {
                "Referenced Waveform Channels".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA0B0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA0B0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2-2n"
            }
        }

        #[derive(Debug)]
        pub struct DateOfDocumentOrVerbalTransactionTrial;
        impl std::fmt::Display for DateOfDocumentOrVerbalTransactionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DateOfDocumentOrVerbalTransactionTrial {
            fn name(&self) -> String {
                "Date of Document or Verbal Transaction (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA110)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TimeOfDocumentCreationOrVerbalTransactionTrial;
        impl std::fmt::Display for TimeOfDocumentCreationOrVerbalTransactionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TimeOfDocumentCreationOrVerbalTransactionTrial {
            fn name(&self) -> String {
                "Time of Document Creation or Verbal Transaction (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA112)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA112)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DateTime;
        impl std::fmt::Display for DateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DateTime {
            fn name(&self) -> String {
                "DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA120)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA120)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Date;
        impl std::fmt::Display for Date {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Date {
            fn name(&self) -> String {
                "Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA121)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA121)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Time;
        impl std::fmt::Display for Time {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Time {
            fn name(&self) -> String {
                "Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA122)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA122)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PersonName;
        impl std::fmt::Display for PersonName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PersonName {
            fn name(&self) -> String {
                "Person Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA123)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA123)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UID;
        impl std::fmt::Display for UID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UID {
            fn name(&self) -> String {
                "UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA124)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA124)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReportStatusIDTrial;
        impl std::fmt::Display for ReportStatusIDTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReportStatusIDTrial {
            fn name(&self) -> String {
                "Report Status ID (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA125)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA125)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct TemporalRangeType;
        impl std::fmt::Display for TemporalRangeType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemporalRangeType {
            fn name(&self) -> String {
                "Temporal Range Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA130)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA130)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSamplePositions;
        impl std::fmt::Display for ReferencedSamplePositions {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSamplePositions {
            fn name(&self) -> String {
                "Referenced Sample Positions".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA132)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA132)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedFrameNumbers;
        impl std::fmt::Display for ReferencedFrameNumbers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedFrameNumbers {
            fn name(&self) -> String {
                "Referenced Frame Numbers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA136)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA136)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedTimeOffsets;
        impl std::fmt::Display for ReferencedTimeOffsets {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedTimeOffsets {
            fn name(&self) -> String {
                "Referenced Time Offsets".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA138)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA138)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedDateTime;
        impl std::fmt::Display for ReferencedDateTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedDateTime {
            fn name(&self) -> String {
                "Referenced DateTime".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA13A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA13A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct TextValue;
        impl std::fmt::Display for TextValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TextValue {
            fn name(&self) -> String {
                "Text Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA160)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA160)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FloatingPointValue;
        impl std::fmt::Display for FloatingPointValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FloatingPointValue {
            fn name(&self) -> String {
                "Floating Point Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA161)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA161)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct RationalNumeratorValue;
        impl std::fmt::Display for RationalNumeratorValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RationalNumeratorValue {
            fn name(&self) -> String {
                "Rational Numerator Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA162)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA162)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct RationalDenominatorValue;
        impl std::fmt::Display for RationalDenominatorValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RationalDenominatorValue {
            fn name(&self) -> String {
                "Rational Denominator Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA163)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA163)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ObservationCategoryCodeSequenceTrial;
        impl std::fmt::Display for ObservationCategoryCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationCategoryCodeSequenceTrial {
            fn name(&self) -> String {
                "Observation Category Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA167)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA167)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ConceptCodeSequence;
        impl std::fmt::Display for ConceptCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ConceptCodeSequence {
            fn name(&self) -> String {
                "Concept Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA168)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA168)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BibliographicCitationTrial;
        impl std::fmt::Display for BibliographicCitationTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BibliographicCitationTrial {
            fn name(&self) -> String {
                "Bibliographic Citation (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA16A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA16A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PurposeOfReferenceCodeSequence;
        impl std::fmt::Display for PurposeOfReferenceCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PurposeOfReferenceCodeSequence {
            fn name(&self) -> String {
                "Purpose of Reference Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA170)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA170)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationUID;
        impl std::fmt::Display for ObservationUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationUID {
            fn name(&self) -> String {
                "Observation UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA171)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA171)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedObservationUIDTrial;
        impl std::fmt::Display for ReferencedObservationUIDTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedObservationUIDTrial {
            fn name(&self) -> String {
                "Referenced Observation UID (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA172)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA172)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedObservationClassTrial;
        impl std::fmt::Display for ReferencedObservationClassTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedObservationClassTrial {
            fn name(&self) -> String {
                "Referenced Observation Class (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA173)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA173)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedObjectObservationClassTrial;
        impl std::fmt::Display for ReferencedObjectObservationClassTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedObjectObservationClassTrial {
            fn name(&self) -> String {
                "Referenced Object Observation Class (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA174)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA174)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnnotationGroupNumber;
        impl std::fmt::Display for AnnotationGroupNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnnotationGroupNumber {
            fn name(&self) -> String {
                "Annotation Group Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA180)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA180)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationDateTrial;
        impl std::fmt::Display for ObservationDateTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationDateTrial {
            fn name(&self) -> String {
                "Observation Date (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA192)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA192)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationTimeTrial;
        impl std::fmt::Display for ObservationTimeTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationTimeTrial {
            fn name(&self) -> String {
                "Observation Time (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA193)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA193)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasurementAutomationTrial;
        impl std::fmt::Display for MeasurementAutomationTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasurementAutomationTrial {
            fn name(&self) -> String {
                "Measurement Automation (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA194)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA194)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ModifierCodeSequence;
        impl std::fmt::Display for ModifierCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ModifierCodeSequence {
            fn name(&self) -> String {
                "Modifier Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA195)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA195)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IdentificationDescriptionTrial;
        impl std::fmt::Display for IdentificationDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdentificationDescriptionTrial {
            fn name(&self) -> String {
                "Identification Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA224)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA224)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CoordinatesSetGeometricTypeTrial;
        impl std::fmt::Display for CoordinatesSetGeometricTypeTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CoordinatesSetGeometricTypeTrial {
            fn name(&self) -> String {
                "Coordinates Set Geometric Type (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA290)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA290)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AlgorithmCodeSequenceTrial;
        impl std::fmt::Display for AlgorithmCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AlgorithmCodeSequenceTrial {
            fn name(&self) -> String {
                "Algorithm Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA296)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA296)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AlgorithmDescriptionTrial;
        impl std::fmt::Display for AlgorithmDescriptionTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AlgorithmDescriptionTrial {
            fn name(&self) -> String {
                "Algorithm Description (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA297)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA297)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PixelCoordinatesSetTrial;
        impl std::fmt::Display for PixelCoordinatesSetTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PixelCoordinatesSetTrial {
            fn name(&self) -> String {
                "Pixel Coordinates Set (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA29A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA29A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "2-2n"
            }
        }

        #[derive(Debug)]
        pub struct MeasuredValueSequence;
        impl std::fmt::Display for MeasuredValueSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasuredValueSequence {
            fn name(&self) -> String {
                "Measured Value Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA300)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA300)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumericValueQualifierCodeSequence;
        impl std::fmt::Display for NumericValueQualifierCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumericValueQualifierCodeSequence {
            fn name(&self) -> String {
                "Numeric Value Qualifier Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA301)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA301)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CurrentObserverTrial;
        impl std::fmt::Display for CurrentObserverTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CurrentObserverTrial {
            fn name(&self) -> String {
                "Current Observer (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA307)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA307)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumericValue;
        impl std::fmt::Display for NumericValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumericValue {
            fn name(&self) -> String {
                "Numeric Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA30A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA30A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedAccessionSequenceTrial;
        impl std::fmt::Display for ReferencedAccessionSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedAccessionSequenceTrial {
            fn name(&self) -> String {
                "Referenced Accession Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA313)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA313)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReportStatusCommentTrial;
        impl std::fmt::Display for ReportStatusCommentTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReportStatusCommentTrial {
            fn name(&self) -> String {
                "Report Status Comment (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA33A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA33A)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProcedureContextSequenceTrial;
        impl std::fmt::Display for ProcedureContextSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProcedureContextSequenceTrial {
            fn name(&self) -> String {
                "Procedure Context Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA340)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA340)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerbalSourceTrial;
        impl std::fmt::Display for VerbalSourceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerbalSourceTrial {
            fn name(&self) -> String {
                "Verbal Source (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA352)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA352)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AddressTrial;
        impl std::fmt::Display for AddressTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AddressTrial {
            fn name(&self) -> String {
                "Address (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA353)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA353)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TelephoneNumberTrial;
        impl std::fmt::Display for TelephoneNumberTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TelephoneNumberTrial {
            fn name(&self) -> String {
                "Telephone Number (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA354)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA354)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerbalSourceIdentifierCodeSequenceTrial;
        impl std::fmt::Display for VerbalSourceIdentifierCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerbalSourceIdentifierCodeSequenceTrial {
            fn name(&self) -> String {
                "Verbal Source Identifier Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA358)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA358)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PredecessorDocumentsSequence;
        impl std::fmt::Display for PredecessorDocumentsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PredecessorDocumentsSequence {
            fn name(&self) -> String {
                "Predecessor Documents Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA360)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA360)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedRequestSequence;
        impl std::fmt::Display for ReferencedRequestSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedRequestSequence {
            fn name(&self) -> String {
                "Referenced Request Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA370)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA370)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PerformedProcedureCodeSequence;
        impl std::fmt::Display for PerformedProcedureCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PerformedProcedureCodeSequence {
            fn name(&self) -> String {
                "Performed Procedure Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA372)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA372)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CurrentRequestedProcedureEvidenceSequence;
        impl std::fmt::Display for CurrentRequestedProcedureEvidenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CurrentRequestedProcedureEvidenceSequence {
            fn name(&self) -> String {
                "Current Requested Procedure Evidence Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA375)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA375)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReportDetailSequenceTrial;
        impl std::fmt::Display for ReportDetailSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReportDetailSequenceTrial {
            fn name(&self) -> String {
                "Report Detail Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA380)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA380)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PertinentOtherEvidenceSequence;
        impl std::fmt::Display for PertinentOtherEvidenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PertinentOtherEvidenceSequence {
            fn name(&self) -> String {
                "Pertinent Other Evidence Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA385)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA385)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HL7StructuredDocumentReferenceSequence;
        impl std::fmt::Display for HL7StructuredDocumentReferenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HL7StructuredDocumentReferenceSequence {
            fn name(&self) -> String {
                "HL7 Structured Document Reference Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA390)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA390)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationSubjectUIDTrial;
        impl std::fmt::Display for ObservationSubjectUIDTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationSubjectUIDTrial {
            fn name(&self) -> String {
                "Observation Subject UID (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA402)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA402)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationSubjectClassTrial;
        impl std::fmt::Display for ObservationSubjectClassTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationSubjectClassTrial {
            fn name(&self) -> String {
                "Observation Subject Class (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA403)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA403)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationSubjectTypeCodeSequenceTrial;
        impl std::fmt::Display for ObservationSubjectTypeCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationSubjectTypeCodeSequenceTrial {
            fn name(&self) -> String {
                "Observation Subject Type Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA404)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA404)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompletionFlag;
        impl std::fmt::Display for CompletionFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompletionFlag {
            fn name(&self) -> String {
                "Completion Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA491)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA491)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompletionFlagDescription;
        impl std::fmt::Display for CompletionFlagDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompletionFlagDescription {
            fn name(&self) -> String {
                "Completion Flag Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA492)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA492)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerificationFlag;
        impl std::fmt::Display for VerificationFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerificationFlag {
            fn name(&self) -> String {
                "Verification Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA493)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA493)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ArchiveRequested;
        impl std::fmt::Display for ArchiveRequested {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ArchiveRequested {
            fn name(&self) -> String {
                "Archive Requested".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA494)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA494)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PreliminaryFlag;
        impl std::fmt::Display for PreliminaryFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PreliminaryFlag {
            fn name(&self) -> String {
                "Preliminary Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA496)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA496)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentTemplateSequence;
        impl std::fmt::Display for ContentTemplateSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentTemplateSequence {
            fn name(&self) -> String {
                "Content Template Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA504)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA504)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IdenticalDocumentsSequence;
        impl std::fmt::Display for IdenticalDocumentsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IdenticalDocumentsSequence {
            fn name(&self) -> String {
                "Identical Documents Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA525)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA525)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObservationSubjectContextFlagTrial;
        impl std::fmt::Display for ObservationSubjectContextFlagTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObservationSubjectContextFlagTrial {
            fn name(&self) -> String {
                "Observation Subject Context Flag (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA600)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA600)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ObserverContextFlagTrial;
        impl std::fmt::Display for ObserverContextFlagTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObserverContextFlagTrial {
            fn name(&self) -> String {
                "Observer Context Flag (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA601)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA601)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ProcedureContextFlagTrial;
        impl std::fmt::Display for ProcedureContextFlagTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ProcedureContextFlagTrial {
            fn name(&self) -> String {
                "Procedure Context Flag (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA603)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA603)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentSequence;
        impl std::fmt::Display for ContentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentSequence {
            fn name(&self) -> String {
                "Content Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA730)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA730)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelationshipSequenceTrial;
        impl std::fmt::Display for RelationshipSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelationshipSequenceTrial {
            fn name(&self) -> String {
                "Relationship Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA731)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA731)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelationshipTypeCodeSequenceTrial;
        impl std::fmt::Display for RelationshipTypeCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelationshipTypeCodeSequenceTrial {
            fn name(&self) -> String {
                "Relationship Type Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA732)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA732)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LanguageCodeSequenceTrial;
        impl std::fmt::Display for LanguageCodeSequenceTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LanguageCodeSequenceTrial {
            fn name(&self) -> String {
                "Language Code Sequence (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA744)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA744)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TabulatedValuesSequence;
        impl std::fmt::Display for TabulatedValuesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TabulatedValuesSequence {
            fn name(&self) -> String {
                "Tabulated Values Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA801)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA801)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfTableRows;
        impl std::fmt::Display for NumberOfTableRows {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfTableRows {
            fn name(&self) -> String {
                "Number of Table Rows".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA802)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA802)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfTableColumns;
        impl std::fmt::Display for NumberOfTableColumns {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfTableColumns {
            fn name(&self) -> String {
                "Number of Table Columns".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA803)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA803)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TableRowNumber;
        impl std::fmt::Display for TableRowNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TableRowNumber {
            fn name(&self) -> String {
                "Table Row Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA804)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA804)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TableColumnNumber;
        impl std::fmt::Display for TableColumnNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TableColumnNumber {
            fn name(&self) -> String {
                "Table Column Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA805)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA805)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TableRowDefinitionSequence;
        impl std::fmt::Display for TableRowDefinitionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TableRowDefinitionSequence {
            fn name(&self) -> String {
                "Table Row Definition Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA806)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA806)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TableColumnDefinitionSequence;
        impl std::fmt::Display for TableColumnDefinitionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TableColumnDefinitionSequence {
            fn name(&self) -> String {
                "Table Column Definition Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA807)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA807)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CellValuesSequence;
        impl std::fmt::Display for CellValuesSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CellValuesSequence {
            fn name(&self) -> String {
                "Cell Values Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA808)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA808)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UniformResourceLocatorTrial;
        impl std::fmt::Display for UniformResourceLocatorTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UniformResourceLocatorTrial {
            fn name(&self) -> String {
                "Uniform Resource Locator (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xA992)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xA992)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WaveformAnnotationSequence;
        impl std::fmt::Display for WaveformAnnotationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WaveformAnnotationSequence {
            fn name(&self) -> String {
                "Waveform Annotation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xB020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xB020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateIdentifier;
        impl std::fmt::Display for TemplateIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateIdentifier {
            fn name(&self) -> String {
                "Template Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB00)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB00)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateVersion;
        impl std::fmt::Display for TemplateVersion {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateVersion {
            fn name(&self) -> String {
                "Template Version".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB06)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB06)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateLocalVersion;
        impl std::fmt::Display for TemplateLocalVersion {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateLocalVersion {
            fn name(&self) -> String {
                "Template Local Version".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB07)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB07)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateExtensionFlag;
        impl std::fmt::Display for TemplateExtensionFlag {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateExtensionFlag {
            fn name(&self) -> String {
                "Template Extension Flag".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB0B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB0B)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateExtensionOrganizationUID;
        impl std::fmt::Display for TemplateExtensionOrganizationUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateExtensionOrganizationUID {
            fn name(&self) -> String {
                "Template Extension Organization UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB0C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB0C)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TemplateExtensionCreatorUID;
        impl std::fmt::Display for TemplateExtensionCreatorUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TemplateExtensionCreatorUID {
            fn name(&self) -> String {
                "Template Extension Creator UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB0D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB0D)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedContentItemIdentifier;
        impl std::fmt::Display for ReferencedContentItemIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedContentItemIdentifier {
            fn name(&self) -> String {
                "Referenced Content Item Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xDB73)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xDB73)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct HL7InstanceIdentifier;
        impl std::fmt::Display for HL7InstanceIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HL7InstanceIdentifier {
            fn name(&self) -> String {
                "HL7 Instance Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HL7DocumentEffectiveTime;
        impl std::fmt::Display for HL7DocumentEffectiveTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HL7DocumentEffectiveTime {
            fn name(&self) -> String {
                "HL7 Document Effective Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DT")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HL7DocumentTypeCodeSequence;
        impl std::fmt::Display for HL7DocumentTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HL7DocumentTypeCodeSequence {
            fn name(&self) -> String {
                "HL7 Document Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE006)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DocumentClassCodeSequence;
        impl std::fmt::Display for DocumentClassCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DocumentClassCodeSequence {
            fn name(&self) -> String {
                "Document Class Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RetrieveURI;
        impl std::fmt::Display for RetrieveURI {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RetrieveURI {
            fn name(&self) -> String {
                "Retrieve URI".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UR")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RetrieveLocationUID;
        impl std::fmt::Display for RetrieveLocationUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RetrieveLocationUID {
            fn name(&self) -> String {
                "Retrieve Location UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TypeOfInstances;
        impl std::fmt::Display for TypeOfInstances {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TypeOfInstances {
            fn name(&self) -> String {
                "Type of Instances".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DICOMRetrievalSequence;
        impl std::fmt::Display for DICOMRetrievalSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DICOMRetrievalSequence {
            fn name(&self) -> String {
                "DICOM Retrieval Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DICOMMediaRetrievalSequence;
        impl std::fmt::Display for DICOMMediaRetrievalSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DICOMMediaRetrievalSequence {
            fn name(&self) -> String {
                "DICOM Media Retrieval Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE022)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WADORetrievalSequence;
        impl std::fmt::Display for WADORetrievalSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WADORetrievalSequence {
            fn name(&self) -> String {
                "WADO Retrieval Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE023)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct XDSRetrievalSequence;
        impl std::fmt::Display for XDSRetrievalSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for XDSRetrievalSequence {
            fn name(&self) -> String {
                "XDS Retrieval Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE024)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WADORSRetrievalSequence;
        impl std::fmt::Display for WADORSRetrievalSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WADORSRetrievalSequence {
            fn name(&self) -> String {
                "WADO-RS Retrieval Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE025)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE025)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RepositoryUniqueID;
        impl std::fmt::Display for RepositoryUniqueID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RepositoryUniqueID {
            fn name(&self) -> String {
                "Repository Unique ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct HomeCommunityID;
        impl std::fmt::Display for HomeCommunityID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HomeCommunityID {
            fn name(&self) -> String {
                "Home Community ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0040, 0xE031)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0040
            }
            fn element(&self) -> Option<u16> {
                Some(0xE031)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct Patient;
    impl std::fmt::Display for Patient {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for Patient {
        fn name(&self) -> String {
            "Patient".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0010, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0010
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl Patient {
        pub type PatientName = patient::PatientName;
        pub type PatientID = patient::PatientID;
        pub type IssuerOfPatientID = patient::IssuerOfPatientID;
        pub type TypeOfPatientID = patient::TypeOfPatientID;
        pub type IssuerOfPatientIDQualifiersSequence = patient::IssuerOfPatientIDQualifiersSequence;
        pub type SourcePatientGroupIdentificationSequence =
            patient::SourcePatientGroupIdentificationSequence;
        pub type GroupOfPatientsIdentificationSequence =
            patient::GroupOfPatientsIdentificationSequence;
        pub type SubjectRelativePositionInImage = patient::SubjectRelativePositionInImage;
        pub type PatientBirthDate = patient::PatientBirthDate;
        pub type PatientBirthTime = patient::PatientBirthTime;
        pub type PatientBirthDateInAlternativeCalendar =
            patient::PatientBirthDateInAlternativeCalendar;
        pub type PatientDeathDateInAlternativeCalendar =
            patient::PatientDeathDateInAlternativeCalendar;
        pub type PatientAlternativeCalendar = patient::PatientAlternativeCalendar;
        pub type PatientSex = patient::PatientSex;
        pub type PatientInsurancePlanCodeSequence = patient::PatientInsurancePlanCodeSequence;
        pub type PatientPrimaryLanguageCodeSequence = patient::PatientPrimaryLanguageCodeSequence;
        pub type PatientPrimaryLanguageModifierCodeSequence =
            patient::PatientPrimaryLanguageModifierCodeSequence;
        pub type QualityControlSubject = patient::QualityControlSubject;
        pub type QualityControlSubjectTypeCodeSequence =
            patient::QualityControlSubjectTypeCodeSequence;
        pub type StrainDescription = patient::StrainDescription;
        pub type StrainNomenclature = patient::StrainNomenclature;
        pub type StrainStockNumber = patient::StrainStockNumber;
        pub type StrainSourceRegistryCodeSequence = patient::StrainSourceRegistryCodeSequence;
        pub type StrainStockSequence = patient::StrainStockSequence;
        pub type StrainSource = patient::StrainSource;
        pub type StrainAdditionalInformation = patient::StrainAdditionalInformation;
        pub type StrainCodeSequence = patient::StrainCodeSequence;
        pub type GeneticModificationsSequence = patient::GeneticModificationsSequence;
        pub type GeneticModificationsDescription = patient::GeneticModificationsDescription;
        pub type GeneticModificationsNomenclature = patient::GeneticModificationsNomenclature;
        pub type GeneticModificationsCodeSequence = patient::GeneticModificationsCodeSequence;
        pub type OtherPatientIDs = patient::OtherPatientIDs;
        pub type OtherPatientNames = patient::OtherPatientNames;
        pub type OtherPatientIDsSequence = patient::OtherPatientIDsSequence;
        pub type PatientBirthName = patient::PatientBirthName;
        pub type PatientAge = patient::PatientAge;
        pub type PatientSize = patient::PatientSize;
        pub type PatientSizeCodeSequence = patient::PatientSizeCodeSequence;
        pub type PatientBodyMassIndex = patient::PatientBodyMassIndex;
        pub type MeasuredAPDimension = patient::MeasuredAPDimension;
        pub type MeasuredLateralDimension = patient::MeasuredLateralDimension;
        pub type PatientWeight = patient::PatientWeight;
        pub type PatientAddress = patient::PatientAddress;
        pub type InsurancePlanIdentification = patient::InsurancePlanIdentification;
        pub type PatientMotherBirthName = patient::PatientMotherBirthName;
        pub type MilitaryRank = patient::MilitaryRank;
        pub type BranchOfService = patient::BranchOfService;
        pub type MedicalRecordLocator = patient::MedicalRecordLocator;
        pub type ReferencedPatientPhotoSequence = patient::ReferencedPatientPhotoSequence;
        pub type MedicalAlerts = patient::MedicalAlerts;
        pub type Allergies = patient::Allergies;
        pub type CountryOfResidence = patient::CountryOfResidence;
        pub type RegionOfResidence = patient::RegionOfResidence;
        pub type PatientTelephoneNumbers = patient::PatientTelephoneNumbers;
        pub type PatientTelecomInformation = patient::PatientTelecomInformation;
        pub type EthnicGroup = patient::EthnicGroup;
        pub type Occupation = patient::Occupation;
        pub type SmokingStatus = patient::SmokingStatus;
        pub type AdditionalPatientHistory = patient::AdditionalPatientHistory;
        pub type PregnancyStatus = patient::PregnancyStatus;
        pub type LastMenstrualDate = patient::LastMenstrualDate;
        pub type PatientReligiousPreference = patient::PatientReligiousPreference;
        pub type PatientSpeciesDescription = patient::PatientSpeciesDescription;
        pub type PatientSpeciesCodeSequence = patient::PatientSpeciesCodeSequence;
        pub type PatientSexNeutered = patient::PatientSexNeutered;
        pub type AnatomicalOrientationType = patient::AnatomicalOrientationType;
        pub type PatientBreedDescription = patient::PatientBreedDescription;
        pub type PatientBreedCodeSequence = patient::PatientBreedCodeSequence;
        pub type BreedRegistrationSequence = patient::BreedRegistrationSequence;
        pub type BreedRegistrationNumber = patient::BreedRegistrationNumber;
        pub type BreedRegistryCodeSequence = patient::BreedRegistryCodeSequence;
        pub type ResponsiblePerson = patient::ResponsiblePerson;
        pub type ResponsiblePersonRole = patient::ResponsiblePersonRole;
        pub type ResponsibleOrganization = patient::ResponsibleOrganization;
        pub type PatientComments = patient::PatientComments;
        pub type ExaminedBodyThickness = patient::ExaminedBodyThickness;
    }

    pub mod patient {
        #[derive(Debug)]
        pub struct PatientName;
        impl std::fmt::Display for PatientName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientName {
            fn name(&self) -> String {
                "Patient's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientID;
        impl std::fmt::Display for PatientID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientID {
            fn name(&self) -> String {
                "Patient ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssuerOfPatientID;
        impl std::fmt::Display for IssuerOfPatientID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssuerOfPatientID {
            fn name(&self) -> String {
                "Issuer of Patient ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TypeOfPatientID;
        impl std::fmt::Display for TypeOfPatientID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TypeOfPatientID {
            fn name(&self) -> String {
                "Type of Patient ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0022)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct IssuerOfPatientIDQualifiersSequence;
        impl std::fmt::Display for IssuerOfPatientIDQualifiersSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for IssuerOfPatientIDQualifiersSequence {
            fn name(&self) -> String {
                "Issuer of Patient ID Qualifiers Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0024)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SourcePatientGroupIdentificationSequence;
        impl std::fmt::Display for SourcePatientGroupIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SourcePatientGroupIdentificationSequence {
            fn name(&self) -> String {
                "Source Patient Group Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0026)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0026)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GroupOfPatientsIdentificationSequence;
        impl std::fmt::Display for GroupOfPatientsIdentificationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GroupOfPatientsIdentificationSequence {
            fn name(&self) -> String {
                "Group of Patients Identification Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0027)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0027)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SubjectRelativePositionInImage;
        impl std::fmt::Display for SubjectRelativePositionInImage {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SubjectRelativePositionInImage {
            fn name(&self) -> String {
                "Subject Relative Position in Image".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0028)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0028)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct PatientBirthDate;
        impl std::fmt::Display for PatientBirthDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBirthDate {
            fn name(&self) -> String {
                "Patient's Birth Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBirthTime;
        impl std::fmt::Display for PatientBirthTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBirthTime {
            fn name(&self) -> String {
                "Patient's Birth Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0032)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0032)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBirthDateInAlternativeCalendar;
        impl std::fmt::Display for PatientBirthDateInAlternativeCalendar {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBirthDateInAlternativeCalendar {
            fn name(&self) -> String {
                "Patient's Birth Date in Alternative Calendar".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0033)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0033)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientDeathDateInAlternativeCalendar;
        impl std::fmt::Display for PatientDeathDateInAlternativeCalendar {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientDeathDateInAlternativeCalendar {
            fn name(&self) -> String {
                "Patient's Death Date in Alternative Calendar".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0034)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0034)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientAlternativeCalendar;
        impl std::fmt::Display for PatientAlternativeCalendar {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientAlternativeCalendar {
            fn name(&self) -> String {
                "Patient's Alternative Calendar".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0035)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0035)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSex;
        impl std::fmt::Display for PatientSex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSex {
            fn name(&self) -> String {
                "Patient's Sex".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientInsurancePlanCodeSequence;
        impl std::fmt::Display for PatientInsurancePlanCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientInsurancePlanCodeSequence {
            fn name(&self) -> String {
                "Patient's Insurance Plan Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0050)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientPrimaryLanguageCodeSequence;
        impl std::fmt::Display for PatientPrimaryLanguageCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientPrimaryLanguageCodeSequence {
            fn name(&self) -> String {
                "Patient's Primary Language Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0101)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0101)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientPrimaryLanguageModifierCodeSequence;
        impl std::fmt::Display for PatientPrimaryLanguageModifierCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientPrimaryLanguageModifierCodeSequence {
            fn name(&self) -> String {
                "Patient's Primary Language Modifier Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0102)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0102)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QualityControlSubject;
        impl std::fmt::Display for QualityControlSubject {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QualityControlSubject {
            fn name(&self) -> String {
                "Quality Control Subject".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0200)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0200)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct QualityControlSubjectTypeCodeSequence;
        impl std::fmt::Display for QualityControlSubjectTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for QualityControlSubjectTypeCodeSequence {
            fn name(&self) -> String {
                "Quality Control Subject Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0201)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0201)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainDescription;
        impl std::fmt::Display for StrainDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainDescription {
            fn name(&self) -> String {
                "Strain Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0212)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UC")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0212)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainNomenclature;
        impl std::fmt::Display for StrainNomenclature {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainNomenclature {
            fn name(&self) -> String {
                "Strain Nomenclature".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0213)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0213)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainStockNumber;
        impl std::fmt::Display for StrainStockNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainStockNumber {
            fn name(&self) -> String {
                "Strain Stock Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0214)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0214)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainSourceRegistryCodeSequence;
        impl std::fmt::Display for StrainSourceRegistryCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainSourceRegistryCodeSequence {
            fn name(&self) -> String {
                "Strain Source Registry Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0215)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0215)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainStockSequence;
        impl std::fmt::Display for StrainStockSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainStockSequence {
            fn name(&self) -> String {
                "Strain Stock Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0216)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0216)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainSource;
        impl std::fmt::Display for StrainSource {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainSource {
            fn name(&self) -> String {
                "Strain Source".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0217)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0217)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainAdditionalInformation;
        impl std::fmt::Display for StrainAdditionalInformation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainAdditionalInformation {
            fn name(&self) -> String {
                "Strain Additional Information".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0218)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UT")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0218)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct StrainCodeSequence;
        impl std::fmt::Display for StrainCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for StrainCodeSequence {
            fn name(&self) -> String {
                "Strain Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0219)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0219)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneticModificationsSequence;
        impl std::fmt::Display for GeneticModificationsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneticModificationsSequence {
            fn name(&self) -> String {
                "Genetic Modifications Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0221)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0221)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneticModificationsDescription;
        impl std::fmt::Display for GeneticModificationsDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneticModificationsDescription {
            fn name(&self) -> String {
                "Genetic Modifications Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0222)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UC")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0222)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneticModificationsNomenclature;
        impl std::fmt::Display for GeneticModificationsNomenclature {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneticModificationsNomenclature {
            fn name(&self) -> String {
                "Genetic Modifications Nomenclature".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0223)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0223)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeneticModificationsCodeSequence;
        impl std::fmt::Display for GeneticModificationsCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeneticModificationsCodeSequence {
            fn name(&self) -> String {
                "Genetic Modifications Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x0229)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x0229)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct OtherPatientIDs;
        impl std::fmt::Display for OtherPatientIDs {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OtherPatientIDs {
            fn name(&self) -> String {
                "Other Patient IDs".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1000)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct OtherPatientNames;
        impl std::fmt::Display for OtherPatientNames {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OtherPatientNames {
            fn name(&self) -> String {
                "Other Patient Names".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct OtherPatientIDsSequence;
        impl std::fmt::Display for OtherPatientIDsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for OtherPatientIDsSequence {
            fn name(&self) -> String {
                "Other Patient IDs Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBirthName;
        impl std::fmt::Display for PatientBirthName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBirthName {
            fn name(&self) -> String {
                "Patient's Birth Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientAge;
        impl std::fmt::Display for PatientAge {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientAge {
            fn name(&self) -> String {
                "Patient's Age".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("AS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSize;
        impl std::fmt::Display for PatientSize {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSize {
            fn name(&self) -> String {
                "Patient's Size".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSizeCodeSequence;
        impl std::fmt::Display for PatientSizeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSizeCodeSequence {
            fn name(&self) -> String {
                "Patient's Size Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBodyMassIndex;
        impl std::fmt::Display for PatientBodyMassIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBodyMassIndex {
            fn name(&self) -> String {
                "Patient's Body Mass Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1022)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasuredAPDimension;
        impl std::fmt::Display for MeasuredAPDimension {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasuredAPDimension {
            fn name(&self) -> String {
                "Measured AP Dimension".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1023)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MeasuredLateralDimension;
        impl std::fmt::Display for MeasuredLateralDimension {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MeasuredLateralDimension {
            fn name(&self) -> String {
                "Measured Lateral Dimension".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1024)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientWeight;
        impl std::fmt::Display for PatientWeight {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientWeight {
            fn name(&self) -> String {
                "Patient's Weight".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1030)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1030)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientAddress;
        impl std::fmt::Display for PatientAddress {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientAddress {
            fn name(&self) -> String {
                "Patient's Address".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1040)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InsurancePlanIdentification;
        impl std::fmt::Display for InsurancePlanIdentification {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InsurancePlanIdentification {
            fn name(&self) -> String {
                "Insurance Plan Identification".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1050)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PatientMotherBirthName;
        impl std::fmt::Display for PatientMotherBirthName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientMotherBirthName {
            fn name(&self) -> String {
                "Patient's Mother's Birth Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MilitaryRank;
        impl std::fmt::Display for MilitaryRank {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MilitaryRank {
            fn name(&self) -> String {
                "Military Rank".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1080)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BranchOfService;
        impl std::fmt::Display for BranchOfService {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BranchOfService {
            fn name(&self) -> String {
                "Branch of Service".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1081)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1081)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MedicalRecordLocator;
        impl std::fmt::Display for MedicalRecordLocator {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MedicalRecordLocator {
            fn name(&self) -> String {
                "Medical Record Locator".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1090)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1090)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedPatientPhotoSequence;
        impl std::fmt::Display for ReferencedPatientPhotoSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedPatientPhotoSequence {
            fn name(&self) -> String {
                "Referenced Patient Photo Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x1100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x1100)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MedicalAlerts;
        impl std::fmt::Display for MedicalAlerts {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MedicalAlerts {
            fn name(&self) -> String {
                "Medical Alerts".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2000)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct Allergies;
        impl std::fmt::Display for Allergies {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Allergies {
            fn name(&self) -> String {
                "Allergies".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2110)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2110)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct CountryOfResidence;
        impl std::fmt::Display for CountryOfResidence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CountryOfResidence {
            fn name(&self) -> String {
                "Country of Residence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2150)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2150)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RegionOfResidence;
        impl std::fmt::Display for RegionOfResidence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RegionOfResidence {
            fn name(&self) -> String {
                "Region of Residence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2152)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2152)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientTelephoneNumbers;
        impl std::fmt::Display for PatientTelephoneNumbers {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientTelephoneNumbers {
            fn name(&self) -> String {
                "Patient's Telephone Numbers".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2154)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2154)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct PatientTelecomInformation;
        impl std::fmt::Display for PatientTelecomInformation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientTelecomInformation {
            fn name(&self) -> String {
                "Patient's Telecom Information".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2155)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2155)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct EthnicGroup;
        impl std::fmt::Display for EthnicGroup {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for EthnicGroup {
            fn name(&self) -> String {
                "Ethnic Group".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2160)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2160)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Occupation;
        impl std::fmt::Display for Occupation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Occupation {
            fn name(&self) -> String {
                "Occupation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2180)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2180)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SmokingStatus;
        impl std::fmt::Display for SmokingStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SmokingStatus {
            fn name(&self) -> String {
                "Smoking Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x21A0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x21A0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AdditionalPatientHistory;
        impl std::fmt::Display for AdditionalPatientHistory {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AdditionalPatientHistory {
            fn name(&self) -> String {
                "Additional Patient History".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x21B0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x21B0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PregnancyStatus;
        impl std::fmt::Display for PregnancyStatus {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PregnancyStatus {
            fn name(&self) -> String {
                "Pregnancy Status".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x21C0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x21C0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LastMenstrualDate;
        impl std::fmt::Display for LastMenstrualDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LastMenstrualDate {
            fn name(&self) -> String {
                "Last Menstrual Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x21D0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x21D0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientReligiousPreference;
        impl std::fmt::Display for PatientReligiousPreference {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientReligiousPreference {
            fn name(&self) -> String {
                "Patient's Religious Preference".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x21F0)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x21F0)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSpeciesDescription;
        impl std::fmt::Display for PatientSpeciesDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSpeciesDescription {
            fn name(&self) -> String {
                "Patient Species Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2201)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2201)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSpeciesCodeSequence;
        impl std::fmt::Display for PatientSpeciesCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSpeciesCodeSequence {
            fn name(&self) -> String {
                "Patient Species Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2202)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2202)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientSexNeutered;
        impl std::fmt::Display for PatientSexNeutered {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientSexNeutered {
            fn name(&self) -> String {
                "Patient's Sex Neutered".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2203)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2203)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnatomicalOrientationType;
        impl std::fmt::Display for AnatomicalOrientationType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnatomicalOrientationType {
            fn name(&self) -> String {
                "Anatomical Orientation Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2210)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2210)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBreedDescription;
        impl std::fmt::Display for PatientBreedDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBreedDescription {
            fn name(&self) -> String {
                "Patient Breed Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2292)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2292)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientBreedCodeSequence;
        impl std::fmt::Display for PatientBreedCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientBreedCodeSequence {
            fn name(&self) -> String {
                "Patient Breed Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2293)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2293)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BreedRegistrationSequence;
        impl std::fmt::Display for BreedRegistrationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BreedRegistrationSequence {
            fn name(&self) -> String {
                "Breed Registration Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2294)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2294)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BreedRegistrationNumber;
        impl std::fmt::Display for BreedRegistrationNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BreedRegistrationNumber {
            fn name(&self) -> String {
                "Breed Registration Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2295)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2295)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BreedRegistryCodeSequence;
        impl std::fmt::Display for BreedRegistryCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BreedRegistryCodeSequence {
            fn name(&self) -> String {
                "Breed Registry Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2296)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2296)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ResponsiblePerson;
        impl std::fmt::Display for ResponsiblePerson {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ResponsiblePerson {
            fn name(&self) -> String {
                "Responsible Person".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2297)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2297)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ResponsiblePersonRole;
        impl std::fmt::Display for ResponsiblePersonRole {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ResponsiblePersonRole {
            fn name(&self) -> String {
                "Responsible Person Role".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2298)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2298)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ResponsibleOrganization;
        impl std::fmt::Display for ResponsibleOrganization {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ResponsibleOrganization {
            fn name(&self) -> String {
                "Responsible Organization".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x2299)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x2299)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatientComments;
        impl std::fmt::Display for PatientComments {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatientComments {
            fn name(&self) -> String {
                "Patient Comments".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x4000)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LT")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x4000)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ExaminedBodyThickness;
        impl std::fmt::Display for ExaminedBodyThickness {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ExaminedBodyThickness {
            fn name(&self) -> String {
                "Examined Body Thickness".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0010, 0x9431)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0010
            }
            fn element(&self) -> Option<u16> {
                Some(0x9431)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }

    #[derive(Debug)]
    pub struct ViewPosition;
    impl std::fmt::Display for ViewPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(f, "{:#?}", self)
        }
    }

    impl crate::core::tag::DicomTag for ViewPosition {
        fn name(&self) -> String {
            "ViewPosition".to_string()
        }
        fn tag(&self) -> (u16, u16) {
            (0x0070, 0x0000)
        }
        fn vr(&self) -> crate::core::tag::VisualRepresentation {
            crate::core::tag::VisualRepresentation::new("")
        }
        fn group(&self) -> u16 {
            0x0070
        }
        fn element(&self) -> Option<u16> {
            None
        }
        fn is_deprecated(&self) -> bool {
            false
        }
        fn multiplicity(&self) -> &str {
            ""
        }
    }

    impl ViewPosition {
        pub type GraphicAnnotationSequence = viewposition::GraphicAnnotationSequence;
        pub type GraphicLayer = viewposition::GraphicLayer;
        pub type BoundingBoxAnnotationUnits = viewposition::BoundingBoxAnnotationUnits;
        pub type AnchorPointAnnotationUnits = viewposition::AnchorPointAnnotationUnits;
        pub type GraphicAnnotationUnits = viewposition::GraphicAnnotationUnits;
        pub type UnformattedTextValue = viewposition::UnformattedTextValue;
        pub type TextObjectSequence = viewposition::TextObjectSequence;
        pub type GraphicObjectSequence = viewposition::GraphicObjectSequence;
        pub type BoundingBoxTopLeftHandCorner = viewposition::BoundingBoxTopLeftHandCorner;
        pub type BoundingBoxBottomRightHandCorner = viewposition::BoundingBoxBottomRightHandCorner;
        pub type BoundingBoxTextHorizontalJustification =
            viewposition::BoundingBoxTextHorizontalJustification;
        pub type AnchorPoint = viewposition::AnchorPoint;
        pub type AnchorPointVisibility = viewposition::AnchorPointVisibility;
        pub type GraphicDimensions = viewposition::GraphicDimensions;
        pub type NumberOfGraphicPoints = viewposition::NumberOfGraphicPoints;
        pub type GraphicData = viewposition::GraphicData;
        pub type GraphicType = viewposition::GraphicType;
        pub type GraphicFilled = viewposition::GraphicFilled;
        pub type ImageRotationRetired = viewposition::ImageRotationRetired;
        pub type ImageHorizontalFlip = viewposition::ImageHorizontalFlip;
        pub type ImageRotation = viewposition::ImageRotation;
        pub type DisplayedAreaTopLeftHandCornerTrial =
            viewposition::DisplayedAreaTopLeftHandCornerTrial;
        pub type DisplayedAreaBottomRightHandCornerTrial =
            viewposition::DisplayedAreaBottomRightHandCornerTrial;
        pub type DisplayedAreaTopLeftHandCorner = viewposition::DisplayedAreaTopLeftHandCorner;
        pub type DisplayedAreaBottomRightHandCorner =
            viewposition::DisplayedAreaBottomRightHandCorner;
        pub type DisplayedAreaSelectionSequence = viewposition::DisplayedAreaSelectionSequence;
        pub type GraphicLayerSequence = viewposition::GraphicLayerSequence;
        pub type GraphicLayerOrder = viewposition::GraphicLayerOrder;
        pub type GraphicLayerRecommendedDisplayGrayscaleValue =
            viewposition::GraphicLayerRecommendedDisplayGrayscaleValue;
        pub type GraphicLayerRecommendedDisplayRGBValue =
            viewposition::GraphicLayerRecommendedDisplayRGBValue;
        pub type GraphicLayerDescription = viewposition::GraphicLayerDescription;
        pub type ContentLabel = viewposition::ContentLabel;
        pub type ContentDescription = viewposition::ContentDescription;
        pub type PresentationCreationDate = viewposition::PresentationCreationDate;
        pub type PresentationCreationTime = viewposition::PresentationCreationTime;
        pub type ContentCreatorName = viewposition::ContentCreatorName;
        pub type ContentCreatorIdentificationCodeSequence =
            viewposition::ContentCreatorIdentificationCodeSequence;
        pub type AlternateContentDescriptionSequence =
            viewposition::AlternateContentDescriptionSequence;
        pub type PresentationSizeMode = viewposition::PresentationSizeMode;
        pub type PresentationPixelSpacing = viewposition::PresentationPixelSpacing;
        pub type PresentationPixelAspectRatio = viewposition::PresentationPixelAspectRatio;
        pub type PresentationPixelMagnificationRatio =
            viewposition::PresentationPixelMagnificationRatio;
        pub type GraphicGroupLabel = viewposition::GraphicGroupLabel;
        pub type GraphicGroupDescription = viewposition::GraphicGroupDescription;
        pub type CompoundGraphicSequence = viewposition::CompoundGraphicSequence;
        pub type CompoundGraphicInstanceID = viewposition::CompoundGraphicInstanceID;
        pub type FontName = viewposition::FontName;
        pub type FontNameType = viewposition::FontNameType;
        pub type CSSFontName = viewposition::CSSFontName;
        pub type RotationAngle = viewposition::RotationAngle;
        pub type TextStyleSequence = viewposition::TextStyleSequence;
        pub type LineStyleSequence = viewposition::LineStyleSequence;
        pub type FillStyleSequence = viewposition::FillStyleSequence;
        pub type GraphicGroupSequence = viewposition::GraphicGroupSequence;
        pub type TextColorCIELabValue = viewposition::TextColorCIELabValue;
        pub type HorizontalAlignment = viewposition::HorizontalAlignment;
        pub type VerticalAlignment = viewposition::VerticalAlignment;
        pub type ShadowStyle = viewposition::ShadowStyle;
        pub type ShadowOffsetX = viewposition::ShadowOffsetX;
        pub type ShadowOffsetY = viewposition::ShadowOffsetY;
        pub type ShadowColorCIELabValue = viewposition::ShadowColorCIELabValue;
        pub type Underlined = viewposition::Underlined;
        pub type Bold = viewposition::Bold;
        pub type Italic = viewposition::Italic;
        pub type PatternOnColorCIELabValue = viewposition::PatternOnColorCIELabValue;
        pub type PatternOffColorCIELabValue = viewposition::PatternOffColorCIELabValue;
        pub type LineThickness = viewposition::LineThickness;
        pub type LineDashingStyle = viewposition::LineDashingStyle;
        pub type LinePattern = viewposition::LinePattern;
        pub type FillPattern = viewposition::FillPattern;
        pub type FillMode = viewposition::FillMode;
        pub type ShadowOpacity = viewposition::ShadowOpacity;
        pub type GapLength = viewposition::GapLength;
        pub type DiameterOfVisibility = viewposition::DiameterOfVisibility;
        pub type RotationPoint = viewposition::RotationPoint;
        pub type TickAlignment = viewposition::TickAlignment;
        pub type ShowTickLabel = viewposition::ShowTickLabel;
        pub type TickLabelAlignment = viewposition::TickLabelAlignment;
        pub type CompoundGraphicUnits = viewposition::CompoundGraphicUnits;
        pub type PatternOnOpacity = viewposition::PatternOnOpacity;
        pub type PatternOffOpacity = viewposition::PatternOffOpacity;
        pub type MajorTicksSequence = viewposition::MajorTicksSequence;
        pub type TickPosition = viewposition::TickPosition;
        pub type TickLabel = viewposition::TickLabel;
        pub type CompoundGraphicType = viewposition::CompoundGraphicType;
        pub type GraphicGroupID = viewposition::GraphicGroupID;
        pub type ShapeType = viewposition::ShapeType;
        pub type RegistrationSequence = viewposition::RegistrationSequence;
        pub type MatrixRegistrationSequence = viewposition::MatrixRegistrationSequence;
        pub type MatrixSequence = viewposition::MatrixSequence;
        pub type FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix =
            viewposition::FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix;
        pub type FrameOfReferenceTransformationMatrixType =
            viewposition::FrameOfReferenceTransformationMatrixType;
        pub type RegistrationTypeCodeSequence = viewposition::RegistrationTypeCodeSequence;
        pub type FiducialDescription = viewposition::FiducialDescription;
        pub type FiducialIdentifier = viewposition::FiducialIdentifier;
        pub type FiducialIdentifierCodeSequence = viewposition::FiducialIdentifierCodeSequence;
        pub type ContourUncertaintyRadius = viewposition::ContourUncertaintyRadius;
        pub type UsedFiducialsSequence = viewposition::UsedFiducialsSequence;
        pub type UsedRTStructureSetROISequence = viewposition::UsedRTStructureSetROISequence;
        pub type GraphicCoordinatesDataSequence = viewposition::GraphicCoordinatesDataSequence;
        pub type FiducialUID = viewposition::FiducialUID;
        pub type ReferencedFiducialUID = viewposition::ReferencedFiducialUID;
        pub type FiducialSetSequence = viewposition::FiducialSetSequence;
        pub type FiducialSequence = viewposition::FiducialSequence;
        pub type FiducialsPropertyCategoryCodeSequence =
            viewposition::FiducialsPropertyCategoryCodeSequence;
        pub type GraphicLayerRecommendedDisplayCIELabValue =
            viewposition::GraphicLayerRecommendedDisplayCIELabValue;
        pub type BlendingSequence = viewposition::BlendingSequence;
        pub type RelativeOpacity = viewposition::RelativeOpacity;
        pub type ReferencedSpatialRegistrationSequence =
            viewposition::ReferencedSpatialRegistrationSequence;
        pub type BlendingPosition = viewposition::BlendingPosition;
        pub type PresentationDisplayCollectionUID = viewposition::PresentationDisplayCollectionUID;
        pub type PresentationSequenceCollectionUID =
            viewposition::PresentationSequenceCollectionUID;
        pub type PresentationSequencePositionIndex =
            viewposition::PresentationSequencePositionIndex;
        pub type RenderedImageReferenceSequence = viewposition::RenderedImageReferenceSequence;
        pub type VolumetricPresentationStateInputSequence =
            viewposition::VolumetricPresentationStateInputSequence;
        pub type PresentationInputType = viewposition::PresentationInputType;
        pub type InputSequencePositionIndex = viewposition::InputSequencePositionIndex;
        pub type Crop = viewposition::Crop;
        pub type CroppingSpecificationIndex = viewposition::CroppingSpecificationIndex;
        pub type CompositingMethod = viewposition::CompositingMethod;
        pub type VolumetricPresentationInputNumber =
            viewposition::VolumetricPresentationInputNumber;
        pub type ImageVolumeGeometry = viewposition::ImageVolumeGeometry;
        pub type VolumetricPresentationInputSetUID =
            viewposition::VolumetricPresentationInputSetUID;
        pub type VolumetricPresentationInputSetSequence =
            viewposition::VolumetricPresentationInputSetSequence;
        pub type GlobalCrop = viewposition::GlobalCrop;
        pub type GlobalCroppingSpecificationIndex = viewposition::GlobalCroppingSpecificationIndex;
        pub type RenderingMethod = viewposition::RenderingMethod;
        pub type VolumeCroppingSequence = viewposition::VolumeCroppingSequence;
        pub type VolumeCroppingMethod = viewposition::VolumeCroppingMethod;
        pub type BoundingBoxCrop = viewposition::BoundingBoxCrop;
        pub type ObliqueCroppingPlaneSequence = viewposition::ObliqueCroppingPlaneSequence;
        pub type Plane = viewposition::Plane;
        pub type PlaneNormal = viewposition::PlaneNormal;
        pub type CroppingSpecificationNumber = viewposition::CroppingSpecificationNumber;
        pub type MultiPlanarReconstructionStyle = viewposition::MultiPlanarReconstructionStyle;
        pub type MPRThicknessType = viewposition::MPRThicknessType;
        pub type MPRSlabThickness = viewposition::MPRSlabThickness;
        pub type MPRTopLeftHandCorner = viewposition::MPRTopLeftHandCorner;
        pub type MPRViewWidthDirection = viewposition::MPRViewWidthDirection;
        pub type MPRViewWidth = viewposition::MPRViewWidth;
        pub type NumberOfVolumetricCurvePoints = viewposition::NumberOfVolumetricCurvePoints;
        pub type VolumetricCurvePoints = viewposition::VolumetricCurvePoints;
        pub type MPRViewHeightDirection = viewposition::MPRViewHeightDirection;
        pub type MPRViewHeight = viewposition::MPRViewHeight;
        pub type RenderProjection = viewposition::RenderProjection;
        pub type ViewpointPosition = viewposition::ViewpointPosition;
        pub type ViewpointLookAtPoint = viewposition::ViewpointLookAtPoint;
        pub type ViewpointUpDirection = viewposition::ViewpointUpDirection;
        pub type RenderFieldOfView = viewposition::RenderFieldOfView;
        pub type SamplingStepSize = viewposition::SamplingStepSize;
        pub type ShadingStyle = viewposition::ShadingStyle;
        pub type AmbientReflectionIntensity = viewposition::AmbientReflectionIntensity;
        pub type LightDirection = viewposition::LightDirection;
        pub type DiffuseReflectionIntensity = viewposition::DiffuseReflectionIntensity;
        pub type SpecularReflectionIntensity = viewposition::SpecularReflectionIntensity;
        pub type Shininess = viewposition::Shininess;
        pub type PresentationStateClassificationComponentSequence =
            viewposition::PresentationStateClassificationComponentSequence;
        pub type ComponentType = viewposition::ComponentType;
        pub type ComponentInputSequence = viewposition::ComponentInputSequence;
        pub type VolumetricPresentationInputIndex = viewposition::VolumetricPresentationInputIndex;
        pub type PresentationStateCompositorComponentSequence =
            viewposition::PresentationStateCompositorComponentSequence;
        pub type WeightingTransferFunctionSequence =
            viewposition::WeightingTransferFunctionSequence;
        pub type WeightingLookupTableDescriptor = viewposition::WeightingLookupTableDescriptor;
        pub type WeightingLookupTableData = viewposition::WeightingLookupTableData;
        pub type VolumetricAnnotationSequence = viewposition::VolumetricAnnotationSequence;
        pub type ReferencedStructuredContextSequence =
            viewposition::ReferencedStructuredContextSequence;
        pub type ReferencedContentItem = viewposition::ReferencedContentItem;
        pub type VolumetricPresentationInputAnnotationSequence =
            viewposition::VolumetricPresentationInputAnnotationSequence;
        pub type AnnotationClipping = viewposition::AnnotationClipping;
        pub type PresentationAnimationStyle = viewposition::PresentationAnimationStyle;
        pub type RecommendedAnimationRate = viewposition::RecommendedAnimationRate;
        pub type AnimationCurveSequence = viewposition::AnimationCurveSequence;
        pub type AnimationStepSize = viewposition::AnimationStepSize;
        pub type SwivelRange = viewposition::SwivelRange;
        pub type VolumetricCurveUpDirections = viewposition::VolumetricCurveUpDirections;
        pub type VolumeStreamSequence = viewposition::VolumeStreamSequence;
        pub type RGBATransferFunctionDescription = viewposition::RGBATransferFunctionDescription;
        pub type AdvancedBlendingSequence = viewposition::AdvancedBlendingSequence;
        pub type BlendingInputNumber = viewposition::BlendingInputNumber;
        pub type BlendingDisplayInputSequence = viewposition::BlendingDisplayInputSequence;
        pub type BlendingDisplaySequence = viewposition::BlendingDisplaySequence;
        pub type BlendingMode = viewposition::BlendingMode;
        pub type TimeSeriesBlending = viewposition::TimeSeriesBlending;
        pub type GeometryForDisplay = viewposition::GeometryForDisplay;
        pub type ThresholdSequence = viewposition::ThresholdSequence;
        pub type ThresholdValueSequence = viewposition::ThresholdValueSequence;
        pub type ThresholdType = viewposition::ThresholdType;
        pub type ThresholdValue = viewposition::ThresholdValue;
    }

    pub mod viewposition {
        #[derive(Debug)]
        pub struct GraphicAnnotationSequence;
        impl std::fmt::Display for GraphicAnnotationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicAnnotationSequence {
            fn name(&self) -> String {
                "Graphic Annotation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0001)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0001)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayer;
        impl std::fmt::Display for GraphicLayer {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayer {
            fn name(&self) -> String {
                "Graphic Layer".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0002)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0002)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BoundingBoxAnnotationUnits;
        impl std::fmt::Display for BoundingBoxAnnotationUnits {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BoundingBoxAnnotationUnits {
            fn name(&self) -> String {
                "Bounding Box Annotation Units".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0003)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0003)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnchorPointAnnotationUnits;
        impl std::fmt::Display for AnchorPointAnnotationUnits {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnchorPointAnnotationUnits {
            fn name(&self) -> String {
                "Anchor Point Annotation Units".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0004)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0004)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicAnnotationUnits;
        impl std::fmt::Display for GraphicAnnotationUnits {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicAnnotationUnits {
            fn name(&self) -> String {
                "Graphic Annotation Units".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0005)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0005)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UnformattedTextValue;
        impl std::fmt::Display for UnformattedTextValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UnformattedTextValue {
            fn name(&self) -> String {
                "Unformatted Text Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0006)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0006)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TextObjectSequence;
        impl std::fmt::Display for TextObjectSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TextObjectSequence {
            fn name(&self) -> String {
                "Text Object Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0008)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0008)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicObjectSequence;
        impl std::fmt::Display for GraphicObjectSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicObjectSequence {
            fn name(&self) -> String {
                "Graphic Object Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0009)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0009)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BoundingBoxTopLeftHandCorner;
        impl std::fmt::Display for BoundingBoxTopLeftHandCorner {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BoundingBoxTopLeftHandCorner {
            fn name(&self) -> String {
                "Bounding Box Top Left Hand Corner".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0010)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0010)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct BoundingBoxBottomRightHandCorner;
        impl std::fmt::Display for BoundingBoxBottomRightHandCorner {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BoundingBoxBottomRightHandCorner {
            fn name(&self) -> String {
                "Bounding Box Bottom Right Hand Corner".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0011)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0011)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct BoundingBoxTextHorizontalJustification;
        impl std::fmt::Display for BoundingBoxTextHorizontalJustification {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BoundingBoxTextHorizontalJustification {
            fn name(&self) -> String {
                "Bounding Box Text Horizontal Justification".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0012)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0012)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnchorPoint;
        impl std::fmt::Display for AnchorPoint {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnchorPoint {
            fn name(&self) -> String {
                "Anchor Point".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0014)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0014)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct AnchorPointVisibility;
        impl std::fmt::Display for AnchorPointVisibility {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnchorPointVisibility {
            fn name(&self) -> String {
                "Anchor Point Visibility".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0015)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0015)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicDimensions;
        impl std::fmt::Display for GraphicDimensions {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicDimensions {
            fn name(&self) -> String {
                "Graphic Dimensions".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0020)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0020)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfGraphicPoints;
        impl std::fmt::Display for NumberOfGraphicPoints {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfGraphicPoints {
            fn name(&self) -> String {
                "Number of Graphic Points".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0021)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0021)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicData;
        impl std::fmt::Display for GraphicData {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicData {
            fn name(&self) -> String {
                "Graphic Data".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0022)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0022)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2-n"
            }
        }

        #[derive(Debug)]
        pub struct GraphicType;
        impl std::fmt::Display for GraphicType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicType {
            fn name(&self) -> String {
                "Graphic Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0023)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0023)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicFilled;
        impl std::fmt::Display for GraphicFilled {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicFilled {
            fn name(&self) -> String {
                "Graphic Filled".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0024)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0024)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageRotationRetired;
        impl std::fmt::Display for ImageRotationRetired {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageRotationRetired {
            fn name(&self) -> String {
                "Image Rotation (Retired)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0040)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0040)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageHorizontalFlip;
        impl std::fmt::Display for ImageHorizontalFlip {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageHorizontalFlip {
            fn name(&self) -> String {
                "Image Horizontal Flip".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0041)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0041)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageRotation;
        impl std::fmt::Display for ImageRotation {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageRotation {
            fn name(&self) -> String {
                "Image Rotation".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0042)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0042)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DisplayedAreaTopLeftHandCornerTrial;
        impl std::fmt::Display for DisplayedAreaTopLeftHandCornerTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DisplayedAreaTopLeftHandCornerTrial {
            fn name(&self) -> String {
                "Displayed Area Top Left Hand Corner (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0050)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0050)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct DisplayedAreaBottomRightHandCornerTrial;
        impl std::fmt::Display for DisplayedAreaBottomRightHandCornerTrial {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DisplayedAreaBottomRightHandCornerTrial {
            fn name(&self) -> String {
                "Displayed Area Bottom Right Hand Corner (Trial)".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0051)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0051)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct DisplayedAreaTopLeftHandCorner;
        impl std::fmt::Display for DisplayedAreaTopLeftHandCorner {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DisplayedAreaTopLeftHandCorner {
            fn name(&self) -> String {
                "Displayed Area Top Left Hand Corner".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0052)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0052)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct DisplayedAreaBottomRightHandCorner;
        impl std::fmt::Display for DisplayedAreaBottomRightHandCorner {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DisplayedAreaBottomRightHandCorner {
            fn name(&self) -> String {
                "Displayed Area Bottom Right Hand Corner".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0053)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0053)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct DisplayedAreaSelectionSequence;
        impl std::fmt::Display for DisplayedAreaSelectionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DisplayedAreaSelectionSequence {
            fn name(&self) -> String {
                "Displayed Area Selection Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x005A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x005A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerSequence;
        impl std::fmt::Display for GraphicLayerSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerSequence {
            fn name(&self) -> String {
                "Graphic Layer Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0060)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0060)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerOrder;
        impl std::fmt::Display for GraphicLayerOrder {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerOrder {
            fn name(&self) -> String {
                "Graphic Layer Order".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0062)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0062)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerRecommendedDisplayGrayscaleValue;
        impl std::fmt::Display for GraphicLayerRecommendedDisplayGrayscaleValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerRecommendedDisplayGrayscaleValue {
            fn name(&self) -> String {
                "Graphic Layer Recommended Display Grayscale Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0066)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0066)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerRecommendedDisplayRGBValue;
        impl std::fmt::Display for GraphicLayerRecommendedDisplayRGBValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerRecommendedDisplayRGBValue {
            fn name(&self) -> String {
                "Graphic Layer Recommended Display RGB Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0067)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0067)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerDescription;
        impl std::fmt::Display for GraphicLayerDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerDescription {
            fn name(&self) -> String {
                "Graphic Layer Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0068)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0068)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentLabel;
        impl std::fmt::Display for ContentLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentLabel {
            fn name(&self) -> String {
                "Content Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0080)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0080)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentDescription;
        impl std::fmt::Display for ContentDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentDescription {
            fn name(&self) -> String {
                "Content Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0081)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0081)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationCreationDate;
        impl std::fmt::Display for PresentationCreationDate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationCreationDate {
            fn name(&self) -> String {
                "Presentation Creation Date".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0082)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DA")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0082)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationCreationTime;
        impl std::fmt::Display for PresentationCreationTime {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationCreationTime {
            fn name(&self) -> String {
                "Presentation Creation Time".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0083)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("TM")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0083)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentCreatorName;
        impl std::fmt::Display for ContentCreatorName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentCreatorName {
            fn name(&self) -> String {
                "Content Creator's Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0084)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("PN")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0084)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContentCreatorIdentificationCodeSequence;
        impl std::fmt::Display for ContentCreatorIdentificationCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContentCreatorIdentificationCodeSequence {
            fn name(&self) -> String {
                "Content Creator's Identification Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0086)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0086)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AlternateContentDescriptionSequence;
        impl std::fmt::Display for AlternateContentDescriptionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AlternateContentDescriptionSequence {
            fn name(&self) -> String {
                "Alternate Content Description Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0087)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0087)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationSizeMode;
        impl std::fmt::Display for PresentationSizeMode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationSizeMode {
            fn name(&self) -> String {
                "Presentation Size Mode".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0100)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0100)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationPixelSpacing;
        impl std::fmt::Display for PresentationPixelSpacing {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationPixelSpacing {
            fn name(&self) -> String {
                "Presentation Pixel Spacing".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0101)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("DS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0101)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct PresentationPixelAspectRatio;
        impl std::fmt::Display for PresentationPixelAspectRatio {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationPixelAspectRatio {
            fn name(&self) -> String {
                "Presentation Pixel Aspect Ratio".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0102)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("IS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0102)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct PresentationPixelMagnificationRatio;
        impl std::fmt::Display for PresentationPixelMagnificationRatio {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationPixelMagnificationRatio {
            fn name(&self) -> String {
                "Presentation Pixel Magnification Ratio".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0103)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0103)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicGroupLabel;
        impl std::fmt::Display for GraphicGroupLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicGroupLabel {
            fn name(&self) -> String {
                "Graphic Group Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0207)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0207)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicGroupDescription;
        impl std::fmt::Display for GraphicGroupDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicGroupDescription {
            fn name(&self) -> String {
                "Graphic Group Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0208)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0208)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompoundGraphicSequence;
        impl std::fmt::Display for CompoundGraphicSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompoundGraphicSequence {
            fn name(&self) -> String {
                "Compound Graphic Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0209)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0209)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompoundGraphicInstanceID;
        impl std::fmt::Display for CompoundGraphicInstanceID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompoundGraphicInstanceID {
            fn name(&self) -> String {
                "Compound Graphic Instance ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0226)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0226)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FontName;
        impl std::fmt::Display for FontName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FontName {
            fn name(&self) -> String {
                "Font Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0227)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0227)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FontNameType;
        impl std::fmt::Display for FontNameType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FontNameType {
            fn name(&self) -> String {
                "Font Name Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0228)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0228)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CSSFontName;
        impl std::fmt::Display for CSSFontName {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CSSFontName {
            fn name(&self) -> String {
                "CSS Font Name".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0229)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0229)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RotationAngle;
        impl std::fmt::Display for RotationAngle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RotationAngle {
            fn name(&self) -> String {
                "Rotation Angle".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0230)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0230)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TextStyleSequence;
        impl std::fmt::Display for TextStyleSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TextStyleSequence {
            fn name(&self) -> String {
                "Text Style Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0231)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0231)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LineStyleSequence;
        impl std::fmt::Display for LineStyleSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LineStyleSequence {
            fn name(&self) -> String {
                "Line Style Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0232)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0232)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillStyleSequence;
        impl std::fmt::Display for FillStyleSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillStyleSequence {
            fn name(&self) -> String {
                "Fill Style Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0233)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0233)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicGroupSequence;
        impl std::fmt::Display for GraphicGroupSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicGroupSequence {
            fn name(&self) -> String {
                "Graphic Group Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0234)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0234)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TextColorCIELabValue;
        impl std::fmt::Display for TextColorCIELabValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TextColorCIELabValue {
            fn name(&self) -> String {
                "Text Color CIELab Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0241)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0241)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct HorizontalAlignment;
        impl std::fmt::Display for HorizontalAlignment {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for HorizontalAlignment {
            fn name(&self) -> String {
                "Horizontal Alignment".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0242)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0242)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VerticalAlignment;
        impl std::fmt::Display for VerticalAlignment {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VerticalAlignment {
            fn name(&self) -> String {
                "Vertical Alignment".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0243)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0243)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadowStyle;
        impl std::fmt::Display for ShadowStyle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadowStyle {
            fn name(&self) -> String {
                "Shadow Style".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0244)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0244)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadowOffsetX;
        impl std::fmt::Display for ShadowOffsetX {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadowOffsetX {
            fn name(&self) -> String {
                "Shadow Offset X".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0245)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0245)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadowOffsetY;
        impl std::fmt::Display for ShadowOffsetY {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadowOffsetY {
            fn name(&self) -> String {
                "Shadow Offset Y".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0246)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0246)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadowColorCIELabValue;
        impl std::fmt::Display for ShadowColorCIELabValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadowColorCIELabValue {
            fn name(&self) -> String {
                "Shadow Color CIELab Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0247)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0247)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct Underlined;
        impl std::fmt::Display for Underlined {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Underlined {
            fn name(&self) -> String {
                "Underlined".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0248)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0248)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Bold;
        impl std::fmt::Display for Bold {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Bold {
            fn name(&self) -> String {
                "Bold".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0249)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0249)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Italic;
        impl std::fmt::Display for Italic {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Italic {
            fn name(&self) -> String {
                "Italic".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0250)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0250)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatternOnColorCIELabValue;
        impl std::fmt::Display for PatternOnColorCIELabValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatternOnColorCIELabValue {
            fn name(&self) -> String {
                "Pattern On Color CIELab Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0251)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0251)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct PatternOffColorCIELabValue;
        impl std::fmt::Display for PatternOffColorCIELabValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatternOffColorCIELabValue {
            fn name(&self) -> String {
                "Pattern Off Color CIELab Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0252)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0252)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct LineThickness;
        impl std::fmt::Display for LineThickness {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LineThickness {
            fn name(&self) -> String {
                "Line Thickness".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0253)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0253)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LineDashingStyle;
        impl std::fmt::Display for LineDashingStyle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LineDashingStyle {
            fn name(&self) -> String {
                "Line Dashing Style".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0254)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0254)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LinePattern;
        impl std::fmt::Display for LinePattern {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LinePattern {
            fn name(&self) -> String {
                "Line Pattern".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0255)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0255)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillPattern;
        impl std::fmt::Display for FillPattern {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillPattern {
            fn name(&self) -> String {
                "Fill Pattern".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0256)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0256)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FillMode;
        impl std::fmt::Display for FillMode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FillMode {
            fn name(&self) -> String {
                "Fill Mode".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0257)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0257)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadowOpacity;
        impl std::fmt::Display for ShadowOpacity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadowOpacity {
            fn name(&self) -> String {
                "Shadow Opacity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0258)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0258)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GapLength;
        impl std::fmt::Display for GapLength {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GapLength {
            fn name(&self) -> String {
                "Gap Length".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0261)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0261)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct DiameterOfVisibility;
        impl std::fmt::Display for DiameterOfVisibility {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DiameterOfVisibility {
            fn name(&self) -> String {
                "Diameter of Visibility".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0262)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0262)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RotationPoint;
        impl std::fmt::Display for RotationPoint {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RotationPoint {
            fn name(&self) -> String {
                "Rotation Point".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0273)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0273)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "2"
            }
        }

        #[derive(Debug)]
        pub struct TickAlignment;
        impl std::fmt::Display for TickAlignment {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TickAlignment {
            fn name(&self) -> String {
                "Tick Alignment".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0274)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0274)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShowTickLabel;
        impl std::fmt::Display for ShowTickLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShowTickLabel {
            fn name(&self) -> String {
                "Show Tick Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0278)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0278)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TickLabelAlignment;
        impl std::fmt::Display for TickLabelAlignment {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TickLabelAlignment {
            fn name(&self) -> String {
                "Tick Label Alignment".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0279)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0279)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompoundGraphicUnits;
        impl std::fmt::Display for CompoundGraphicUnits {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompoundGraphicUnits {
            fn name(&self) -> String {
                "Compound Graphic Units".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0282)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0282)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatternOnOpacity;
        impl std::fmt::Display for PatternOnOpacity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatternOnOpacity {
            fn name(&self) -> String {
                "Pattern On Opacity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0284)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0284)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PatternOffOpacity;
        impl std::fmt::Display for PatternOffOpacity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PatternOffOpacity {
            fn name(&self) -> String {
                "Pattern Off Opacity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0285)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0285)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MajorTicksSequence;
        impl std::fmt::Display for MajorTicksSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MajorTicksSequence {
            fn name(&self) -> String {
                "Major Ticks Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0287)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0287)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TickPosition;
        impl std::fmt::Display for TickPosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TickPosition {
            fn name(&self) -> String {
                "Tick Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0288)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0288)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TickLabel;
        impl std::fmt::Display for TickLabel {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TickLabel {
            fn name(&self) -> String {
                "Tick Label".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0289)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0289)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CompoundGraphicType;
        impl std::fmt::Display for CompoundGraphicType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompoundGraphicType {
            fn name(&self) -> String {
                "Compound Graphic Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0294)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0294)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicGroupID;
        impl std::fmt::Display for GraphicGroupID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicGroupID {
            fn name(&self) -> String {
                "Graphic Group ID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0295)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0295)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShapeType;
        impl std::fmt::Display for ShapeType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShapeType {
            fn name(&self) -> String {
                "Shape Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0306)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0306)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RegistrationSequence;
        impl std::fmt::Display for RegistrationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RegistrationSequence {
            fn name(&self) -> String {
                "Registration Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0308)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0308)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MatrixRegistrationSequence;
        impl std::fmt::Display for MatrixRegistrationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MatrixRegistrationSequence {
            fn name(&self) -> String {
                "Matrix Registration Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0309)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0309)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MatrixSequence;
        impl std::fmt::Display for MatrixSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MatrixSequence {
            fn name(&self) -> String {
                "Matrix Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x030A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x030A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix;
        impl std::fmt::Display for FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag
            for FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix
        {
            fn name(&self) -> String {
                "Frame of Reference to Displayed Coordinate System Transformation Matrix"
                    .to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x030B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x030B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "16"
            }
        }

        #[derive(Debug)]
        pub struct FrameOfReferenceTransformationMatrixType;
        impl std::fmt::Display for FrameOfReferenceTransformationMatrixType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FrameOfReferenceTransformationMatrixType {
            fn name(&self) -> String {
                "Frame of Reference Transformation Matrix Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x030C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x030C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RegistrationTypeCodeSequence;
        impl std::fmt::Display for RegistrationTypeCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RegistrationTypeCodeSequence {
            fn name(&self) -> String {
                "Registration Type Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x030D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x030D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialDescription;
        impl std::fmt::Display for FiducialDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialDescription {
            fn name(&self) -> String {
                "Fiducial Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x030F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("ST")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x030F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialIdentifier;
        impl std::fmt::Display for FiducialIdentifier {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialIdentifier {
            fn name(&self) -> String {
                "Fiducial Identifier".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0310)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SH")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0310)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialIdentifierCodeSequence;
        impl std::fmt::Display for FiducialIdentifierCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialIdentifierCodeSequence {
            fn name(&self) -> String {
                "Fiducial Identifier Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0311)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0311)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ContourUncertaintyRadius;
        impl std::fmt::Display for ContourUncertaintyRadius {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ContourUncertaintyRadius {
            fn name(&self) -> String {
                "Contour Uncertainty Radius".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0312)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0312)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UsedFiducialsSequence;
        impl std::fmt::Display for UsedFiducialsSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UsedFiducialsSequence {
            fn name(&self) -> String {
                "Used Fiducials Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0314)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0314)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct UsedRTStructureSetROISequence;
        impl std::fmt::Display for UsedRTStructureSetROISequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for UsedRTStructureSetROISequence {
            fn name(&self) -> String {
                "Used RT Structure Set ROI Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0315)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0315)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicCoordinatesDataSequence;
        impl std::fmt::Display for GraphicCoordinatesDataSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicCoordinatesDataSequence {
            fn name(&self) -> String {
                "Graphic Coordinates Data Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0318)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0318)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialUID;
        impl std::fmt::Display for FiducialUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialUID {
            fn name(&self) -> String {
                "Fiducial UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x031A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x031A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedFiducialUID;
        impl std::fmt::Display for ReferencedFiducialUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedFiducialUID {
            fn name(&self) -> String {
                "Referenced Fiducial UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x031B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x031B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialSetSequence;
        impl std::fmt::Display for FiducialSetSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialSetSequence {
            fn name(&self) -> String {
                "Fiducial Set Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x031C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x031C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialSequence;
        impl std::fmt::Display for FiducialSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialSequence {
            fn name(&self) -> String {
                "Fiducial Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x031E)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x031E)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct FiducialsPropertyCategoryCodeSequence;
        impl std::fmt::Display for FiducialsPropertyCategoryCodeSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for FiducialsPropertyCategoryCodeSequence {
            fn name(&self) -> String {
                "Fiducials Property Category Code Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x031F)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x031F)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GraphicLayerRecommendedDisplayCIELabValue;
        impl std::fmt::Display for GraphicLayerRecommendedDisplayCIELabValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GraphicLayerRecommendedDisplayCIELabValue {
            fn name(&self) -> String {
                "Graphic Layer Recommended Display CIELab Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0401)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0401)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct BlendingSequence;
        impl std::fmt::Display for BlendingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingSequence {
            fn name(&self) -> String {
                "Blending Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0402)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0402)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RelativeOpacity;
        impl std::fmt::Display for RelativeOpacity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RelativeOpacity {
            fn name(&self) -> String {
                "Relative Opacity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0403)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0403)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedSpatialRegistrationSequence;
        impl std::fmt::Display for ReferencedSpatialRegistrationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedSpatialRegistrationSequence {
            fn name(&self) -> String {
                "Referenced Spatial Registration Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0404)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0404)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlendingPosition;
        impl std::fmt::Display for BlendingPosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingPosition {
            fn name(&self) -> String {
                "Blending Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x0405)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x0405)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationDisplayCollectionUID;
        impl std::fmt::Display for PresentationDisplayCollectionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationDisplayCollectionUID {
            fn name(&self) -> String {
                "Presentation Display Collection UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1101)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1101)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationSequenceCollectionUID;
        impl std::fmt::Display for PresentationSequenceCollectionUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationSequenceCollectionUID {
            fn name(&self) -> String {
                "Presentation Sequence Collection UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1102)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1102)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationSequencePositionIndex;
        impl std::fmt::Display for PresentationSequencePositionIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationSequencePositionIndex {
            fn name(&self) -> String {
                "Presentation Sequence Position Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1103)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1103)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RenderedImageReferenceSequence;
        impl std::fmt::Display for RenderedImageReferenceSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RenderedImageReferenceSequence {
            fn name(&self) -> String {
                "Rendered Image Reference Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1104)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1104)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationStateInputSequence;
        impl std::fmt::Display for VolumetricPresentationStateInputSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationStateInputSequence {
            fn name(&self) -> String {
                "Volumetric Presentation State Input Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1201)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1201)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationInputType;
        impl std::fmt::Display for PresentationInputType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationInputType {
            fn name(&self) -> String {
                "Presentation Input Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1202)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1202)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct InputSequencePositionIndex;
        impl std::fmt::Display for InputSequencePositionIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for InputSequencePositionIndex {
            fn name(&self) -> String {
                "Input Sequence Position Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1203)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1203)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Crop;
        impl std::fmt::Display for Crop {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Crop {
            fn name(&self) -> String {
                "Crop".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1204)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1204)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct CroppingSpecificationIndex;
        impl std::fmt::Display for CroppingSpecificationIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CroppingSpecificationIndex {
            fn name(&self) -> String {
                "Cropping Specification Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1205)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1205)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct CompositingMethod;
        impl std::fmt::Display for CompositingMethod {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CompositingMethod {
            fn name(&self) -> String {
                "Compositing Method".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1206)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1206)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationInputNumber;
        impl std::fmt::Display for VolumetricPresentationInputNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationInputNumber {
            fn name(&self) -> String {
                "Volumetric Presentation Input Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1207)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1207)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ImageVolumeGeometry;
        impl std::fmt::Display for ImageVolumeGeometry {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ImageVolumeGeometry {
            fn name(&self) -> String {
                "Image Volume Geometry".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1208)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1208)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationInputSetUID;
        impl std::fmt::Display for VolumetricPresentationInputSetUID {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationInputSetUID {
            fn name(&self) -> String {
                "Volumetric Presentation Input Set UID".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1209)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1209)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationInputSetSequence;
        impl std::fmt::Display for VolumetricPresentationInputSetSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationInputSetSequence {
            fn name(&self) -> String {
                "Volumetric Presentation Input Set Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x120A)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x120A)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GlobalCrop;
        impl std::fmt::Display for GlobalCrop {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GlobalCrop {
            fn name(&self) -> String {
                "Global Crop".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x120B)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x120B)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GlobalCroppingSpecificationIndex;
        impl std::fmt::Display for GlobalCroppingSpecificationIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GlobalCroppingSpecificationIndex {
            fn name(&self) -> String {
                "Global Cropping Specification Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x120C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x120C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1-n"
            }
        }

        #[derive(Debug)]
        pub struct RenderingMethod;
        impl std::fmt::Display for RenderingMethod {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RenderingMethod {
            fn name(&self) -> String {
                "Rendering Method".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x120D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x120D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumeCroppingSequence;
        impl std::fmt::Display for VolumeCroppingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeCroppingSequence {
            fn name(&self) -> String {
                "Volume Cropping Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1301)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1301)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumeCroppingMethod;
        impl std::fmt::Display for VolumeCroppingMethod {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeCroppingMethod {
            fn name(&self) -> String {
                "Volume Cropping Method".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1302)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1302)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BoundingBoxCrop;
        impl std::fmt::Display for BoundingBoxCrop {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BoundingBoxCrop {
            fn name(&self) -> String {
                "Bounding Box Crop".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1303)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1303)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "6"
            }
        }

        #[derive(Debug)]
        pub struct ObliqueCroppingPlaneSequence;
        impl std::fmt::Display for ObliqueCroppingPlaneSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ObliqueCroppingPlaneSequence {
            fn name(&self) -> String {
                "Oblique Cropping Plane Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1304)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1304)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Plane;
        impl std::fmt::Display for Plane {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Plane {
            fn name(&self) -> String {
                "Plane".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1305)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1305)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "4"
            }
        }

        #[derive(Debug)]
        pub struct PlaneNormal;
        impl std::fmt::Display for PlaneNormal {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PlaneNormal {
            fn name(&self) -> String {
                "Plane Normal".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1306)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1306)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct CroppingSpecificationNumber;
        impl std::fmt::Display for CroppingSpecificationNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for CroppingSpecificationNumber {
            fn name(&self) -> String {
                "Cropping Specification Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1309)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1309)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MultiPlanarReconstructionStyle;
        impl std::fmt::Display for MultiPlanarReconstructionStyle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MultiPlanarReconstructionStyle {
            fn name(&self) -> String {
                "Multi-Planar Reconstruction Style".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1501)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1501)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MPRThicknessType;
        impl std::fmt::Display for MPRThicknessType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRThicknessType {
            fn name(&self) -> String {
                "MPR Thickness Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1502)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1502)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MPRSlabThickness;
        impl std::fmt::Display for MPRSlabThickness {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRSlabThickness {
            fn name(&self) -> String {
                "MPR Slab Thickness".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1503)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1503)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MPRTopLeftHandCorner;
        impl std::fmt::Display for MPRTopLeftHandCorner {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRTopLeftHandCorner {
            fn name(&self) -> String {
                "MPR Top Left Hand Corner".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1505)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1505)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct MPRViewWidthDirection;
        impl std::fmt::Display for MPRViewWidthDirection {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRViewWidthDirection {
            fn name(&self) -> String {
                "MPR View Width Direction".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1507)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1507)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct MPRViewWidth;
        impl std::fmt::Display for MPRViewWidth {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRViewWidth {
            fn name(&self) -> String {
                "MPR View Width".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1508)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1508)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct NumberOfVolumetricCurvePoints;
        impl std::fmt::Display for NumberOfVolumetricCurvePoints {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for NumberOfVolumetricCurvePoints {
            fn name(&self) -> String {
                "Number of Volumetric Curve Points".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x150C)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UL")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x150C)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricCurvePoints;
        impl std::fmt::Display for VolumetricCurvePoints {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricCurvePoints {
            fn name(&self) -> String {
                "Volumetric Curve Points".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x150D)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x150D)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct MPRViewHeightDirection;
        impl std::fmt::Display for MPRViewHeightDirection {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRViewHeightDirection {
            fn name(&self) -> String {
                "MPR View Height Direction".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1511)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1511)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct MPRViewHeight;
        impl std::fmt::Display for MPRViewHeight {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for MPRViewHeight {
            fn name(&self) -> String {
                "MPR View Height".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1512)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1512)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RenderProjection;
        impl std::fmt::Display for RenderProjection {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RenderProjection {
            fn name(&self) -> String {
                "Render Projection".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1602)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1602)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ViewpointPosition;
        impl std::fmt::Display for ViewpointPosition {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ViewpointPosition {
            fn name(&self) -> String {
                "Viewpoint Position".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1603)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1603)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct ViewpointLookAtPoint;
        impl std::fmt::Display for ViewpointLookAtPoint {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ViewpointLookAtPoint {
            fn name(&self) -> String {
                "Viewpoint LookAt Point".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1604)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1604)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct ViewpointUpDirection;
        impl std::fmt::Display for ViewpointUpDirection {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ViewpointUpDirection {
            fn name(&self) -> String {
                "Viewpoint Up Direction".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1605)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1605)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct RenderFieldOfView;
        impl std::fmt::Display for RenderFieldOfView {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RenderFieldOfView {
            fn name(&self) -> String {
                "Render Field of View".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1606)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1606)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "6"
            }
        }

        #[derive(Debug)]
        pub struct SamplingStepSize;
        impl std::fmt::Display for SamplingStepSize {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SamplingStepSize {
            fn name(&self) -> String {
                "Sampling Step Size".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1607)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1607)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ShadingStyle;
        impl std::fmt::Display for ShadingStyle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ShadingStyle {
            fn name(&self) -> String {
                "Shading Style".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1701)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1701)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AmbientReflectionIntensity;
        impl std::fmt::Display for AmbientReflectionIntensity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AmbientReflectionIntensity {
            fn name(&self) -> String {
                "Ambient Reflection Intensity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1702)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1702)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct LightDirection;
        impl std::fmt::Display for LightDirection {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for LightDirection {
            fn name(&self) -> String {
                "Light Direction".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1703)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1703)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct DiffuseReflectionIntensity;
        impl std::fmt::Display for DiffuseReflectionIntensity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for DiffuseReflectionIntensity {
            fn name(&self) -> String {
                "Diffuse Reflection Intensity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1704)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1704)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SpecularReflectionIntensity;
        impl std::fmt::Display for SpecularReflectionIntensity {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SpecularReflectionIntensity {
            fn name(&self) -> String {
                "Specular Reflection Intensity".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1705)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1705)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct Shininess;
        impl std::fmt::Display for Shininess {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for Shininess {
            fn name(&self) -> String {
                "Shininess".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1706)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1706)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationStateClassificationComponentSequence;
        impl std::fmt::Display for PresentationStateClassificationComponentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationStateClassificationComponentSequence {
            fn name(&self) -> String {
                "Presentation State Classification Component Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1801)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1801)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ComponentType;
        impl std::fmt::Display for ComponentType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ComponentType {
            fn name(&self) -> String {
                "Component Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1802)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1802)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ComponentInputSequence;
        impl std::fmt::Display for ComponentInputSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ComponentInputSequence {
            fn name(&self) -> String {
                "Component Input Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1803)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1803)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationInputIndex;
        impl std::fmt::Display for VolumetricPresentationInputIndex {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationInputIndex {
            fn name(&self) -> String {
                "Volumetric Presentation Input Index".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1804)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1804)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationStateCompositorComponentSequence;
        impl std::fmt::Display for PresentationStateCompositorComponentSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationStateCompositorComponentSequence {
            fn name(&self) -> String {
                "Presentation State Compositor Component Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1805)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1805)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WeightingTransferFunctionSequence;
        impl std::fmt::Display for WeightingTransferFunctionSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WeightingTransferFunctionSequence {
            fn name(&self) -> String {
                "Weighting Transfer Function Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1806)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1806)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct WeightingLookupTableDescriptor;
        impl std::fmt::Display for WeightingLookupTableDescriptor {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WeightingLookupTableDescriptor {
            fn name(&self) -> String {
                "Weighting Lookup Table Descriptor".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1807)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1807)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "3"
            }
        }

        #[derive(Debug)]
        pub struct WeightingLookupTableData;
        impl std::fmt::Display for WeightingLookupTableData {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for WeightingLookupTableData {
            fn name(&self) -> String {
                "Weighting Lookup Table Data".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1808)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OB")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1808)
            }
            fn is_deprecated(&self) -> bool {
                true
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricAnnotationSequence;
        impl std::fmt::Display for VolumetricAnnotationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricAnnotationSequence {
            fn name(&self) -> String {
                "Volumetric Annotation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1901)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1901)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedStructuredContextSequence;
        impl std::fmt::Display for ReferencedStructuredContextSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedStructuredContextSequence {
            fn name(&self) -> String {
                "Referenced Structured Context Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1903)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1903)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ReferencedContentItem;
        impl std::fmt::Display for ReferencedContentItem {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ReferencedContentItem {
            fn name(&self) -> String {
                "Referenced Content Item".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1904)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("UI")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1904)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricPresentationInputAnnotationSequence;
        impl std::fmt::Display for VolumetricPresentationInputAnnotationSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricPresentationInputAnnotationSequence {
            fn name(&self) -> String {
                "Volumetric Presentation Input Annotation Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1905)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1905)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnnotationClipping;
        impl std::fmt::Display for AnnotationClipping {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnnotationClipping {
            fn name(&self) -> String {
                "Annotation Clipping".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1907)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1907)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct PresentationAnimationStyle;
        impl std::fmt::Display for PresentationAnimationStyle {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for PresentationAnimationStyle {
            fn name(&self) -> String {
                "Presentation Animation Style".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A01)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A01)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RecommendedAnimationRate;
        impl std::fmt::Display for RecommendedAnimationRate {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RecommendedAnimationRate {
            fn name(&self) -> String {
                "Recommended Animation Rate".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A03)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A03)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnimationCurveSequence;
        impl std::fmt::Display for AnimationCurveSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnimationCurveSequence {
            fn name(&self) -> String {
                "Animation Curve Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A04)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A04)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AnimationStepSize;
        impl std::fmt::Display for AnimationStepSize {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AnimationStepSize {
            fn name(&self) -> String {
                "Animation Step Size".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A05)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A05)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct SwivelRange;
        impl std::fmt::Display for SwivelRange {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for SwivelRange {
            fn name(&self) -> String {
                "Swivel Range".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A06)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A06)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumetricCurveUpDirections;
        impl std::fmt::Display for VolumetricCurveUpDirections {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumetricCurveUpDirections {
            fn name(&self) -> String {
                "Volumetric Curve Up Directions".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A07)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("OD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A07)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct VolumeStreamSequence;
        impl std::fmt::Display for VolumeStreamSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for VolumeStreamSequence {
            fn name(&self) -> String {
                "Volume Stream Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A08)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A08)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct RGBATransferFunctionDescription;
        impl std::fmt::Display for RGBATransferFunctionDescription {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for RGBATransferFunctionDescription {
            fn name(&self) -> String {
                "RGBA Transfer Function Description".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1A09)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("LO")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1A09)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct AdvancedBlendingSequence;
        impl std::fmt::Display for AdvancedBlendingSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for AdvancedBlendingSequence {
            fn name(&self) -> String {
                "Advanced Blending Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B01)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B01)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlendingInputNumber;
        impl std::fmt::Display for BlendingInputNumber {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingInputNumber {
            fn name(&self) -> String {
                "Blending Input Number".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B02)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("US")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B02)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlendingDisplayInputSequence;
        impl std::fmt::Display for BlendingDisplayInputSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingDisplayInputSequence {
            fn name(&self) -> String {
                "Blending Display Input Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B03)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B03)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlendingDisplaySequence;
        impl std::fmt::Display for BlendingDisplaySequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingDisplaySequence {
            fn name(&self) -> String {
                "Blending Display Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B04)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B04)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct BlendingMode;
        impl std::fmt::Display for BlendingMode {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for BlendingMode {
            fn name(&self) -> String {
                "Blending Mode".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B06)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B06)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct TimeSeriesBlending;
        impl std::fmt::Display for TimeSeriesBlending {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for TimeSeriesBlending {
            fn name(&self) -> String {
                "Time Series Blending".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B07)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B07)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct GeometryForDisplay;
        impl std::fmt::Display for GeometryForDisplay {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for GeometryForDisplay {
            fn name(&self) -> String {
                "Geometry for Display".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B08)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B08)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ThresholdSequence;
        impl std::fmt::Display for ThresholdSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ThresholdSequence {
            fn name(&self) -> String {
                "Threshold Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B11)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B11)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ThresholdValueSequence;
        impl std::fmt::Display for ThresholdValueSequence {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ThresholdValueSequence {
            fn name(&self) -> String {
                "Threshold Value Sequence".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B12)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("SQ")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B12)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ThresholdType;
        impl std::fmt::Display for ThresholdType {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ThresholdType {
            fn name(&self) -> String {
                "Threshold Type".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B13)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("CS")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B13)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }

        #[derive(Debug)]
        pub struct ThresholdValue;
        impl std::fmt::Display for ThresholdValue {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "{:#?}", self)
            }
        }

        impl crate::core::tag::DicomTag for ThresholdValue {
            fn name(&self) -> String {
                "Threshold Value".to_string()
            }
            fn tag(&self) -> (u16, u16) {
                (0x0070, 0x1B14)
            }
            fn vr(&self) -> crate::core::tag::VisualRepresentation {
                crate::core::tag::VisualRepresentation::new("FD")
            }
            fn group(&self) -> u16 {
                0x0070
            }
            fn element(&self) -> Option<u16> {
                Some(0x1B14)
            }
            fn is_deprecated(&self) -> bool {
                false
            }
            fn multiplicity(&self) -> &str {
                "1"
            }
        }
    }
}
